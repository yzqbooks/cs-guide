"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[13797],{95248:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-e1ae3f56","path":"/python-tutor/basics/dict-set.html","title":"字典和set","lang":"zh-CN","frontmatter":{"index":5,"summary":"字典和set 上一篇文章出现了个明显的知识点错误，不过感谢有个网友的提出，及时进行了修改。也希望各位多多包涵。 \\"注：(2019年09月01日15:28:00) 在修改文章的时候，发现自己两年前写的像屎一样, 忍不住还在群里吐槽一番。\\" 目录 # 一、字典(Dictionary) # 1、什么是 dict（字典） ## 上一章节，我们学习了列表（List） ","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/python-tutor/basics/dict-set.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"字典和set"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-26T11:39:36.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-26T11:39:36.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"1、什么是 dict（字典）","slug":"_1、什么是-dict-字典","children":[]},{"level":2,"title":"2、dict （字典）的创建","slug":"_2、dict-字典-的创建","children":[]},{"level":2,"title":"3、访问 dict （字典）","slug":"_3、访问-dict-字典","children":[]},{"level":2,"title":"4、修改 dict （字典）","slug":"_4、修改-dict-字典","children":[]},{"level":2,"title":"5、删除 dict （字典）","slug":"_5、删除-dict-字典","children":[]},{"level":2,"title":"6、 dict （字典）使用时注意的事项","slug":"_6、-dict-字典-使用时注意的事项","children":[]},{"level":2,"title":"7、dict （字典） 的函数和方法","slug":"_7、dict-字典-的函数和方法","children":[]},{"level":2,"title":"1、set 的创建","slug":"_1、set-的创建","children":[]},{"level":2,"title":"2、set 添加元素","slug":"_2、set-添加元素","children":[]},{"level":2,"title":"3、set 删除元素","slug":"_3、set-删除元素","children":[]},{"level":2,"title":"4、set 的运用","slug":"_4、set-的运用","children":[]}],"git":{"createdTime":1653549183000,"updatedTime":1653565176000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":2}]},"readingTime":{"minutes":6.89,"words":2067},"filePathRelative":"python-tutor/basics/dict-set.md","localizedDate":"2022年5月26日"}')},78747:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(66252);const e=[(0,t.uE)('<h1 id="字典和set" tabindex="-1"><a class="header-anchor" href="#字典和set" aria-hidden="true">#</a> 字典和set</h1><p>上一篇文章出现了个明显的知识点错误，不过感谢有个网友的提出，及时进行了修改。也希望各位多多包涵。</p><blockquote><p>注：(2019年09月01日15:28:00) 在修改文章的时候，发现自己两年前写的像屎一样, 忍不住还在群里吐槽一番。</p></blockquote><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-01-072923.png" alt="" loading="lazy"></p><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h1><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-01-Dict 和 Set.png" alt="" loading="lazy"></p><h1 id="一、字典-dictionary" tabindex="-1"><a class="header-anchor" href="#一、字典-dictionary" aria-hidden="true">#</a> 一、字典(Dictionary)</h1><h2 id="_1、什么是-dict-字典" tabindex="-1"><a class="header-anchor" href="#_1、什么是-dict-字典" aria-hidden="true">#</a> 1、什么是 dict（字典）</h2><p>上一章节，我们学习了列表（List） 和 元组（tuple） 来表示有序集合。</p><p>而我们在讲列表（list）的时候，我们用了列表（list） 来存储用户的姓名。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;一点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;两点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;四点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;五点水&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么如果我们为了方便联系这些童鞋，要把电话号码也添加进去，该怎么做呢？</p><p>用 list 可以这样子解决：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;一点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;131456780001&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;131456780002&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;三点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;131456780003&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;四点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;131456780004&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;五点水&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;131456780005&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是这样很不方便，我们把电话号码记录下来，就是为了有什么事能及时联系上这些童鞋。</p><p>如果用列表来存储这些，列表越长，我们查找起来耗时就越长。</p><p>这时候就可以用 dict （字典）来表示了，Python 内置了 字典（dict），dict 全称 dictionary，如果学过 Java ，字典就相当于 JAVA 中的 map，使用键-值（key-value）存储，具有极快的查找速度。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;一点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;两点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780002&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780003&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;四点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780004&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;五点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780005&#39;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2、dict-字典-的创建" tabindex="-1"><a class="header-anchor" href="#_2、dict-字典-的创建" aria-hidden="true">#</a> 2、dict （字典）的创建</h2><p>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中 ,格式如下所示：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span>key1 <span class="token punctuation">:</span> value1<span class="token punctuation">,</span> key2 <span class="token punctuation">:</span> value2 <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：键必须是唯一的，但值则不必。值可以取任何数据类型，但键必须是不可变的。</p><p>创建 dict（字典）实例：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>dict1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;liangdianshui&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;111111&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;twowater&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;222222&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;333333&#39;</span><span class="token punctuation">}</span>\ndict2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">:</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">:</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、访问-dict-字典" tabindex="-1"><a class="header-anchor" href="#_3、访问-dict-字典" aria-hidden="true">#</a> 3、访问 dict （字典）</h2><p>我们知道了怎么创建列表了，回归到一开始提出到的问题，为什么使用字典能让我们很快的找出某个童鞋的电话呢？</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;一点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;两点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780002&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780003&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;四点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780004&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;五点水&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;131456780005&#39;</span><span class="token punctuation">}</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>131456780002\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，如果你知道某个人的名字，也就是 key 值， 就能很快的查找到他对应的电话号码，也就是 Value 。</p><p>这里需要注意的一点是：如果字典中没有这个键，是会报错的。</p><h2 id="_4、修改-dict-字典" tabindex="-1"><a class="header-anchor" href="#_4、修改-dict-字典" aria-hidden="true">#</a> 4、修改 dict （字典）</h2><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#-*-coding:utf-8-*-</span>\ndict1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;liangdianshui&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;111111&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;twowater&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;222222&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;333333&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>\n<span class="token comment"># 新增一个键值对</span>\ndict1<span class="token punctuation">[</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&#39;444444&#39;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>\n<span class="token comment"># 修改键值对</span>\ndict1<span class="token punctuation">[</span><span class="token string">&#39;liangdianshui&#39;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&#39;555555&#39;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{&#39;liangdianshui&#39;: &#39;111111&#39;, &#39;twowater&#39;: &#39;222222&#39;, &#39;两点水&#39;: &#39;333333&#39;}\n{&#39;liangdianshui&#39;: &#39;111111&#39;, &#39;twowater&#39;: &#39;222222&#39;, &#39;两点水&#39;: &#39;333333&#39;, &#39;jack&#39;: &#39;444444&#39;}\n{&#39;liangdianshui&#39;: &#39;555555&#39;, &#39;twowater&#39;: &#39;222222&#39;, &#39;两点水&#39;: &#39;333333&#39;, &#39;jack&#39;: &#39;444444&#39;}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、删除-dict-字典" tabindex="-1"><a class="header-anchor" href="#_5、删除-dict-字典" aria-hidden="true">#</a> 5、删除 dict （字典）</h2><p>通过 <code>del</code> 可以删除 dict （字典）中的某个元素，也能删除 dict （字典）</p><p>通过调用 <code>clear()</code> 方法可以清除字典中的所有元素</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#-*-coding:utf-8-*-</span>\ndict1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;liangdianshui&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;111111&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;twowater&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;222222&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;333333&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>\n<span class="token comment"># 通过 key 值，删除对应的元素</span>\n<span class="token keyword">del</span> dict1<span class="token punctuation">[</span><span class="token string">&#39;twowater&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>\n<span class="token comment"># 删除字典中的所有元素</span>\ndict1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>\n<span class="token comment"># 删除字典</span>\n<span class="token keyword">del</span> dict1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{&#39;liangdianshui&#39;: &#39;111111&#39;, &#39;twowater&#39;: &#39;222222&#39;, &#39;两点水&#39;: &#39;333333&#39;}\n{&#39;liangdianshui&#39;: &#39;111111&#39;, &#39;两点水&#39;: &#39;333333&#39;}\n{}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、-dict-字典-使用时注意的事项" tabindex="-1"><a class="header-anchor" href="#_6、-dict-字典-使用时注意的事项" aria-hidden="true">#</a> 6、 dict （字典）使用时注意的事项</h2><p>(1) dict （字典）是不允许一个键创建两次的，但是在创建 dict （字典）的时候如果出现了一个键值赋予了两次，会以最后一次赋予的值为准</p><p>例如：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#-*-coding:utf-8-*-</span>\ndict1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;liangdianshui&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;111111&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;twowater&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;222222&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;333333&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;twowater&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;444444&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">&#39;twowater&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{&#39;liangdianshui&#39;: &#39;111111&#39;, &#39;twowater&#39;: &#39;444444&#39;, &#39;两点水&#39;: &#39;333333&#39;}\n444444\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(2) dict （字典）键必须不可变，可是键可以用数字，字符串或元组充当，但是就是不能使用列表</p><p>例如：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#-*-coding:utf-8-*-</span>\ndict1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;liangdianshui&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;111111&#39;</span> <span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">:</span><span class="token string">&#39;222222&#39;</span> <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">&#39;333333&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;twowater&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;444444&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{&#39;liangdianshui&#39;: &#39;111111&#39;, 123: &#39;222222&#39;, (123, &#39;tom&#39;): &#39;333333&#39;, &#39;twowater&#39;: &#39;444444&#39;}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(3) dict 内部存放的顺序和 key 放入的顺序是没有任何关系</p><p>和 list 比较，dict 有以下几个特点：</p><ul><li><p>查找和插入的速度极快，不会随着key的增加而变慢</p></li><li><p>需要占用大量的内存，内存浪费多</p></li></ul><p>而list相反：</p><ul><li><p>查找和插入的时间随着元素的增加而增加</p></li><li><p>占用空间小，浪费内存很少</p></li></ul><h2 id="_7、dict-字典-的函数和方法" tabindex="-1"><a class="header-anchor" href="#_7、dict-字典-的函数和方法" aria-hidden="true">#</a> 7、dict （字典） 的函数和方法</h2><table><thead><tr><th>方法和函数</th><th>描述</th></tr></thead><tbody><tr><td>len(dict)</td><td>计算字典元素个数</td></tr><tr><td>str(dict)</td><td>输出字典可打印的字符串表示</td></tr><tr><td>type(variable)</td><td>返回输入的变量类型，如果变量是字典就返回字典类型</td></tr><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.values()</td><td>以列表返回字典中的所有值</td></tr><tr><td>popitem()</td><td>随机返回并删除字典中的一对键和值</td></tr><tr><td>dict.items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr></tbody></table><h1 id="二、set" tabindex="-1"><a class="header-anchor" href="#二、set" aria-hidden="true">#</a> 二、set</h1><p>python 的 set 和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素。</p><p>set 和 dict 类似，但是 set 不存储 value 值的。</p><h2 id="_1、set-的创建" tabindex="-1"><a class="header-anchor" href="#_1、set-的创建" aria-hidden="true">#</a> 1、set 的创建</h2><p>创建一个 set，需要提供一个 list 作为输入集合</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>set1<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{456, 123, 789}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>传入的参数 <code>[123,456,789]</code> 是一个 list，而显示的 <code>{456, 123, 789}</code> 只是告诉你这个 set 内部有 456, 123, 789 这 3 个元素，显示的顺序跟你参数中的 list 里的元素的顺序是不一致的，这也说明了 set 是无序的。</p><p>还有一点，我们观察到输出的结果是在大括号中的，经过之前的学习，可以知道，tuple (元组) 使用小括号，list (列表) 使用方括号, dict (字典) 使用的是大括号，dict 也是无序的，只不过 dict 保存的是 key-value 键值对值，而 set 可以理解为只保存 key 值。</p><p>回忆一下，在 dict （字典） 中创建时，有重复的 key ，会被后面的 key-value 值覆盖的，而 重复元素在 set 中自动被过滤的。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>set1<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{456, 123, 789}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2、set-添加元素" tabindex="-1"><a class="header-anchor" href="#_2、set-添加元素" aria-hidden="true">#</a> 2、set 添加元素</h2><p>通过 add(key) 方法可以添加元素到 set 中，可以重复添加，但不会有效果</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>set1<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>\nset1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>\nset1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{456, 123, 789}\n{456, 123, 100, 789}\n{456, 123, 100, 789}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、set-删除元素" tabindex="-1"><a class="header-anchor" href="#_3、set-删除元素" aria-hidden="true">#</a> 3、set 删除元素</h2><p>通过 remove(key) 方法可以删除 set 中的元素</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>set1<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>\nset1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{456, 123, 789}\n{123, 789}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、set-的运用" tabindex="-1"><a class="header-anchor" href="#_4、set-的运用" aria-hidden="true">#</a> 4、set 的运用</h2><p>因为 set 是一个无序不重复元素集，因此，两个 set 可以做数学意义上的 union(并集), intersection(交集), difference(差集) 等操作。</p><p><img src="http://upload-images.jianshu.io/upload_images/2136918-733b1d1071f772bd?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="set集合运算" loading="lazy"></p><p>例子：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>set1<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\nset2<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span>\n\n<span class="token comment"># 交集 (求两个 set 集合中相同的元素)</span>\nset3<span class="token operator">=</span>set1 <span class="token operator">&amp;</span> set2\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n交集 set3:&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set3<span class="token punctuation">)</span>\n<span class="token comment"># 并集 （合并两个 set 集合的元素并去除重复的值）</span>\nset4<span class="token operator">=</span>set1 <span class="token operator">|</span> set2\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n并集 set4:&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set4<span class="token punctuation">)</span>\n<span class="token comment"># 差集</span>\nset5<span class="token operator">=</span>set1 <span class="token operator">-</span> set2\nset6<span class="token operator">=</span>set2 <span class="token operator">-</span> set1\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n差集 set5:&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set5<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n差集 set6:&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span> set6<span class="token punctuation">)</span>\n\n\n<span class="token comment"># 去除海量列表里重复元素，用 hash 来解决也行，只不过感觉在性能上不是很高，用 set 解决还是很不错的</span>\nlist1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">]</span>  \nset7<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n去除列表里重复元素 set7:&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>set7<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行的结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{&#39;h&#39;, &#39;l&#39;, &#39;e&#39;, &#39;o&#39;}\n{&#39;h&#39;, &#39;n&#39;, &#39;o&#39;, &#39;y&#39;, &#39;p&#39;}\n\n交集 set3:\n{&#39;h&#39;, &#39;o&#39;}\n\n并集 set4:\n{&#39;h&#39;, &#39;p&#39;, &#39;n&#39;, &#39;e&#39;, &#39;o&#39;, &#39;y&#39;, &#39;l&#39;}\n\n差集 set5:\n{&#39;l&#39;, &#39;e&#39;}\n\n差集 set6:\n{&#39;p&#39;, &#39;y&#39;, &#39;n&#39;}\n\n去除列表里重复元素 set7:\n{555, 333, 111, 666, 444, 222}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',92)],p={},i=(0,a(83744).Z)(p,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])}}]);