"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[93933],{92785:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t=JSON.parse('{"key":"v-56191010","path":"/java-tutor/stackoverflow/using-java-net-urlconnection-to-fire-and-handle-http-requests.html","title":"如何使用java.net.URLConnection接收及发送HTTP请求","lang":"zh-CN","frontmatter":{"summary":"如何使用java.net.URLConnection接收及发送HTTP请求 首先声明，下面的代码，都是基本的例子。更严谨的话，还应加入处理各种异常的代码(如IOExceptions、NullPointerException、ArrayIndexOutOfBoundsException) 准备 首先，需要设置请求的URL以及charset(编码)；额外的参数，","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/stackoverflow/using-java-net-urlconnection-to-fire-and-handle-http-requests.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"如何使用java.net.URLConnection接收及发送HTTP请求"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-07-29T00:56:12.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-07-29T00:56:12.000Z"}]]},"excerpt":"","headers":[{"level":3,"title":"准备","slug":"准备","children":[]},{"level":3,"title":"发送一个HTTP GET请求（可选：带上参数）","slug":"发送一个http-get请求-可选-带上参数","children":[]},{"level":3,"title":"发送一个HTTP POST请求，并带上参数","slug":"发送一个http-post请求-并带上参数","children":[]},{"level":3,"title":"触发HTTP请求的发送","slug":"触发http请求的发送","children":[]},{"level":3,"title":"session的维护","slug":"session的维护","children":[]},{"level":3,"title":"流的处理","slug":"流的处理","children":[]},{"level":3,"title":"User-Agent","slug":"user-agent","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","children":[]},{"level":3,"title":"上传文件","slug":"上传文件","children":[]},{"level":3,"title":"最后的话","slug":"最后的话","children":[]}],"git":{"createdTime":1647947241000,"updatedTime":1659056172000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":2}]},"readingTime":{"minutes":7.53,"words":2260},"filePathRelative":"java-tutor/stackoverflow/using-java-net-urlconnection-to-fire-and-handle-http-requests.md","localizedDate":"2022年3月22日"}')},69074:(n,a,s)=>{s.r(a),s.d(a,{default:()=>Ba});var t=s(66252);const e=(0,t.uE)('<h1 id="如何使用java-net-urlconnection接收及发送http请求" tabindex="-1"><a class="header-anchor" href="#如何使用java-net-urlconnection接收及发送http请求" aria-hidden="true">#</a> 如何使用java.net.URLConnection接收及发送HTTP请求</h1><p>首先声明，下面的代码，都是基本的例子。更严谨的话，还应加入处理各种异常的代码(如IOExceptions、NullPointerException、ArrayIndexOutOfBoundsException)</p><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备" aria-hidden="true">#</a> 准备</h3><p>首先，需要设置请求的URL以及charset(编码)；额外的参数，则取决于各自url的要求。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://example.com&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> charset <span class="token operator">=</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> param1 <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> param2 <span class="token operator">=</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token class-name">String</span> query <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;param1=%s&amp;param2=%s&quot;</span><span class="token punctuation">,</span> \n     <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">,</span> \n     <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>param2<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),p=(0,t.Uk)("url中附带的请求参数，必须是name=value这样的格式，每个参数间用&连接。一般来说，你还得用 "),o={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLEncoder.html",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("URLEncoder#encode()"),l=(0,t.Uk)("对参数做"),u={href:"http://en.wikipedia.org/wiki/Percent-encoding",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("编码"),r=(0,t._)("p",null,"上面例子还用到了String#format()。字符拼接方式，看个人喜好，我更喜欢用这个方式。",-1),k={id:"发送一个http-get请求-可选-带上参数",tabindex:"-1"},d=(0,t._)("a",{class:"header-anchor",href:"#发送一个http-get请求-可选-带上参数","aria-hidden":"true"},"#",-1),m=(0,t.Uk)(" 发送一个"),v={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3",target:"_blank",rel:"noopener noreferrer"},h=(0,t.Uk)("HTTP GET"),g=(0,t.Uk)("请求（可选：带上参数）"),f=(0,t.uE)('<p>这依然是个繁琐的事情。默认的方式如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">&quot;?&quot;</span> <span class="token operator">+</span> query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Charset&quot;</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">InputStream</span> response <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),b=(0,t.Uk)("url和参数之间，要用？号连接。请求头（header）中的"),U={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2",target:"_blank",rel:"noopener noreferrer"},q=(0,t.Uk)("Accept-Charset"),C=(0,t.Uk)("，用于告诉服务器，你所发送参数的编码。如果你不带送任何参数，也可以不管Accept-Charset。另外如果你无需设置header，也可以用"),_={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URL.html#openStream%28%29",target:"_blank",rel:"noopener noreferrer"},w=(0,t.Uk)("URL#openStream()"),j=(0,t.Uk)(" 而非openConnection。 不管那种方式，假设服务器端是 "),y={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html",target:"_blank",rel:"noopener noreferrer"},R=(0,t.Uk)("HttpServlet"),L=(0,t.Uk)("，那么你的get请求将会触发它的doGet()方法，它能通过"),S={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Uk)("HttpServletRequest#getParameter()"),x=(0,t.Uk)("获取你传递的参数。"),P={id:"发送一个http-post请求-并带上参数",tabindex:"-1"},H=(0,t._)("a",{class:"header-anchor",href:"#发送一个http-post请求-并带上参数","aria-hidden":"true"},"#",-1),F=(0,t.Uk)(" 发送一个"),W={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5",target:"_blank",rel:"noopener noreferrer"},E=(0,t.Uk)("HTTP POST"),O=(0,t.Uk)("请求，并带上参数"),A=(0,t.Uk)("设置"),I={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29",target:"_blank",rel:"noopener noreferrer"},M=(0,t.Uk)("URLConnection#setDoOutput()"),D=(0,t.Uk)("，等于隐式地将请求方法设为POST。标准的HTTP POST 表单，其Content-Tyep为application/x-www-form-urlencoded，请求的内容放到到body中。也就是如下代码："),N=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconnection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Triggers POST.</span>\nconnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Charset&quot;</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded;charset=&quot;</span> <span class="token operator">+</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> output <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">InputStream</span> response <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提醒：</p><p>当你要提交一个HTML表单时，务必要把<code>&lt;input type=&quot;hidden&quot;</code>,<code>&lt;input type=&quot;submit&quot;&gt;</code>这类元素的值，也以name=value的形式提交，因为，服务端通常也需要这个信息，已确认哪一个按钮触发了这个提交动作。</p>',3),z=(0,t.Uk)("也可以使用"),B={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html",target:"_blank",rel:"noopener noreferrer"},G=(0,t.Uk)("HttpURLConnection"),J=(0,t.Uk)(" 来代替"),Z={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html",target:"_blank",rel:"noopener noreferrer"},K=(0,t.Uk)("URLConnection"),V=(0,t.Uk)(" ，然后调用"),Q={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29",target:"_blank",rel:"noopener noreferrer"},X=(0,t.Uk)("HttpURLConnection#setRequestMethod()"),Y=(0,t.Uk)("来将请求设为POST类型。"),$=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">HttpURLConnection</span> httpConnection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhttpConnection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',1),nn=(0,t.Uk)("同样的，如果服务端是"),an={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html",target:"_blank",rel:"noopener noreferrer"},sn=(0,t.Uk)("HttpServlet"),tn=(0,t.Uk)(",将会触发它的"),en={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29",target:"_blank",rel:"noopener noreferrer"},pn=(0,t.Uk)("doPost()"),on=(0,t.Uk)("方法,可以通过"),cn={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29",target:"_blank",rel:"noopener noreferrer"},ln=(0,t.Uk)("HttpServletRequest#getParameter()"),un=(0,t.Uk)("获取post参数"),rn=(0,t._)("h3",{id:"触发http请求的发送",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#触发http请求的发送","aria-hidden":"true"},"#"),(0,t.Uk)(" 触发HTTP请求的发送")],-1),kn=(0,t.Uk)("你可以显式地通过"),dn={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html#connect%28%29",target:"_blank",rel:"noopener noreferrer"},mn=(0,t.Uk)("URLConnection#connect()"),vn=(0,t.Uk)("来发送请求，但是，当你调用获取响应信息的方法时，一样将自动发送请求。例如当你使用"),hn={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html#getInputStream%28%29",target:"_blank",rel:"noopener noreferrer"},gn=(0,t.Uk)("URLConnection#getInputStream()"),fn=(0,t.Uk)("时，就会自动触发请求，因此，connect()方法往往都是多余的。上面我的例子，也都是直接调用getInputStream()方法。"),bn=(0,t._)("p",null,"获取HTTP响应信息",-1),Un=(0,t.Uk)("HTTP响应码： 首先默认你使用了 "),qn={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html",target:"_blank",rel:"noopener noreferrer"},Cn=(0,t.Uk)("HttpURLConnection"),_n=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> status <span class="token operator">=</span> httpConnection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>HTTP 响应头（headers)</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> header <span class="token operator">:</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>HTTP响应编码： 当Content-Type中包含charset参数时，说明响应内容是基于charset参数指定的编码。因此，解码响应信息时，也要按照这个编码格式来。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> contentType <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderField</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> charset <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> param <span class="token operator">:</span> contentType<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;charset=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        charset <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>charset <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token class-name">Buffer</span><span class="token punctuation">.</span><span class="token function">fromedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">;</span> <span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// ... System.out.println(line) ?</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// It&#39;s likely binary content, use InputStream/OutputStream.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="session的维护" tabindex="-1"><a class="header-anchor" href="#session的维护" aria-hidden="true">#</a> session的维护</h3>',6),wn=(0,t.Uk)("服务端session，通常是基于cookie实现的。你可以通过"),jn={href:"http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html",target:"_blank",rel:"noopener noreferrer"},yn=(0,t.Uk)("CookieHandlerAPI"),Rn=(0,t.Uk)("来管理cookie。在发送HTTP请求前，初始化一个"),Ln={href:"http://docs.oracle.com/javase/6/docs/api/java/net/CookieManager.html",target:"_blank",rel:"noopener noreferrer"},Sn=(0,t.Uk)("CookieManager"),Tn=(0,t.Uk)("， 然后设置参数为"),xn={href:"http://docs.oracle.com/javase/6/docs/api/java/net/CookiePolicy.html",target:"_blank",rel:"noopener noreferrer"},Pn=(0,t.Uk)("CookiePolicy"),Hn=(0,t.Uk)("."),Fn={href:"http://docs.oracle.com/javase/6/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL",target:"_blank",rel:"noopener noreferrer"},Wn=(0,t.Uk)("CCEPT_ALL"),En=(0,t.Uk)("。"),On=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// First set the default cookie manager.</span>\n<span class="token class-name">CookieHandler</span><span class="token punctuation">.</span><span class="token function">setDefault</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CookieManager</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">CookiePolicy</span><span class="token punctuation">.</span>ACCEPT_ALL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// All the following subsequent URLConnections will use the same cookie manager.</span>\n<span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\nconnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\nconnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，这个方式并非适用于所有场景。如果使用这个方式失败了，你可以尝试自己设置cookie：你需要从响应头中拿到Set-Cookie参数，然后再把cookie设置到接下来的其他请求中。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Gather all cookies on the first request.</span>\n<span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cookies <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Set-Cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n\n<span class="token comment">// Then use the same cookies on all subsequent requests.</span>\nconnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    connection<span class="token punctuation">.</span><span class="token function">addRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie&quot;</span><span class="token punctuation">,</span> cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的split<a href="0">&quot;;&quot;, 2</a>,作用是去掉一些跟服务端无关的cookie信息（例如expores，path等）。也可用cookie.substring(0, cookie.indexOf(&#39;;&#39;))达到同样的目的</p><h3 id="流的处理" tabindex="-1"><a class="header-anchor" href="#流的处理" aria-hidden="true">#</a> 流的处理</h3>',5),An=(0,t.Uk)('不管你是否通过connection.setRequestProperty("Content-Length", contentLength)方法，为content设置了定长， '),In={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html",target:"_blank",rel:"noopener noreferrer"},Mn=(0,t.Uk)("HttpURLConnection"),Dn=(0,t.Uk)("在发送请求前，默认都会缓存整个请求的body。如果发送一个比较大的post请求（例如上传文件），有可能会导致OutOfMemoryException。为了避免这个问题，可以设置"),Nn={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29",target:"_blank",rel:"noopener noreferrer"},zn=(0,t.Uk)("HttpURLConnection#setFixedLengthStreamingMode()"),Bn=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>httpConnection<span class="token punctuation">.</span><span class="token function">setFixedLengthStreamingMode</span><span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',1),Gn=(0,t.Uk)("但如果content长度是未知的，则可以用"),Jn={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29",target:"_blank",rel:"noopener noreferrer"},Zn=(0,t.Uk)("HttpURLConnection#setChunkedStreamingMode()"),Kn=(0,t.Uk)("。这样，header中Transfer-Encoding会变成chunked，你的请求将会分块发送，例如下面的例子，请求的body，将会按1KB一块，分块发送"),Vn=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>httpConnection<span class="token punctuation">.</span><span class="token function">setChunkedStreamingMode</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="user-agent" tabindex="-1"><a class="header-anchor" href="#user-agent" aria-hidden="true">#</a> User-Agent</h3><p>有时候，你发送的请求，可能只有在浏览器下才能正常返回，而其他方式却不行。这可能跟请求头中的User-Agent有关。通过URLConnection发送的请求，默认会带上的User-Agent信息是Java/1.6.0_19,也就是java+jre的版本。你可以重写这个信息：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Do as if you&#39;re using Firefox 3.6.3.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',4),Qn=(0,t.Uk)("这里有一份更全的浏览器"),Xn={href:"http://www.useragentstring.com/pages/useragentstring.php",target:"_blank",rel:"noopener noreferrer"},Yn=(0,t.Uk)("User-Agent清单"),$n=(0,t.uE)('<h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h3><p>如果HTTP的响应码是4xx(客户端异常）或者5xx(服务端异常），你可以通过HttpURLConnection#getErrorStream()获取信息，服务端可能会将一些有用的错误信息放到这里面。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">InputStream</span> error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> connection<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="上传文件" tabindex="-1"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> 上传文件</h3>',4),na=(0,t.Uk)("一般来说，你需要将post的内容设为"),aa={href:"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2",target:"_blank",rel:"noopener noreferrer"},sa=(0,t.Uk)("multipart/form-data"),ta=(0,t.Uk)("(相关的RFC文档："),ea={href:"http://www.faqs.org/rfcs/rfc2388.html",target:"_blank",rel:"noopener noreferrer"},pa=(0,t.Uk)("RFC2388"),oa=(0,t.Uk)(")"),ca=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> param <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">File</span> textFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">File</span> binaryFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/file.bin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> boundary <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Just generate some unique random value.</span>\n<span class="token class-name">String</span> CRLF <span class="token operator">=</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Line separator required by multipart/form-data.</span>\n<span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconnection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;multipart/form-data; boundary=&quot;</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">(</span>\n    <span class="token class-name">OutputStream</span> output <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Send normal param.</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition: form-data; name=\\&quot;param\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type: text/plain; charset=&quot;</span> <span class="token operator">+</span> charset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Send text file.</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition: form-data; name=\\&quot;textFile\\&quot;; filename=\\&quot;&quot;</span> <span class="token operator">+</span> textFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type: text/plain; charset=&quot;</span> <span class="token operator">+</span> charset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Text file itself must be saved in this charset!</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>textFile<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    output<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Important before continuing with writer!</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CRLF is important! It indicates end of boundary.</span>\n\n    <span class="token comment">// Send binary file.</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition: form-data; name=\\&quot;binaryFile\\&quot;; filename=\\&quot;&quot;</span> <span class="token operator">+</span> binaryFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type: &quot;</span> <span class="token operator">+</span> <span class="token class-name">URLConnection</span><span class="token punctuation">.</span><span class="token function">guessContentTypeFromName</span><span class="token punctuation">(</span>binaryFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Transfer-Encoding: binary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>binaryFile<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    output<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Important before continuing with writer!</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CRLF is important! It indicates end of boundary.</span>\n\n    <span class="token comment">// End of multipart/form-data.</span>\n    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span> <span class="token operator">+</span> boundary <span class="token operator">+</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),la=(0,t.Uk)("假设服务端还是一个"),ua={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html",target:"_blank",rel:"noopener noreferrer"},ia=(0,t.Uk)("HttpServlet"),ra=(0,t.Uk)(",它的doPost()方法将会处理这个请求，服务端通过"),ka={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29",target:"_blank",rel:"noopener noreferrer"},da=(0,t.Uk)("HttpServletRequest#getPart()"),ma=(0,t.Uk)("获取你发送的内容（注意了，不是getParameter()）。getPart()是个比较新的方法，是在Servlet 3.0后才引入的。如果你是Servlet 3.0之前的版本，则可以选用[Apache Commons FileUpload]("),va={href:"http://commons.apache.org/fileupload",target:"_blank",rel:"noopener noreferrer"},ha=(0,t.Uk)("http://commons.apache.org/fileupload"),ga=(0,t.Uk)("]来解析multipart/form-data的请求。可以参考这里的"),fa={href:"http://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824",target:"_blank",rel:"noopener noreferrer"},ba=(0,t.Uk)("例子"),Ua=(0,t._)("h3",{id:"最后的话",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#最后的话","aria-hidden":"true"},"#"),(0,t.Uk)(" 最后的话")],-1),qa=(0,t.Uk)("上面啰嗦了很多，Apache提供了工具包，帮助我们更方便地完成这些事情 "),Ca={href:"http://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824",target:"_blank",rel:"noopener noreferrer"},_a=(0,t.Uk)("Apache HttpComponents HttpClient"),wa=(0,t.Uk)("："),ja={href:"http://hc.apache.org/httpcomponents-client-ga/tutorial/html/",target:"_blank",rel:"noopener noreferrer"},ya=(0,t.Uk)("HttpClient Tutorial"),Ra={href:"http://hc.apache.org/httpcomponents-client-ga/examples.html",target:"_blank",rel:"noopener noreferrer"},La=(0,t.Uk)("HttpClient Examples"),Sa=(0,t.Uk)("google也有类似的"),Ta={href:"https://code.google.com/p/google-http-java-client/",target:"_blank",rel:"noopener noreferrer"},xa=(0,t.Uk)("工具包"),Pa=(0,t.Uk)("解析、提取HTML内容 如果你是想解析提取html的内容，你可以用"),Ha={href:"http://jsoup.org/",target:"_blank",rel:"noopener noreferrer"},Fa=(0,t.Uk)("Jsoup"),Wa=(0,t.Uk)("等解析器"),Ea={href:"http://stackoverflow.com/questions/3152138/what-are-the-pros-and-cons-of-the-leading-java-html-parsers/3154281#3154281",target:"_blank",rel:"noopener noreferrer"},Oa=(0,t.Uk)("一些比较有名的HTML解析器的优缺点"),Aa={href:"http://stackoverflow.com/questions/2835505/how-to-scan-a-website-or-page-for-info-and-bring-it-into-my-program/2835555#2835555",target:"_blank",rel:"noopener noreferrer"},Ia=(0,t.Uk)("用java如何扫描和解析网页"),Ma=(0,t.Uk)("stackoverflow原址： "),Da={href:"http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests",target:"_blank",rel:"noopener noreferrer"},Na=(0,t.Uk)("http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests"),za={},Ba=(0,s(83744).Z)(za,[["render",function(n,a){const s=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[e,(0,t._)("p",null,[p,(0,t._)("a",o,[c,(0,t.Wm)(s)]),l,(0,t._)("a",u,[i,(0,t.Wm)(s)])]),r,(0,t._)("h3",k,[d,m,(0,t._)("a",v,[h,(0,t.Wm)(s)]),g]),f,(0,t._)("p",null,[b,(0,t._)("a",U,[q,(0,t.Wm)(s)]),C,(0,t._)("a",_,[w,(0,t.Wm)(s)]),j,(0,t._)("a",y,[R,(0,t.Wm)(s)]),L,(0,t._)("a",S,[T,(0,t.Wm)(s)]),x]),(0,t._)("h3",P,[H,F,(0,t._)("a",W,[E,(0,t.Wm)(s)]),O]),(0,t._)("p",null,[A,(0,t._)("a",I,[M,(0,t.Wm)(s)]),D]),N,(0,t._)("p",null,[z,(0,t._)("a",B,[G,(0,t.Wm)(s)]),J,(0,t._)("a",Z,[K,(0,t.Wm)(s)]),V,(0,t._)("a",Q,[X,(0,t.Wm)(s)]),Y]),$,(0,t._)("p",null,[nn,(0,t._)("a",an,[sn,(0,t.Wm)(s)]),tn,(0,t._)("a",en,[pn,(0,t.Wm)(s)]),on,(0,t._)("a",cn,[ln,(0,t.Wm)(s)]),un]),rn,(0,t._)("p",null,[kn,(0,t._)("a",dn,[mn,(0,t.Wm)(s)]),vn,(0,t._)("a",hn,[gn,(0,t.Wm)(s)]),fn]),bn,(0,t._)("ol",null,[(0,t._)("li",null,[Un,(0,t._)("a",qn,[Cn,(0,t.Wm)(s)])])]),_n,(0,t._)("p",null,[wn,(0,t._)("a",jn,[yn,(0,t.Wm)(s)]),Rn,(0,t._)("a",Ln,[Sn,(0,t.Wm)(s)]),Tn,(0,t._)("a",xn,[Pn,(0,t.Wm)(s)]),Hn,(0,t._)("a",Fn,[Wn,(0,t.Wm)(s)]),En]),On,(0,t._)("p",null,[An,(0,t._)("a",In,[Mn,(0,t.Wm)(s)]),Dn,(0,t._)("a",Nn,[zn,(0,t.Wm)(s)])]),Bn,(0,t._)("p",null,[Gn,(0,t._)("a",Jn,[Zn,(0,t.Wm)(s)]),Kn]),Vn,(0,t._)("p",null,[Qn,(0,t._)("a",Xn,[Yn,(0,t.Wm)(s)])]),$n,(0,t._)("p",null,[na,(0,t._)("a",aa,[sa,(0,t.Wm)(s)]),ta,(0,t._)("a",ea,[pa,(0,t.Wm)(s)]),oa]),ca,(0,t._)("p",null,[la,(0,t._)("a",ua,[ia,(0,t.Wm)(s)]),ra,(0,t._)("a",ka,[da,(0,t.Wm)(s)]),ma,(0,t._)("a",va,[ha,(0,t.Wm)(s)]),ga,(0,t._)("a",fa,[ba,(0,t.Wm)(s)])]),Ua,(0,t._)("p",null,[qa,(0,t._)("a",Ca,[_a,(0,t.Wm)(s)]),wa]),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",ja,[ya,(0,t.Wm)(s)])]),(0,t._)("li",null,[(0,t._)("a",Ra,[La,(0,t.Wm)(s)])])]),(0,t._)("p",null,[Sa,(0,t._)("a",Ta,[xa,(0,t.Wm)(s)])]),(0,t._)("p",null,[Pa,(0,t._)("a",Ha,[Fa,(0,t.Wm)(s)]),Wa]),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",Ea,[Oa,(0,t.Wm)(s)])]),(0,t._)("li",null,[(0,t._)("a",Aa,[Ia,(0,t.Wm)(s)])])]),(0,t._)("p",null,[Ma,(0,t._)("a",Da,[Na,(0,t.Wm)(s)])])])}]])}}]);