"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[93059],{97618:(e,n,i)=>{i.r(n),i.d(n,{data:()=>l});const l=JSON.parse('{"key":"v-0fe153f6","path":"/linux-tutor/server/Jenkins-Install-And-Settings.html","title":"Jenkins 安装和配置","lang":"zh-CN","frontmatter":{"summary":"Jenkins 安装和配置 Jenkins 介绍 官网：; 官网插件库：; 官网下载：; 官网帮助中心：; Docker 下安装 Jenkins 配置：至少需要 2G 内存; 先禁用 selinux; 编辑配置文件：vim /etc/selinux/config; 把 SELINUX=enforcing 改为 SELINUX=disabled; 重启服务器;","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/linux-tutor/server/Jenkins-Install-And-Settings.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"Jenkins 安装和配置"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-27T01:37:35.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-27T01:37:35.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"Jenkins 介绍","slug":"jenkins-介绍","children":[]},{"level":2,"title":"Docker 下安装 Jenkins","slug":"docker-下安装-jenkins","children":[]},{"level":2,"title":"首次使用 Jenkins / Jenkins 插件推荐","slug":"首次使用-jenkins-jenkins-插件推荐","children":[]},{"level":2,"title":"Docker 的 Jenkins 与 Docker 结合使用","slug":"docker-的-jenkins-与-docker-结合使用","children":[]},{"level":2,"title":"Jenkins 安装（YUM）","slug":"jenkins-安装-yum","children":[]},{"level":2,"title":"忘记 admin 密码进行重置","slug":"忘记-admin-密码进行重置","children":[]},{"level":2,"title":"pipeline 语法","slug":"pipeline-语法","children":[]},{"level":2,"title":"Jenkins 前端 React 项目构建","slug":"jenkins-前端-react-项目构建","children":[]},{"level":2,"title":"Jenkins 后端 Spring Boot 项目构建","slug":"jenkins-后端-spring-boot-项目构建","children":[]},{"level":2,"title":"多节点 master 与 slave","slug":"多节点-master-与-slave","children":[]},{"level":2,"title":"资料","slug":"资料","children":[]}],"git":{"createdTime":1653615455000,"updatedTime":1653615455000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":12.94,"words":3881},"filePathRelative":"linux-tutor/server/Jenkins-Install-And-Settings.md","localizedDate":"2022年5月27日"}')},50378:(e,n,i)=>{i.r(n),i.d(n,{default:()=>Jn});var l=i(66252);const s=(0,l._)("h1",{id:"jenkins-安装和配置",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#jenkins-安装和配置","aria-hidden":"true"},"#"),(0,l.Uk)(" Jenkins 安装和配置")],-1),d=(0,l._)("h2",{id:"jenkins-介绍",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#jenkins-介绍","aria-hidden":"true"},"#"),(0,l.Uk)(" Jenkins 介绍")],-1),r=(0,l.Uk)("官网："),a={href:"http://jenkins-ci.org/",target:"_blank",rel:"noopener noreferrer"},t=(0,l.Uk)("http://jenkins-ci.org/"),u=(0,l.Uk)("官网插件库："),v={href:"https://plugins.jenkins.io/",target:"_blank",rel:"noopener noreferrer"},o=(0,l.Uk)("https://plugins.jenkins.io/"),c=(0,l.Uk)("官网下载："),m={href:"https://jenkins.io/download/",target:"_blank",rel:"noopener noreferrer"},b=(0,l.Uk)("https://jenkins.io/download/"),h=(0,l.Uk)("官网帮助中心："),p={href:"https://wiki.jenkins-ci.org/display/JENKINS/Use+Jenkins",target:"_blank",rel:"noopener noreferrer"},g=(0,l.Uk)("https://wiki.jenkins-ci.org/display/JENKINS/Use+Jenkins"),k=(0,l._)("h2",{id:"docker-下安装-jenkins",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#docker-下安装-jenkins","aria-hidden":"true"},"#"),(0,l.Uk)(" Docker 下安装 Jenkins")],-1),q=(0,l._)("li",null,"配置：至少需要 2G 内存",-1),_=(0,l._)("li",null,[(0,l.Uk)("先禁用 selinux "),(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Uk)("编辑配置文件："),(0,l._)("code",null,"vim /etc/selinux/config")]),(0,l._)("li",null,[(0,l.Uk)("把 "),(0,l._)("code",null,"SELINUX=enforcing"),(0,l.Uk)(" 改为 "),(0,l._)("code",null,"SELINUX=disabled")]),(0,l._)("li",null,"重启服务器")])],-1),j=(0,l.Uk)("官网下载中有介绍其版本标识："),U={href:"https://jenkins.io/download/",target:"_blank",rel:"noopener noreferrer"},$=(0,l.Uk)("https://jenkins.io/download/"),N=(0,l._)("ul",null,[(0,l._)("li",null,"我们就选用：Long-term Support (LTS)")],-1),P=(0,l.Uk)("官网关于 Docker 部署也有专门文档："),f={href:"https://github.com/jenkinsci/docker/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"},x=(0,l.Uk)("https://github.com/jenkinsci/docker/blob/master/README.md"),E=(0,l.uE)("<li>先创建一个宿主机以后用来存放数据的目录：<code>mkdir -p /data/jenkins/jenkins_home &amp;&amp; chmod 777 -R /data/jenkins/jenkins_home</code></li><li>安装镜像（813MB，有点大）：<code>docker pull jenkins/jenkins:lts</code></li><li>查看下载下来的镜像：<code>docker images</code></li><li>首次运行镜像：<code>docker run --name jenkins-master -p 8123:18080 -p 50000:50000 -v /etc/localtime:/etc/localtime -v /data/jenkins/jenkins_home:/var/jenkins_home -e JAVA_OPTS=&quot;-Duser.timezone=Asia/Shanghai&quot; -d --restart always jenkins/jenkins:lts</code><ul><li>这里的 8080 端口是 jenkins 运行程序的端口，必须要有映射的。50000 端口是非必须映射的，但是如果你要用 Jenkins 分布式构建这个就必须开放</li></ul></li><li>如果报下面的错误：</li>",5),B=(0,l.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>touch: cannot touch &#39;/var/jenkins_home/copy_reference_file.log&#39;: Permission denied\nCan not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',1),D=(0,l.Uk)("解决办法："),S=(0,l._)("code",null,"chown -R 1000:1000 /data/jenkins/jenkins_home",-1),J=(0,l.Uk)("，具体原因："),A={href:"http://www.cnblogs.com/jackluo/p/5783116.html",target:"_blank",rel:"noopener noreferrer"},I=(0,l.Uk)("点击查看"),w=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Uk)("问题的本质就是，jenkins 镜像中的系统用户是：jenkins，当你进入容器 bash 内，输入："),(0,l._)("code",null,"whoami && id"),(0,l.Uk)("，你就可以看到他的 uid 是 1000，所以这里才 chown 1000")])],-1),M=(0,l._)("li",null,[(0,l.Uk)("查看容器运行情况："),(0,l._)("code",null,"docker ps")],-1),R=(0,l._)("li",null,[(0,l.Uk)("进入容器中 Jenkins shell 交互界面："),(0,l._)("code",null,"docker exec -it bd290d5eb0d /bin/bash")],-1),y=(0,l._)("h2",{id:"首次使用-jenkins-jenkins-插件推荐",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#首次使用-jenkins-jenkins-插件推荐","aria-hidden":"true"},"#"),(0,l.Uk)(" 首次使用 Jenkins / Jenkins 插件推荐")],-1),C=(0,l.Uk)("我这里就不截图了，有需要截图可以看这博文，差不多就是这样的："),L={href:"https://blog.csdn.net/boling_cavalry/article/details/78942408",target:"_blank",rel:"noopener noreferrer"},O=(0,l.Uk)("点击我o(∩_∩)o "),W=(0,l.uE)("<li>首次进入 Jenkins 的 Web UI 界面是一个解锁页面 Unlock Jenkins，需要让你输入：Administrator password <ul><li>这个密码放在：<code>/var/jenkins_home/secrets/initialAdminPassword</code>，你需要先：<code>docker exec -it ci_jenkins_1 /bin/bash</code><ul><li>然后：<code>cat /data/jenkins/jenkins_home/secrets/initialAdminPassword</code></li><li>也有可能是这个目录：<code>cat /var/jenkins_home/secrets/initialAdminPassword</code></li></ul></li></ul></li><li>然后再接下来就是插件的安装，我推荐直接用它推荐给我们的插件直接安装，稍后再安装自己需要定制的。</li><li>插件安装完会进入：Create First Admin User 页面，填写一个用户信息即可。</li><li>我的这里的代码仓库是：Gitlab</li>",4),T=(0,l.Uk)("推荐插件 "),H=(0,l.uE)("<li>Publish Over SSH（具体名字要看下）</li><li>Dashbroad View</li><li>Folders View</li><li>OWASP Markup Formatter Plugin</li><li>Build Name Setter Plugin</li><li>build timeout plugin</li><li>Credentials Binding Plugin</li><li>Embeddable Build Status Plugin</li><li>Pipeline</li><li>Build Pipeline Plugin</li><li>Docker Pipeline Plugin</li><li>Git plugin</li><li>GitLab Plugin</li><li>SSH Slaves plugin</li><li>Maven Integration plugin</li><li>Matrix Authorization Strategy Plugin</li><li>PAM Authentication plugin</li><li>LDAP Plugin</li><li>Role-based Authorization Strategy</li><li>Email Extension Plugin</li><li>Email Extension Template Plugin</li><li>Mailer Plugin</li>",22),K=(0,l.Uk)("NotifyQQ（"),G={href:"https://github.com/ameizi/NotifyQQ",target:"_blank",rel:"noopener noreferrer"},z=(0,l.Uk)("QQ 消息通知"),F=(0,l.Uk)("）"),V=(0,l.Uk)("钉钉通知（"),X={href:"https://wiki.jenkins.io/display/JENKINS/Dingding+Notification+Plugin",target:"_blank",rel:"noopener noreferrer"},Q=(0,l.Uk)("钉钉 消息通知"),Y=(0,l.Uk)("）"),Z=(0,l.uE)("<li>360 FireLine：代码规范检查，已经集成了阿里巴巴的代码规约（P3C）检查</li><li>AnsiColor（可选）：这个插件可以让Jenkins的控制台输出的log带有颜色</li><li>oauth（具体名字要看下）</li><li>Build Failure Analyzer 分析构建错误日志并在构建页面显示错误</li><li>SSH plugin 支持通过SSH执行脚本</li><li>Pre SCM BuildStep Plugin 在拉代码之前插入一些步骤</li><li>GitHub API Plugin Github API插件</li><li>GitHub Pull Request Builder Github Pull Request时自动构建</li><li>GitHub plugin Github与Jenkins集成</li><li>GIT client plugin Git客户端插件</li><li>Maven Integration plugin：用于构建 Maven 项目</li><li>Gradle Plugin：用于构建 Gradle 项目</li><li>Gitlab Plugin：可能会直接安装不成功，如果不成功根据报错的详细信息可以看到 hpi 文件的下载地址，挂代理下载下来，然后离线安装即可</li><li>Gitlab Hook：用于触发 GitLab 的一些 WebHooks 来构建项目</li><li>Gitlab Authentication 这个插件提供了使用GitLab进行用户认证和授权的方案</li><li>Docker Commons Plugin</li><li>Docker plugin</li><li>Kubernetes</li><li>Pre SCM BuildStep Plugin 在拉代码之前插入一些步骤</li><li>GitHub Pull Request Builder Github Pull Request时自动构建</li><li>GitHub API Plugin Github API插件</li><li>NodeJS Plugin</li>",22),ee=(0,l.uE)('<h2 id="docker-的-jenkins-与-docker-结合使用" tabindex="-1"><a class="header-anchor" href="#docker-的-jenkins-与-docker-结合使用" aria-hidden="true">#</a> Docker 的 Jenkins 与 Docker 结合使用</h2><ul><li>运行镜像命令：<code>docker run --name jenkins-master -p 8123:18080 -p 50000:50000 -v /etc/localtime:/etc/localtime -v /data/jenkins/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -e JAVA_OPTS=&quot;-Duser.timezone=Asia/Shanghai&quot; -d --restart always jenkins/jenkins:lts</code><ul><li>比上面多了一步：<code>-v /var/run/docker.sock:/var/run/docker.sock</code></li></ul></li><li>这样，在 jenkins 里面写 shell 脚本调用 docker 程序，就可以直接调用宿主机的 docker 了。</li></ul><hr><h2 id="jenkins-安装-yum" tabindex="-1"><a class="header-anchor" href="#jenkins-安装-yum" aria-hidden="true">#</a> Jenkins 安装（YUM）</h2>',4),ne=(0,l._)("li",null,[(0,l._)("strong",null,"需要 JDK8 环境")],-1),ie=(0,l._)("li",null,[(0,l.Uk)("当前最新版本："),(0,l._)("code",null,"2.138.1-1.1"),(0,l.Uk)("（201810）")],-1),le=(0,l.Uk)("官网安装说明 RedHat Linux RPM packages："),se={href:"https://pkg.jenkins.io/redhat-stable/",target:"_blank",rel:"noopener noreferrer"},de=(0,l.Uk)("https://pkg.jenkins.io/redhat-stable/"),re=(0,l._)("li",null,"官网在线安装（72M），该安装方式会自己生成一个 jenkins 用户组和用户：",-1),ae=(0,l.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n\nsudo yum install -y jenkins\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看安装后的情况：<code>rpm -ql jenkins</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/etc/init.d/jenkins\n/etc/logrotate.d/jenkins\n/etc/sysconfig/jenkins\n/usr/lib/jenkins\n/usr/lib/jenkins/jenkins.war\n/usr/sbin/rcjenkins\n/var/cache/jenkins\n/var/lib/jenkins\n/var/log/jenkins\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>jenkins 相关目录释义：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/usr/lib/jenkins/：jenkins安装目录，war 包会放在这里。\n/etc/sysconfig/jenkins：jenkins配置文件，“端口”，“JENKINS_HOME” 等都可以在这里配置。\n/var/lib/jenkins/：默认的 JENKINS_HOME。\n/var/log/jenkins/jenkins.log：jenkins 日志文件。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>控制台输出方式启动：<code>java -jar /usr/lib/jenkins/jenkins.war --httpPort=18080</code></li><li>内置 Jetty，默认是 18080 端口，你也可以改为其他（建议修改为其他）</li><li>可以看到有一个这个重点内容，这是你的初始化密码，等下会用到的：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Jenkins initial setup is required. An admin user has been created and a password generated.\nPlease use the following password to proceed to installation:\n\ndaacc724767640a29ddc99d159a80cf8\n\nThis may also be found at: /root/.jenkins/secrets/initialAdminPassword\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7),te=(0,l._)("li",null,[(0,l.Uk)("守护进程启动："),(0,l._)("code",null,"nohup java -jar /usr/lib/jenkins/jenkins.war --httpPort=18080 > /dev/null 2>&1 &")],-1),ue=(0,l.Uk)("浏览器访问 Jenkins 首页开始配置："),ve={href:"http://192.168.0.105:18080/",target:"_blank",rel:"noopener noreferrer"},oe=(0,l.Uk)("http://192.168.0.105:18080/"),ce=(0,l.Uk)("特殊情况： "),me=(0,l._)("li",null,[(0,l.Uk)("如果配置插件过程遇到这个错误："),(0,l._)("code",null,"No valid crumb was included in the request"),(0,l.Uk)("，则多重试几次。")],-1),be=(0,l.Uk)("登录后把："),he={href:"http://192.168.0.105:18080/configureSecurity/",target:"_blank",rel:"noopener noreferrer"},pe=(0,l.Uk)("http://192.168.0.105:18080/configureSecurity/"),ge=(0,l.Uk)(" 下面的 "),ke=(0,l._)("code",null,"防止跨站点请求伪造",-1),qe=(0,l.Uk)(" 勾选去掉。遇到问题多试几次。"),_e=(0,l.uE)('<h2 id="忘记-admin-密码进行重置" tabindex="-1"><a class="header-anchor" href="#忘记-admin-密码进行重置" aria-hidden="true">#</a> 忘记 admin 密码进行重置</h2><ul><li>备份配置文件：<code>cp /root/.jenkins/config.xml /root/.jenkins/config.xml.back</code></li><li>编辑：<code>vim /root/.jenkins/config.xml</code>，删除 config.xml 文件中的这部分内容，在 10 行左右位置</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;useSecurity&gt;true&lt;/useSecurity&gt;\n&lt;authorizationStrategy class=&quot;hudson.security.FullControlOnceLoggedInAuthorizationStrategy&quot;&gt;\n  &lt;denyAnonymousReadAccess&gt;true&lt;/denyAnonymousReadAccess&gt;\n&lt;/authorizationStrategy&gt;\n&lt;securityRealm class=&quot;hudson.security.HudsonPrivateSecurityRealm&quot;&gt;\n  &lt;disableSignup&gt;true&lt;/disableSignup&gt;\n  &lt;enableCaptcha&gt;false&lt;/enableCaptcha&gt;\n&lt;/securityRealm&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重启服务，进入首页此时系统是免密状态</li><li>选择左侧的 <code>系统管理</code>，系统会提示你需要配置安全设置：<code>全局安全配置</code><ul><li>勾选 <code>启用安全</code></li><li>安全域 &gt; 勾选 <code>Jenkins专有用户数据库</code></li><li>点击保存</li></ul></li><li>重新点击首页：<code>系统管理</code><ul><li>点击 <code>管理用户</code></li><li>在用户列表中点击 admin 右侧齿轮</li><li>修改密码，修改后即可重新登录。</li></ul></li><li>选择左侧的 <code>系统管理</code>，系统会提示你需要配置安全设置：<code>全局安全配置</code><ul><li>勾选 <code>启用安全</code></li><li>授权策略 &gt; 勾选 <code>登录用户可以做任何事</code> 或 <code>安全矩阵</code></li><li>点击保存</li></ul></li></ul><hr><h2 id="pipeline-语法" tabindex="-1"><a class="header-anchor" href="#pipeline-语法" aria-hidden="true">#</a> pipeline 语法</h2>',6),je=(0,l.Uk)("全局 pipeline 语法说明："),Ue={href:"http://192.168.0.105:18080/job/react/pipeline-syntax/globals",target:"_blank",rel:"noopener noreferrer"},$e=(0,l.Uk)("http://192.168.0.105:18080/job/react/pipeline-syntax/globals"),Ne=(0,l.Uk)("其他资料 "),Pe={href:"http://www.cnblogs.com/fengjian2016/p/8227532.html",target:"_blank",rel:"noopener noreferrer"},fe=(0,l.Uk)("http://www.cnblogs.com/fengjian2016/p/8227532.html"),xe={href:"https://github.com/nbbull/jenkins2Book",target:"_blank",rel:"noopener noreferrer"},Ee=(0,l.Uk)("https://github.com/nbbull/jenkins2Book"),Be={href:"https://github.com/mcpaint/learning-jenkins-pipeline",target:"_blank",rel:"noopener noreferrer"},De=(0,l.Uk)("https://github.com/mcpaint/learning-jenkins-pipeline"),Se={href:"https://www.cnblogs.com/fengjian2016/p/8227532.html",target:"_blank",rel:"noopener noreferrer"},Je=(0,l.Uk)("https://www.cnblogs.com/fengjian2016/p/8227532.html"),Ae={href:"https://blog.csdn.net/diantun00/article/details/81075007",target:"_blank",rel:"noopener noreferrer"},Ie=(0,l.Uk)("https://blog.csdn.net/diantun00/article/details/81075007"),we=(0,l.uE)('<h4 id="内置的参数" tabindex="-1"><a class="header-anchor" href="#内置的参数" aria-hidden="true">#</a> 内置的参数</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>BUILD_NUMBER = ${env.BUILD_NUMBER}&quot;\nBUILD_ID = ${env.BUILD_ID}&quot;\nBUILD_DISPLAY_NAME = ${env.BUILD_DISPLAY_NAME}&quot;\nJOB_NAME = ${env.JOB_NAME}&quot;\nJOB_BASE_NAME = ${env.JOB_BASE_NAME}&quot;\nWORKSPACE = ${env.WORKSPACE}&quot;\nJENKINS_HOME = ${env.JENKINS_HOME}&quot;\nJENKINS_URL = ${env.JENKINS_URL}&quot;\nBUILD_URL = ${env.BUILD_URL}&quot;\nJOB_URL = ${env.JOB_URL}&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出结果：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>BUILD_NUMBER = 21\nBUILD_ID = 21\nBUILD_DISPLAY_NAME = #21\nJOB_NAME = react\nJOB_BASE_NAME = react\nWORKSPACE = /root/.jenkins/workspace/react\nJENKINS_HOME = /root/.jenkins\nJENKINS_URL = http://192.168.0.105:18080/\nBUILD_URL = http://192.168.0.105:18080/job/react/21/\nJOB_URL = http://192.168.0.105:18080/job/react/\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构建时指定参数" tabindex="-1"><a class="header-anchor" href="#构建时指定参数" aria-hidden="true">#</a> 构建时指定参数</h4><ul><li>如果要构建的时候明确输入参数值，可以用 <code>parameters</code>：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pipeline {\n  agent any\n\n  parameters {\n    string(name: &#39;assignVersionValue&#39;, defaultValue: &#39;1.1.3&#39;, description: &#39;构建之前请先指定版本号&#39;)\n  }\n  \n  tools {\n    jdk &#39;JDK8&#39;\n    maven &#39;MAVEN3&#39;\n  }\n\n  options {\n    timestamps()\n    disableConcurrentBuilds()\n    buildDiscarder(logRotator(\n      numToKeepStr: &#39;20&#39;,\n      daysToKeepStr: &#39;30&#39;,\n    ))\n  }\n\n\n  environment {\n    gitUrl = &quot;https://gitee.com/youmeek/springboot-jenkins-demo.git&quot;\n    branchName = &quot;master&quot;\n    giteeCredentialsId = &quot;Gitee&quot;\n    projectWorkSpacePath = &quot;${env.WORKSPACE}&quot;\n  }\n  \n  \n  stages {\n    \n    stage(&#39;Check Env&#39;) {\n    \n      /*当指定的参数版本号等于空字符的时候进入 steps。这里的 when 对 当前 stage 有效，对其他 stage 无效*/\n      when {\n        environment name: &#39;assignVersionValue&#39;, value: &#39;&#39;\n      }\n    \n      /*结束整个任务。如果不想结束整个任务，就不要用：exit 1*/\n      steps {\n        sh &quot;exit 1&quot;\n      }\n    }\n    \n    stage(&#39;Pre Env&#39;) {\n    \n      steps {\n        echo &quot;======================================项目名称 = ${env.JOB_NAME}&quot;\n        echo &quot;======================================项目 URL = ${gitUrl}&quot;\n        echo &quot;======================================项目分支 = ${branchName}&quot;\n        echo &quot;======================================当前编译版本号 = ${env.BUILD_NUMBER}&quot;\n        echo &quot;======================================项目空间文件夹路径 = ${projectWorkSpacePath}&quot;\n        echo &quot;======================================构建时自己指定的版本号值 = ${params.assignVersionValue}&quot;\n      }\n    }\n        \n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定时构建" tabindex="-1"><a class="header-anchor" href="#定时构建" aria-hidden="true">#</a> 定时构建</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pipeline {\n  agent any\n  \n  /*采用 linux cron 语法即可*/\n  triggers {\n    cron(&#39;*/1 * * * *&#39;)\n  }\n  \n  tools {\n    jdk &#39;JDK8&#39;\n    maven &#39;MAVEN3&#39;\n  }\n\n  options {\n    timestamps()\n    disableConcurrentBuilds()\n    buildDiscarder(logRotator(\n      numToKeepStr: &#39;20&#39;,\n      daysToKeepStr: &#39;30&#39;,\n    ))\n  }\n\n\n  environment {\n    gitUrl = &quot;https://gitee.com/youmeek/springboot-jenkins-demo.git&quot;\n    branchName = &quot;master&quot;\n    giteeCredentialsId = &quot;Gitee&quot;\n    projectWorkSpacePath = &quot;${env.WORKSPACE}&quot;\n  }\n  \n  \n  stages {\n    \n    stage(&#39;Pre Env&#39;) {\n      steps {\n         echo &quot;======================================项目名称 = ${env.JOB_NAME}&quot;\n         echo &quot;======================================项目 URL = ${gitUrl}&quot;\n         echo &quot;======================================项目分支 = ${branchName}&quot;\n         echo &quot;======================================当前编译版本号 = ${env.BUILD_NUMBER}&quot;\n         echo &quot;======================================项目空间文件夹路径 = ${projectWorkSpacePath}&quot;\n      }\n    }\n    \n  }\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="同时构建其他-job" tabindex="-1"><a class="header-anchor" href="#同时构建其他-job" aria-hidden="true">#</a> 同时构建其他 Job</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>stage(&#39;运行其他任务&#39;) {\n  steps {\n      build job: &#39;任务名称&#39;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="jenkins-前端-react-项目构建" tabindex="-1"><a class="header-anchor" href="#jenkins-前端-react-项目构建" aria-hidden="true">#</a> Jenkins 前端 React 项目构建</h2>',13),Me=(0,l._)("strong",null,"确保",-1),Re=(0,l.Uk)("：安装了 "),ye=(0,l.Uk)("Node.js"),Ce=(0,l.uE)('<h4 id="简单的-pipeline-写法-开源项目" tabindex="-1"><a class="header-anchor" href="#简单的-pipeline-写法-开源项目" aria-hidden="true">#</a> 简单的 pipeline 写法（开源项目）</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pipeline {\n  agent any\n\n  options {\n    timestamps()\n    disableConcurrentBuilds()\n    buildDiscarder(logRotator(\n      numToKeepStr: &#39;20&#39;,\n      daysToKeepStr: &#39;30&#39;,\n    ))\n  }\n\n  /*=======================================常修改变量-start=======================================*/\n\n  environment {\n    gitUrl = &quot;https://github.com/satan31415/heh_umi_template.git&quot;\n    branchName = &quot;master&quot;\n    projectBuildPath = &quot;${env.WORKSPACE}/dist&quot;\n    nginxHtmlRoot = &quot;/usr/share/nginx/react&quot;\n  }\n  \n  /*=======================================常修改变量-end=======================================*/\n  \n  stages {\n    \n    stage(&#39;Pre Env&#39;) {\n      steps {\n         echo &quot;======================================项目名称 = ${env.JOB_NAME}&quot;\n         echo &quot;======================================项目 URL = ${gitUrl}&quot;\n         echo &quot;======================================项目分支 = ${branchName}&quot;\n         echo &quot;======================================当前编译版本号 = ${env.BUILD_NUMBER}&quot;\n         echo &quot;======================================项目 Build 文件夹路径 = ${projectBuildPath}&quot;\n         echo &quot;======================================项目 Nginx 的 ROOT 路径 = ${nginxHtmlRoot}&quot;\n      }\n    }\n    \n    stage(&#39;Git Clone&#39;){\n      steps {\n          git branch: &quot;${branchName}&quot;, url: &quot;${gitUrl}&quot;\n      }\n    }\n\n    stage(&#39;NPM Install&#39;) {\n      steps {\n        sh &quot;npm install&quot;\n      }\n    }\n\n    stage(&#39;NPM Build&#39;) {\n      steps {\n        sh &quot;npm run build&quot;\n      }\n    }\n\n    stage(&#39;Nginx Deploy&#39;) {\n      steps {\n        sh &quot;rm -rf ${nginxHtmlRoot}/&quot;\n        sh &quot;cp -r ${projectBuildPath}/ ${nginxHtmlRoot}/&quot;\n      }\n    }\n\n\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="简单的-pipeline-写法-闭源项目-码云为例" tabindex="-1"><a class="header-anchor" href="#简单的-pipeline-写法-闭源项目-码云为例" aria-hidden="true">#</a> 简单的 pipeline 写法（闭源项目 -- 码云为例）</h4>',3),Le=(0,l.Uk)("新增一个全局凭据："),Oe={href:"http://192.168.0.105:18080/credentials/store/system/domain/_/newCredentials",target:"_blank",rel:"noopener noreferrer"},We=(0,l.Uk)("http://192.168.0.105:18080/credentials/store/system/domain/_/newCredentials"),Te=(0,l.uE)("<li>类型：<code>Username with password</code></li><li>范围：<code>全局</code></li><li>Username：<code>你的 Gitee 账号</code></li><li>Password：<code>你的 Gitee 密码</code></li><li><strong>ID</strong>：<code>只要是唯一值就行，后面要用到</code></li><li>描述：<code>最好跟 ID 一致，方便认</code></li>",6),He=(0,l.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pipeline {\n  agent any\n\n  options {\n    timestamps()\n    disableConcurrentBuilds()\n    buildDiscarder(logRotator(\n      numToKeepStr: &#39;20&#39;,\n      daysToKeepStr: &#39;30&#39;,\n    ))\n  }\n\n  /*=======================================常修改变量-start=======================================*/\n\n  environment {\n    gitUrl = &quot;https://gitee.com/youmeek/react-demo.git&quot;\n    branchName = &quot;master&quot;\n    giteeCredentialsId = &quot;上面全局凭据填写的 ID&quot;\n    projectBuildPath = &quot;${env.WORKSPACE}/dist&quot;\n    nginxHtmlRoot = &quot;/usr/share/nginx/react&quot;\n  }\n  \n  /*=======================================常修改变量-end=======================================*/\n  \n  stages {\n    \n    stage(&#39;Pre Env&#39;) {\n      steps {\n         echo &quot;======================================项目名称 = ${env.JOB_NAME}&quot;\n         echo &quot;======================================项目 URL = ${gitUrl}&quot;\n         echo &quot;======================================项目分支 = ${branchName}&quot;\n         echo &quot;======================================当前编译版本号 = ${env.BUILD_NUMBER}&quot;\n         echo &quot;======================================项目 Build 文件夹路径 = ${projectBuildPath}&quot;\n         echo &quot;======================================项目 Nginx 的 ROOT 路径 = ${nginxHtmlRoot}&quot;\n      }\n    }\n    \n    stage(&#39;Git Clone&#39;){\n      steps {\n          git branch: &quot;${branchName}&quot;,\n          credentialsId: &quot;${giteeCredentialsId}&quot;,\n          url: &quot;${gitUrl}&quot;\n      }\n    }\n\n    stage(&#39;NPM Install&#39;) {\n      steps {\n        sh &quot;npm install&quot;\n      }\n    }\n\n    stage(&#39;NPM Build&#39;) {\n      steps {\n        sh &quot;npm run build&quot;\n      }\n    }\n\n    stage(&#39;Nginx Deploy&#39;) {\n      steps {\n        sh &quot;rm -rf ${nginxHtmlRoot}/&quot;\n        sh &quot;cp -r ${projectBuildPath}/ ${nginxHtmlRoot}/&quot;\n      }\n    }\n\n\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="jenkins-后端-spring-boot-项目构建" tabindex="-1"><a class="header-anchor" href="#jenkins-后端-spring-boot-项目构建" aria-hidden="true">#</a> Jenkins 后端 Spring Boot 项目构建</h2><h4 id="安装-maven" tabindex="-1"><a class="header-anchor" href="#安装-maven" aria-hidden="true">#</a> 安装 Maven</h4>',4),Ke=(0,l.Uk)("参考该文章"),Ge=(0,l._)("h4",{id:"配置工具",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#配置工具","aria-hidden":"true"},"#"),(0,l.Uk)(" 配置工具")],-1),ze=(0,l.Uk)("访问："),Fe={href:"http://192.168.0.105:18080/configureTools/",target:"_blank",rel:"noopener noreferrer"},Ve=(0,l.Uk)("http://192.168.0.105:18080/configureTools/"),Xe=(0,l.Uk)("我习惯自己安装，所以这里修改配置： "),Qe=(0,l._)("li",null,[(0,l._)("strong",null,"需要注意"),(0,l.Uk)("：配置里面的 "),(0,l._)("code",null,"别名"),(0,l.Uk)(" 不要随便取名字，后面 Pipeline 要用到的。在 tool 标签里面会用到。")],-1),Ye=(0,l.Uk)("具体可以查看该图片说明："),Ze={href:"https://upload-images.jianshu.io/upload_images/12159-ef61595aebaa4244.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",target:"_blank",rel:"noopener noreferrer"},en=(0,l.Uk)("点击查看"),nn=(0,l._)("h4",{id:"简单的-pipeline-写法-jar-方式运行-闭源项目-码云为例",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#简单的-pipeline-写法-jar-方式运行-闭源项目-码云为例","aria-hidden":"true"},"#"),(0,l.Uk)(" 简单的 pipeline 写法（Jar 方式运行）（闭源项目 -- 码云为例）")],-1),ln=(0,l._)("h6",{id:"用-supervisord-做进程控制",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#用-supervisord-做进程控制","aria-hidden":"true"},"#"),(0,l.Uk)(" 用 supervisord 做进程控制")],-1),sn=(0,l.Uk)("supervisord 的使用"),dn=(0,l._)("li",null,"生成 supervisord 的配置文件会写在 Pipeline，所以只要你保证服务器 supervisord 正常运行即可",-1),rn=(0,l.uE)('<h6 id="配置-jenkins" tabindex="-1"><a class="header-anchor" href="#配置-jenkins" aria-hidden="true">#</a> 配置 Jenkins</h6><ul><li><strong>必须</strong>：新增一个全局凭据，方法参考前端部分</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pipeline {\n  agent any\n\n  /*=======================================工具环境修改-start=======================================*/\n  tools {\n    jdk &#39;JDK8&#39;\n    maven &#39;MAVEN3&#39;\n  }\n  /*=======================================工具环境修改-end=======================================*/\n\n  options {\n    timestamps()\n    disableConcurrentBuilds()\n    buildDiscarder(logRotator(\n      numToKeepStr: &#39;20&#39;,\n      daysToKeepStr: &#39;30&#39;,\n    ))\n  }\n\n  /*=======================================常修改变量-start=======================================*/\n\n  environment {\n    gitUrl = &quot;https://gitee.com/youmeek/springboot-jenkins-demo.git&quot;\n    branchName = &quot;master&quot;\n    giteeCredentialsId = &quot;Gitee&quot;\n    projectWorkSpacePath = &quot;${env.WORKSPACE}&quot;\n    projectBuildTargetPath = &quot;${env.WORKSPACE}/target&quot;\n    projectJarNewName = &quot;${env.JOB_NAME}.jar&quot;\n    supervisorConfigFileFullPath = &quot;/etc/supervisor/conf.d/${env.JOB_NAME}.conf&quot;\n    supervisorLogPath = &quot;/var/log/supervisor&quot;\n\n  }\n  \n  /*=======================================常修改变量-end=======================================*/\n  \n  stages {\n    \n    stage(&#39;Pre Env&#39;) {\n      steps {\n         echo &quot;======================================项目名称 = ${env.JOB_NAME}&quot;\n         echo &quot;======================================项目 URL = ${gitUrl}&quot;\n         echo &quot;======================================项目分支 = ${branchName}&quot;\n         echo &quot;======================================当前编译版本号 = ${env.BUILD_NUMBER}&quot;\n         echo &quot;======================================项目空间文件夹路径 = ${projectWorkSpacePath}&quot;\n         echo &quot;======================================项目 build 后 jar 路径 = ${projectBuildTargetPath}&quot;\n         echo &quot;======================================项目 jar 新名称 = ${projectJarNewName}&quot;\n         echo &quot;======================================supervisor 配置文件路径 = ${supervisorConfigFileFullPath}&quot;\n         echo &quot;======================================supervisor 存放 log 路径 = ${supervisorLogPath}&quot;\n      }\n    }\n    \n    stage(&#39;Git Clone&#39;){\n      steps {\n          git branch: &quot;${branchName}&quot;,\n          credentialsId: &quot;${giteeCredentialsId}&quot;,\n          url: &quot;${gitUrl}&quot;\n      }\n    }\n\n    stage(&#39;Maven Clean&#39;) {\n      steps {\n        sh &quot;mvn clean&quot;\n      }\n    }\n\n    stage(&#39;Maven Package&#39;) {\n      steps {\n        sh &quot;mvn package -DskipTests&quot;\n      }\n    }\n\n    stage(&#39;Spring Boot Run&#39;) {\n      steps {\n\nsh &quot;&quot;&quot;\nmv ${projectBuildTargetPath}/*.jar ${projectBuildTargetPath}/${projectJarNewName}\n\nif [ ! -f ${supervisorConfigFileFullPath} ]; then\n\ntouch ${supervisorConfigFileFullPath}\n    \ncat &lt;&lt; EOF &gt;&gt; ${supervisorConfigFileFullPath}\n[program:${env.JOB_NAME}]\ncommand=java -jar ${projectBuildTargetPath}/${projectJarNewName}\nstdout_logfile=${supervisorLogPath}/${env.JOB_NAME}.log\nstderr_logfile=${supervisorLogPath}/${env.JOB_NAME}-err.log\nuser=root\nautostart=true\nautorestart=false\nstartsecs=5\npriority=1\nstopasgroup=true\nkillasgroup=true\nEOF\n\n/usr/bin/supervisorctl update\nfi\n\n/usr/bin/supervisorctl restart ${env.JOB_NAME}\n&quot;&quot;&quot;\n\n      }\n    }\n\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="简单的-pipeline-写法-docker-方式运行-闭源项目-码云为例" tabindex="-1"><a class="header-anchor" href="#简单的-pipeline-写法-docker-方式运行-闭源项目-码云为例" aria-hidden="true">#</a> 简单的 pipeline 写法（Docker 方式运行）（闭源项目 -- 码云为例）</h4><ul><li><strong>确保</strong> 项目根目录有 Dockerfile 文件（部分内容自己修改），内容模板：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>FROM java:8\nVOLUME /tmp\n\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone\n\nADD ./target/buildApp.jar /app.jar\n\nRUN bash -c &#39;touch /app.jar&#39;\n\nEXPOSE 8081\n\nENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;-Xms512M&quot;, &quot;-Xmx512M&quot; , &quot;-XX:MetaspaceSize=128M&quot;, &quot;-XX:MaxMetaspaceSize=256M&quot; ,&quot;/app.jar&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Pipeline 写法</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pipeline {\n  agent any\n\n  /*=======================================工具环境修改-start=======================================*/\n  tools {\n    jdk &#39;JDK8&#39;\n    maven &#39;MAVEN3&#39;\n  }\n  /*=======================================工具环境修改-end=======================================*/\n\n  options {\n    timestamps()\n    disableConcurrentBuilds()\n    buildDiscarder(logRotator(\n      numToKeepStr: &#39;20&#39;,\n      daysToKeepStr: &#39;30&#39;,\n    ))\n  }\n\n  /*=======================================常修改变量-start=======================================*/\n\n  environment {\n    gitUrl = &quot;https://gitee.com/youmeek/springboot-jenkins-demo.git&quot;\n    branchName = &quot;master&quot;\n    giteeCredentialsId = &quot;Gitee&quot;\n    projectWorkSpacePath = &quot;${env.WORKSPACE}&quot;\n    projectBuildTargetPath = &quot;${env.WORKSPACE}/target&quot;\n    projectJarNewName = &quot;buildApp.jar&quot;\n\n\n    dockerImageName = &quot;docker.youmeek.com/demo/${env.JOB_NAME}:${env.BUILD_NUMBER}&quot;\n    dockerContainerName = &quot;${env.JOB_NAME}&quot;\n    inHostPort = &quot;8082&quot;\n    inDockerAndJavaPort = &quot;8081&quot;\n    inHostLogPath = &quot;/data/docker/logs/${dockerContainerName}/${env.BUILD_NUMBER}&quot;\n    inDockerLogPath = &quot;/data/logs&quot;\n    dockerRunParam = &quot;--name=${dockerContainerName} --hostname=${dockerContainerName} -v /etc/hosts:/etc/hosts -v ${inHostLogPath}:${inDockerLogPath} --restart=always  -p ${inHostPort}:${inDockerAndJavaPort}&quot;\n  }\n  \n  /*=======================================常修改变量-end=======================================*/\n  \n  stages {\n    \n    stage(&#39;Pre Env&#39;) {\n      steps {\n         echo &quot;======================================项目名称 = ${env.JOB_NAME}&quot;\n         echo &quot;======================================项目 URL = ${gitUrl}&quot;\n         echo &quot;======================================项目分支 = ${branchName}&quot;\n         echo &quot;======================================当前编译版本号 = ${env.BUILD_NUMBER}&quot;\n         echo &quot;======================================项目空间文件夹路径 = ${projectWorkSpacePath}&quot;\n         echo &quot;======================================项目 build 后 jar 路径 = ${projectBuildTargetPath}&quot;\n         echo &quot;======================================项目 jar 新名称 = ${projectJarNewName}&quot;\n         echo &quot;======================================Docker 镜像名称 = ${dockerImageName}&quot;\n         echo &quot;======================================Docker 容器名称 = ${dockerContainerName}&quot;\n      }\n    }\n    \n    stage(&#39;Git Clone&#39;){\n      steps {\n          git branch: &quot;${branchName}&quot;,\n          credentialsId: &quot;${giteeCredentialsId}&quot;,\n          url: &quot;${gitUrl}&quot;\n      }\n    }\n\n    stage(&#39;Maven Clean&#39;) {\n      steps {\n        sh &quot;mvn clean&quot;\n      }\n    }\n\n    stage(&#39;Maven Package&#39;) {\n      steps {\n        sh &quot;mvn package -DskipTests&quot;\n      }\n    }\n\n    stage(&#39;构建 Docker 镜像&#39;) {\n      steps {\n        sh &quot;&quot;&quot;\n            mv ${projectBuildTargetPath}/*.jar ${projectBuildTargetPath}/${projectJarNewName}\n            \n            cd ${projectWorkSpacePath}\n            \n            docker build -t ${dockerImageName} ./\n        &quot;&quot;&quot;\n      }\n    }\n\n    stage(&#39;运行 Docker 镜像&#39;) {\n      steps {\n        sh &quot;&quot;&quot;\n            docker stop ${dockerContainerName} | true\n\n            docker rm -f ${dockerContainerName} | true\n            \n            docker run -d  ${dockerRunParam} ${dockerImageName}\n        &quot;&quot;&quot;\n      }\n    }\n    \n    \n\n    \n    \n\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="简单的-pipeline-写法-docker-harbor-方式运行-闭源项目-码云为例" tabindex="-1"><a class="header-anchor" href="#简单的-pipeline-写法-docker-harbor-方式运行-闭源项目-码云为例" aria-hidden="true">#</a> 简单的 pipeline 写法（Docker + Harbor 方式运行）（闭源项目 -- 码云为例）</h4>',9),an=(0,l._)("li",null,"请先看懂上面 Docker 方式",-1),tn=(0,l.Uk)("一共需要 3 台机子（要保证在内网环境，不然一定会有安全问题） "),un=(0,l.Uk)("一台部署 "),vn=(0,l.Uk)("Harbor"),on=(0,l._)("li",null,"一台部署 Jenkins",-1),cn=(0,l._)("li",null,"一台运行项目",-1),mn=(0,l._)("li",null,"确保 Jenkins 机子已经 Docker Login Harbor，这个就一次性的动作，所以自己在 Jenkins 服务器上操作即可",-1),bn=(0,l._)("li",null,"确保 Spring Boot 项目运行的机子已经 Docker Login Harbor，这个就一次性的动作，所以自己在 Jenkins 服务器上操作即可",-1),hn=(0,l._)("li",null,"确保 Spring Boot 项目运行的机子 docker remote api 开启（没有身份认证功能，所以才要保证内网）",-1),pn=(0,l._)("li",null,"Pipeline 写法",-1),gn=(0,l.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pipeline {\n  agent any\n\n  /*=======================================工具环境修改-start=======================================*/\n  tools {\n    jdk &#39;JDK8&#39;\n    maven &#39;MAVEN3&#39;\n  }\n  /*=======================================工具环境修改-end=======================================*/\n\n  options {\n    timestamps()\n    disableConcurrentBuilds()\n    buildDiscarder(logRotator(\n      numToKeepStr: &#39;20&#39;,\n      daysToKeepStr: &#39;30&#39;,\n    ))\n  }\n\n  /*=======================================常修改变量-start=======================================*/\n\n  environment {\n    gitUrl = &quot;https://gitee.com/youmeek/springboot-jenkins-demo.git&quot;\n    branchName = &quot;master&quot;\n    giteeCredentialsId = &quot;Gitee&quot;\n    projectWorkSpacePath = &quot;${env.WORKSPACE}&quot;\n    projectBuildTargetPath = &quot;${env.WORKSPACE}/target&quot;\n    projectJarNewName = &quot;buildApp.jar&quot;\n\n    projectDockerDaemon = &quot;tcp://192.168.1.12:2376&quot;\n    harborUrl = &quot;192.168.1.13&quot;\n    harborProjectName = &quot;demo&quot;\n    dockerImageName = &quot;${harborUrl}/${harborProjectName}/${env.JOB_NAME}:${env.BUILD_NUMBER}&quot;\n    dockerContainerName = &quot;${env.JOB_NAME}&quot;\n    inHostPort = &quot;8082&quot;\n    inDockerAndJavaPort = &quot;8081&quot;\n    inHostLogPath = &quot;/data/docker/logs/${dockerContainerName}/${env.BUILD_NUMBER}&quot;\n    inDockerLogPath = &quot;/data/logs&quot;\n    dockerRunParam = &quot;--name=${dockerContainerName} --hostname=${dockerContainerName} -v /etc/hosts:/etc/hosts -v ${inHostLogPath}:${inDockerLogPath} --restart=always  -p ${inHostPort}:${inDockerAndJavaPort}&quot;\n  }\n  \n  /*=======================================常修改变量-end=======================================*/\n  \n  stages {\n    \n    stage(&#39;Pre Env&#39;) {\n      steps {\n         echo &quot;======================================项目名称 = ${env.JOB_NAME}&quot;\n         echo &quot;======================================项目 URL = ${gitUrl}&quot;\n         echo &quot;======================================项目分支 = ${branchName}&quot;\n         echo &quot;======================================当前编译版本号 = ${env.BUILD_NUMBER}&quot;\n         echo &quot;======================================项目空间文件夹路径 = ${projectWorkSpacePath}&quot;\n         echo &quot;======================================项目 build 后 jar 路径 = ${projectBuildTargetPath}&quot;\n         echo &quot;======================================项目 jar 新名称 = ${projectJarNewName}&quot;\n         echo &quot;======================================Docker 镜像名称 = ${dockerImageName}&quot;\n         echo &quot;======================================Docker 容器名称 = ${dockerContainerName}&quot;\n         echo &quot;======================================harbor 地址 = ${harborUrl}&quot;\n         echo &quot;======================================harbor 项目名称 = ${harborProjectName}&quot;\n         echo &quot;======================================项目在宿主机的端口 = ${inHostPort}&quot;\n         echo &quot;======================================项目在 Docker 容器中的端口 = ${inDockerAndJavaPort}&quot;\n         echo &quot;======================================项目在宿主机的 log 路径 = ${inHostLogPath}&quot;\n         echo &quot;======================================项目在 docker 容器的 log 路径 = ${inDockerLogPath}&quot;\n         echo &quot;======================================项目运行的 Docker remote ip 信息 = ${projectDockerDaemon}&quot;\n         echo &quot;======================================项目运行的参数 = ${dockerRunParam}&quot;\n      }\n    }\n    \n    stage(&#39;Git Clone&#39;){\n      steps {\n          git branch: &quot;${branchName}&quot;,\n          credentialsId: &quot;${giteeCredentialsId}&quot;,\n          url: &quot;${gitUrl}&quot;\n      }\n    }\n\n    stage(&#39;Maven Clean&#39;) {\n      steps {\n        sh &quot;mvn clean&quot;\n      }\n    }\n\n    stage(&#39;Maven Package&#39;) {\n      steps {\n        sh &quot;mvn package -DskipTests&quot;\n      }\n    }\n\n    stage(&#39;构建 Docker 镜像&#39;) {\n      steps {\n        sh &quot;&quot;&quot;\n            mv ${projectBuildTargetPath}/*.jar ${projectBuildTargetPath}/${projectJarNewName}\n            \n            cd ${projectWorkSpacePath}\n            \n            docker build -t ${dockerImageName} ./\n        &quot;&quot;&quot;\n      }\n    }\n\n    stage(&#39;Push Docker 镜像&#39;) {\n      options {\n        timeout(time: 5, unit: &#39;MINUTES&#39;) \n      }\n      steps {\n        sh &quot;&quot;&quot;\n          docker push ${dockerImageName}\n          docker rmi ${dockerImageName}\n        &quot;&quot;&quot;\n      }\n    }\n\n    stage(&#39;运行远程 Docker 镜像&#39;) {\n      options {\n        timeout(time: 5, unit: &#39;MINUTES&#39;) \n      }\n      steps {\n        sh &quot;&quot;&quot;\n            docker -H ${projectDockerDaemon} pull ${dockerImageName}\n            \n            docker -H ${projectDockerDaemon} stop ${dockerContainerName} | true\n            \n            docker -H ${projectDockerDaemon} rm -f ${dockerContainerName} | true\n            \n            docker -H ${projectDockerDaemon} run -d  ${dockerRunParam} ${dockerImageName}\n        &quot;&quot;&quot;\n      }\n    }\n    \n    \n\n    \n    \n\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="多节点-master-与-slave" tabindex="-1"><a class="header-anchor" href="#多节点-master-与-slave" aria-hidden="true">#</a> 多节点 master 与 slave</h2>',3),kn=(0,l.Uk)("可以参考这篇："),qn={href:"http://www.cnblogs.com/sparkdev/p/7102622.html",target:"_blank",rel:"noopener noreferrer"},_n=(0,l.Uk)("http://www.cnblogs.com/sparkdev/p/7102622.html"),jn=(0,l._)("hr",null,null,-1),Un=(0,l._)("h2",{id:"资料",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#资料","aria-hidden":"true"},"#"),(0,l.Uk)(" 资料")],-1),$n={href:"http://stackoverflow.com/questions/4969156/java-net-unknownhostexception",target:"_blank",rel:"noopener noreferrer"},Nn=(0,l.Uk)("http://stackoverflow.com/questions/4969156/java-net-unknownhostexception"),Pn={href:"https://www.jianshu.com/p/b50e679e2409",target:"_blank",rel:"noopener noreferrer"},fn=(0,l.Uk)("https://www.jianshu.com/p/b50e679e2409"),xn={href:"http://xkcoding.com/2018/01/04/devops-jenkins.html",target:"_blank",rel:"noopener noreferrer"},En=(0,l.Uk)("http://xkcoding.com/2018/01/04/devops-jenkins.html"),Bn={href:"https://blog.csdn.net/jlminghui/article/details/54952148",target:"_blank",rel:"noopener noreferrer"},Dn=(0,l.Uk)("https://blog.csdn.net/jlminghui/article/details/54952148"),Sn={},Jn=(0,i(83744).Z)(Sn,[["render",function(e,n){const i=(0,l.up)("ExternalLinkIcon"),Sn=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.iD)("div",null,[s,d,(0,l._)("ul",null,[(0,l._)("li",null,[r,(0,l._)("a",a,[t,(0,l.Wm)(i)])]),(0,l._)("li",null,[u,(0,l._)("a",v,[o,(0,l.Wm)(i)])]),(0,l._)("li",null,[c,(0,l._)("a",m,[b,(0,l.Wm)(i)])]),(0,l._)("li",null,[h,(0,l._)("a",p,[g,(0,l.Wm)(i)])])]),k,(0,l._)("ul",null,[q,_,(0,l._)("li",null,[j,(0,l._)("a",U,[$,(0,l.Wm)(i)]),N]),(0,l._)("li",null,[P,(0,l._)("a",f,[x,(0,l.Wm)(i)])]),E]),B,(0,l._)("ul",null,[(0,l._)("li",null,[D,S,J,(0,l._)("a",A,[I,(0,l.Wm)(i)]),w]),M,R]),y,(0,l._)("ul",null,[(0,l._)("li",null,[C,(0,l._)("a",L,[O,(0,l.Wm)(i)])]),W,(0,l._)("li",null,[T,(0,l._)("ul",null,[H,(0,l._)("li",null,[K,(0,l._)("a",G,[z,(0,l.Wm)(i)]),F]),(0,l._)("li",null,[V,(0,l._)("a",X,[Q,(0,l.Wm)(i)]),Y]),Z])])]),ee,(0,l._)("ul",null,[ne,ie,(0,l._)("li",null,[le,(0,l._)("a",se,[de,(0,l.Wm)(i)])]),re]),ae,(0,l._)("ul",null,[te,(0,l._)("li",null,[ue,(0,l._)("a",ve,[oe,(0,l.Wm)(i)])]),(0,l._)("li",null,[ce,(0,l._)("ul",null,[me,(0,l._)("li",null,[be,(0,l._)("a",he,[pe,(0,l.Wm)(i)]),ge,ke,qe])])])]),_e,(0,l._)("ul",null,[(0,l._)("li",null,[je,(0,l._)("a",Ue,[$e,(0,l.Wm)(i)])]),(0,l._)("li",null,[Ne,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("a",Pe,[fe,(0,l.Wm)(i)])]),(0,l._)("li",null,[(0,l._)("a",xe,[Ee,(0,l.Wm)(i)])]),(0,l._)("li",null,[(0,l._)("a",Be,[De,(0,l.Wm)(i)])]),(0,l._)("li",null,[(0,l._)("a",Se,[Je,(0,l.Wm)(i)])]),(0,l._)("li",null,[(0,l._)("a",Ae,[Ie,(0,l.Wm)(i)])])])])]),we,(0,l._)("ul",null,[(0,l._)("li",null,[Me,Re,(0,l.Wm)(Sn,{to:"/linux-tutor/server/Node-Install-And-Usage.html"},{default:(0,l.w5)((()=>[ye])),_:1})])]),Ce,(0,l._)("ul",null,[(0,l._)("li",null,[Le,(0,l._)("a",Oe,[We,(0,l.Wm)(i)])]),Te]),He,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(Sn,{to:"/linux-tutor/server/Maven-Install-And-Settings.html"},{default:(0,l.w5)((()=>[Ke])),_:1})])]),Ge,(0,l._)("ul",null,[(0,l._)("li",null,[ze,(0,l._)("a",Fe,[Ve,(0,l.Wm)(i)])]),(0,l._)("li",null,[Xe,(0,l._)("ul",null,[Qe,(0,l._)("li",null,[Ye,(0,l._)("a",Ze,[en,(0,l.Wm)(i)])])])])]),nn,ln,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(Sn,{to:"/linux-tutor/server/Daemontools.html"},{default:(0,l.w5)((()=>[sn])),_:1})]),dn]),rn,(0,l._)("ul",null,[an,(0,l._)("li",null,[tn,(0,l._)("ul",null,[(0,l._)("li",null,[un,(0,l.Wm)(Sn,{to:"/linux-tutor/server/Harbor-Install-And-Usage.html"},{default:(0,l.w5)((()=>[vn])),_:1})]),on,cn])]),mn,bn,hn,pn]),gn,(0,l._)("ul",null,[(0,l._)("li",null,[kn,(0,l._)("a",qn,[_n,(0,l.Wm)(i)])])]),jn,Un,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("a",$n,[Nn,(0,l.Wm)(i)])]),(0,l._)("li",null,[(0,l._)("a",Pn,[fn,(0,l.Wm)(i)])]),(0,l._)("li",null,[(0,l._)("a",xn,[En,(0,l.Wm)(i)])]),(0,l._)("li",null,[(0,l._)("a",Bn,[Dn,(0,l.Wm)(i)])])])])}]])}}]);