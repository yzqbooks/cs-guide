"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[93488],{42842:(e,i,l)=>{l.r(i),l.d(i,{data:()=>a});const a=JSON.parse('{"key":"v-2d0ffea8","path":"/linux-tutor/advance/01_program_build.html","title":"程序构建","lang":"zh-CN","frontmatter":{"summary":"程序构建 一般源代码提供的程序安装需要通过配置、编译、安装三个步骤； 1. 配置做的工作主要是检查当前环境是否满足要安装软件的依赖关系，以及设置程序安装所需要的初始化信息，比如安装路径，需要安装哪些组件；配置完成，会生成makefile文件供第二步make使用； 2. 编译是对源文件进行编译链接生成可执行程序； 3. 安装做的工作就简单多了，就是将生成的可执","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/linux-tutor/advance/01_program_build.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"程序构建"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-26T11:39:36.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-26T11:39:36.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"配置","slug":"配置","children":[]},{"level":2,"title":"编译","slug":"编译","children":[{"level":3,"title":"makefile编写的要点","slug":"makefile编写的要点","children":[]},{"level":3,"title":"makefile中的全局自变量","slug":"makefile中的全局自变量","children":[]},{"level":3,"title":"更多选择 CMake","slug":"更多选择-cmake","children":[]},{"level":3,"title":"编译依赖的库","slug":"编译依赖的库","children":[]},{"level":3,"title":"g++编译","slug":"g-编译","children":[]}]},{"level":2,"title":"安装","slug":"安装","children":[]},{"level":2,"title":"总结","slug":"总结","children":[]}],"git":{"createdTime":1653565176000,"updatedTime":1653565176000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.01,"words":904},"filePathRelative":"linux-tutor/advance/01_program_build.md","localizedDate":"2022年5月26日"}')},78784:(e,i,l)=>{l.r(i),l.d(i,{default:()=>o});var a=l(66252);const t=(0,a.uE)('<h1 id="程序构建" tabindex="-1"><a class="header-anchor" href="#程序构建" aria-hidden="true">#</a> 程序构建</h1><div class="custom-container tip"><p class="custom-container-title">提示</p><p>一般源代码提供的程序安装需要通过配置、编译、安装三个步骤；</p><ol><li>配置做的工作主要是检查当前环境是否满足要安装软件的依赖关系，以及设置程序安装所需要的初始化信息，比如安装路径，需要安装哪些组件；配置完成，会生成makefile文件供第二步make使用；</li><li>编译是对源文件进行编译链接生成可执行程序；</li><li>安装做的工作就简单多了，就是将生成的可执行文件拷贝到配置时设置的初始路径下；</li></ol></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>查询可用的配置选项:</p><pre><code>./configure --help\n</code></pre><p>配置路径:</p><pre><code>./configure --prefix=/usr/local/snmp\n</code></pre><p>--prefix是配置使用的最常用选项，设置程序安装的路径；</p><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h2><p>编译使用make编译:</p><pre><code>make -f myMakefile\n</code></pre><p>通过-f选项显示指定需要编译的makefile；如果待使用makefile文件在当前路径，且文件名为以下几个，则不用显示指定：</p><p>makefile Makefile</p><h3 id="makefile编写的要点" tabindex="-1"><a class="header-anchor" href="#makefile编写的要点" aria-hidden="true">#</a> makefile编写的要点</h3><ul><li>必须满足第一条规则，满足后停止</li><li>除第一条规则，其他无顺序</li></ul><h3 id="makefile中的全局自变量" tabindex="-1"><a class="header-anchor" href="#makefile中的全局自变量" aria-hidden="true">#</a> makefile中的全局自变量</h3><ul><li>$@目标文件名</li><li>@^所有前提名，除副本</li><li>@＋所有前提名，含副本</li><li>@＜一个前提名</li><li>@？所有新于目标文件的前提名</li><li>@*目标文件的基名称</li></ul><div class="custom-container note"><p class="custom-container-title">注</p><p>::: title Note</p></div><p>系统学习makefile的书写规则，请参考 跟我一起学makefile[^1] :::</p><h3 id="更多选择-cmake" tabindex="-1"><a class="header-anchor" href="#更多选择-cmake" aria-hidden="true">#</a> 更多选择 CMake</h3><p>CMake是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件。使用CMake，能够使程序员从复杂的编译连接过程中解脱出来。它使用一个名为 CMakeLists.txt 的文件来描述构建过程,可以生成标准的构建文件,如 Unix/Linux 的 Makefile 或Windows Visual C++ 的 projects/workspaces 。</p><h3 id="编译依赖的库" tabindex="-1"><a class="header-anchor" href="#编译依赖的库" aria-hidden="true">#</a> 编译依赖的库</h3><p>makefile编译过程中所依赖的非标准库和头文件路径需要显示指明:</p><pre><code>CPPFLAGS -I标记非标准头文件存放路径\nLDFLAGS  -L标记非标准库存放路径\n</code></pre><p>如果CPPFLAGS和LDFLAGS已在用户环境变量中设置并且导出（使用export关键字），就不用再显示指定；</p><pre><code>make -f myMakefile LDFLAGS=&#39;-L/var/xxx/lib -L/opt/mysql/lib&#39; \n    CPPFLAGS=&#39;-I/usr/local/libcom/include -I/usr/local/libpng/include&#39;\n</code></pre><p>::: caution ::: title Caution :::</p><p>链接多库时，多个库之间如果有依赖，需要注意书写的顺序，右边是左边的前提； :::</p><h3 id="g-编译" tabindex="-1"><a class="header-anchor" href="#g-编译" aria-hidden="true">#</a> g++编译</h3><pre><code>g++ -o unixApp unixApp.o a.o b.o\n</code></pre><p>选项说明：</p><ul><li>-o:指明生成的目标文件</li><li>-g：添加调试信息</li><li>-E: 查看中间文件</li></ul><p>应用：查询宏展开的中间文件：</p><p>在g++的编译选项中，添加 -E选项，然后去掉-o选项 ，重定向到一个文件中即可:</p><pre><code>g++ -g -E unixApp.cpp  -I/opt/app/source &gt; midfile\n</code></pre><p>查询应用程序需要链接的库:</p><pre><code>$ldd myprogrammer\nlibstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00000039a7e00000)\nlibm.so.6 =&gt; /lib64/libm.so.6 (0x0000003996400000)\nlibgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00000039a5600000)\nlibc.so.6 =&gt; /lib64/libc.so.6 (0x0000003995800000)\n/lib64/ld-linux-x86-64.so.2 (0x0000003995400000)\n</code></pre><div class="custom-container note"><p class="custom-container-title">注</p><p>::: title Note</p></div><p>关于ldd的使用细节，参见 <code>ldd</code>{.interpreted-text role=&quot;ref&quot;} :::</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>安装做的工作就简单多了，就是将生成的可执行文件拷贝到配置时设置的初始路径下:</p><pre><code>$make install\n</code></pre><p>其实 <strong>install</strong> 就是makefile中的一个规则，打开makefile文件后可以查看程序安装的所做的工作；</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>configure make install g++</p>',45),r=(0,a.Uk)("[^1]: 陈皓 跟我一起写Makefile "),n={href:"http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("http://scc.qibebt.cas.cn/docs/linux/base/����һ��дMakefile-����.pdf"),c={},o=(0,l(83744).Z)(c,[["render",function(e,i){const l=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[t,(0,a._)("p",null,[r,(0,a._)("a",n,[d,(0,a.Wm)(l)])])])}]])}}]);