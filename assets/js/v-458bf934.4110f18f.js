"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[54754],{17704:(e,s,n)=>{n.r(s),n.d(s,{data:()=>a});const a=JSON.parse('{"key":"v-458bf934","path":"/linux-tutor/common/curl.html","title":"curl简介","lang":"zh-CN","frontmatter":{"summary":"curl简介 curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。 它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。 本文介绍它的主要命令行参数，作为日常的参考，方便查阅。内容主要翻译自《curl cookbook》。为了节约篇幅，下面的例","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/linux-tutor/common/curl.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"curl简介"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-27T01:37:35.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-27T01:37:35.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"-A","slug":"a","children":[]},{"level":2,"title":"-b","slug":"b","children":[]},{"level":2,"title":"-c","slug":"c","children":[]},{"level":2,"title":"-d","slug":"d","children":[]},{"level":2,"title":"--data-urlencode","slug":"data-urlencode","children":[]},{"level":2,"title":"-e","slug":"e","children":[]},{"level":2,"title":"-F","slug":"f","children":[]},{"level":2,"title":"-G","slug":"g","children":[]},{"level":2,"title":"-H","slug":"h","children":[]},{"level":2,"title":"-i","slug":"i","children":[]},{"level":2,"title":"-I","slug":"i-1","children":[]},{"level":2,"title":"-k","slug":"k","children":[]},{"level":2,"title":"-L","slug":"l","children":[]},{"level":2,"title":"--limit-rate","slug":"limit-rate","children":[]},{"level":2,"title":"-o","slug":"o","children":[]},{"level":2,"title":"-O","slug":"o-1","children":[]},{"level":2,"title":"-s","slug":"s","children":[]},{"level":2,"title":"-S","slug":"s-1","children":[]},{"level":2,"title":"-u","slug":"u","children":[]},{"level":2,"title":"-v","slug":"v","children":[]},{"level":2,"title":"-x","slug":"x","children":[]},{"level":2,"title":"-X","slug":"x-1","children":[]}],"git":{"createdTime":1653615455000,"updatedTime":1653615455000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":6.96,"words":2089},"filePathRelative":"linux-tutor/common/curl.md","localizedDate":"2022年5月27日"}')},51796:(e,s,n)=>{n.r(s),n.d(s,{default:()=>v});var a=n(66252);const i=(0,a._)("h1",{id:"curl简介",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#curl简介","aria-hidden":"true"},"#"),(0,a.Uk)(" curl简介")],-1),d=(0,a._)("p",null,"curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。",-1),l=(0,a._)("p",null,"它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。",-1),c=(0,a.Uk)("本文介绍它的主要命令行参数，作为日常的参考，方便查阅。内容主要翻译自"),o={href:"https://catonmat.net/cookbooks/curl",target:"_blank",rel:"noopener noreferrer"},r=(0,a.Uk)("《curl cookbook》"),t=(0,a.Uk)("。为了节约篇幅，下面的例子不包括运行时的输出，初学者可以先看我以前写的"),p={href:"https://www.ruanyifeng.com/blog/2011/09/curl.html",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("《curl 初学者教程》"),h=(0,a.Uk)("。"),g=(0,a.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>-A/--user-agent &lt;string&gt;              设置用户代理发送给服务器\n-b/--cookie &lt;name=string/file&gt;    cookie字符串或文件读取位置\n-c/--cookie-jar &lt;file&gt;                    操作结束后把cookie写入到这个文件中\n-C/--continue-at &lt;offset&gt;            断点续转\n-D/--dump-header &lt;file&gt;              把header信息写入到该文件中\n-e/--referer                                  来源网址\n-f/--fail                                          连接失败时不显示http错误\n-o/--output                                  把输出写到该文件中\n-O/--remote-name                      把输出写到该文件中，保留远程文件的文件名\n-r/--range &lt;range&gt;                      检索来自HTTP/1.1或FTP服务器字节范围\n-s/--silent                                    静音模式。不输出任何东西\n-T/--upload-file &lt;file&gt;                  上传文件\n-u/--user &lt;user[:password]&gt;      设置服务器的用户和密码\n-w/--write-out [format]                什么输出完成后\n-x/--proxy &lt;host[:port]&gt;              在给定的端口上使用HTTP代理\n-#/--progress-bar                        进度条显示当前的传送状态\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不带有任何参数时，curl 就是发出 GET 请求。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="a" tabindex="-1"><a class="header-anchor" href="#a" aria-hidden="true">#</a> <strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -A <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39;</span> https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -A <span class="token string">&#39;&#39;</span> https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会移除<code>User-Agent</code>标头。</p><p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -H <span class="token string">&#39;User-Agent: php/1.0&#39;</span> https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="b" tabindex="-1"><a class="header-anchor" href="#b" aria-hidden="true">#</a> <strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -b <span class="token string">&#39;foo=bar&#39;</span> https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -b <span class="token string">&#39;foo1=bar;foo2=bar2&#39;</span> https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令发送两个 Cookie。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -b cookies.txt https://www.bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> <strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -c cookies.txt https://www.bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p><h2 id="d" tabindex="-1"><a class="header-anchor" href="#d" aria-hidden="true">#</a> <strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">curl</span> -d<span class="token string">&#39;login=emma＆password=123&#39;</span>-X POST https://bing.com/login\n<span class="token comment"># 或者</span>\n$ <span class="token function">curl</span> -d <span class="token string">&#39;login=emma&#39;</span> -d <span class="token string">&#39;password=123&#39;</span> -X POST  https://bing.com/login\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p><p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -d <span class="token string">&#39;@data.txt&#39;</span> https://bing.com/login\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p><h2 id="data-urlencode" tabindex="-1"><a class="header-anchor" href="#data-urlencode" aria-hidden="true">#</a> <strong>--data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> --data-urlencode <span class="token string">&#39;comment=hello world&#39;</span> https://bing.com/login\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p><h2 id="e" tabindex="-1"><a class="header-anchor" href="#e" aria-hidden="true">#</a> <strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -e <span class="token string">&#39;https://bing.com?q=example&#39;</span> https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将<code>Referer</code>标头设为<code>[https://bing.com?q=example](https://bing.com?q=example)</code>。</p><p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -H <span class="token string">&#39;Referer: https://bing.com?q=example&#39;</span> https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="f" tabindex="-1"><a class="header-anchor" href="#f" aria-hidden="true">#</a> <strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -F <span class="token string">&#39;file=@photo.png&#39;</span> https://bing.com/profile\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -F <span class="token string">&#39;file=@photo.png;type=image/png&#39;</span> https://bing.com/profile\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p><p><code>-F</code>参数也可以指定文件名。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -F <span class="token string">&#39;file=@photo.png;filename=me.png&#39;</span> https://bing.com/profile\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p><h2 id="g" tabindex="-1"><a class="header-anchor" href="#g" aria-hidden="true">#</a> <strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -G -d <span class="token string">&#39;q=kitties&#39;</span> -d <span class="token string">&#39;count=20&#39;</span> https://bing.com/search\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>[https://bing.com/search?q=kitties&amp;count=20](https://bing.com/search?q=kitties&amp;count=20)</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -G --data-urlencode <span class="token string">&#39;comment=hello world&#39;</span> https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="h" tabindex="-1"><a class="header-anchor" href="#h" aria-hidden="true">#</a> <strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -H <span class="token string">&#39;Accept-Language: en-US&#39;</span> https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -H <span class="token string">&#39;Accept-Language: en-US&#39;</span> -H <span class="token string">&#39;Secret-Message: xyzzy&#39;</span> https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令添加两个 HTTP 标头。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -d <span class="token string">&#39;{&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;}&#39;</span> -H <span class="token string">&#39;Content-Type: application/json&#39;</span> https://bing.com/login\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p><h2 id="i" tabindex="-1"><a class="header-anchor" href="#i" aria-hidden="true">#</a> <strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -i https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="i-1" tabindex="-1"><a class="header-anchor" href="#i-1" aria-hidden="true">#</a> <strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -I https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>--head</code>参数等同于<code>-I</code>。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> --head https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="k" tabindex="-1"><a class="header-anchor" href="#k" aria-hidden="true">#</a> <strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -k https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2 id="l" tabindex="-1"><a class="header-anchor" href="#l" aria-hidden="true">#</a> <strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -L -d <span class="token string">&#39;tweet=hi&#39;</span> https://api.twitter.com/tweet\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="limit-rate" tabindex="-1"><a class="header-anchor" href="#limit-rate" aria-hidden="true">#</a> <strong>--limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> --limit-rate 200k https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="o" tabindex="-1"><a class="header-anchor" href="#o" aria-hidden="true">#</a> <strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -o example.html https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p><h2 id="o-1" tabindex="-1"><a class="header-anchor" href="#o-1" aria-hidden="true">#</a> <strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -O https://www.example.com/foo/bar.html\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p><h2 id="s" tabindex="-1"><a class="header-anchor" href="#s" aria-hidden="true">#</a> <strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -s https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -s -o /dev/null https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="s-1" tabindex="-1"><a class="header-anchor" href="#s-1" aria-hidden="true">#</a> <strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -s -o /dev/null https://bing.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令没有任何输出，除非发生错误。</p><h2 id="u" tabindex="-1"><a class="header-anchor" href="#u" aria-hidden="true">#</a> <strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -u <span class="token string">&#39;bob:12345&#39;</span> https://bing.com/login\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> https://bob:12345@bing.com/login\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -u <span class="token string">&#39;bob&#39;</span> https://bing.com/login\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2 id="v" tabindex="-1"><a class="header-anchor" href="#v" aria-hidden="true">#</a> <strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -v https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> --trace - https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="x" tabindex="-1"><a class="header-anchor" href="#x" aria-hidden="true">#</a> <strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -x socks5://james:cats@myproxy.com:8080 https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -x james:cats@myproxy.com:8080 https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令中，请求的代理使用 HTTP 协议。</p><h2 id="x-1" tabindex="-1"><a class="header-anchor" href="#x-1" aria-hidden="true">#</a> <strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -X POST https://www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令对<code>[https://www.example.com](https://www.example.com)</code>发出 POST 请求。</p>',129),m={},v=(0,n(83744).Z)(m,[["render",function(e,s){const n=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[i,d,l,(0,a._)("p",null,[c,(0,a._)("a",o,[r,(0,a.Wm)(n)]),t,(0,a._)("a",p,[u,(0,a.Wm)(n)]),h]),g])}]])}}]);