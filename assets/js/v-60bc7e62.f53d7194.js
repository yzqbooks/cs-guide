"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[39075],{69572:(t,e,a)=>{a.r(e),a.d(e,{data:()=>i});const i=JSON.parse('{"key":"v-60bc7e62","path":"/linux-tutor/tool/vmstat.html","title":"vmstat 监视内存使用情况","lang":"zh-CN","frontmatter":{"summary":"vmstat 监视内存使用情况 vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写，可实时动态监视操作系统的虚拟内存、进程、CPU活动。 vmstat的语法 vmstat \\\\[-V\\\\] \\\\[-n\\\\] \\\\[delay \\\\[count\\\\]\\\\] \\" - -V表示打印出版本信息；\\" \\" - -n表示在周期性循环输出时，输出的头部","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/linux-tutor/tool/vmstat.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"vmstat 监视内存使用情况"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-27T01:37:35.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-27T01:37:35.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"vmstat的语法","slug":"vmstat的语法","children":[]},{"level":2,"title":"字段说明","slug":"字段说明","children":[]}],"git":{"createdTime":1653565176000,"updatedTime":1653615455000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":2}]},"readingTime":{"minutes":1.28,"words":385},"filePathRelative":"linux-tutor/tool/vmstat.md","localizedDate":"2022年5月26日"}')},80510:(t,e,a)=>{a.r(e),a.d(e,{default:()=>r});var i=a(66252);const s=[(0,i.uE)('<h1 id="vmstat-监视内存使用情况" tabindex="-1"><a class="header-anchor" href="#vmstat-监视内存使用情况" aria-hidden="true">#</a> vmstat 监视内存使用情况</h1><p>vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写，可实时动态监视操作系统的虚拟内存、进程、CPU活动。</p><h2 id="vmstat的语法" tabindex="-1"><a class="header-anchor" href="#vmstat的语法" aria-hidden="true">#</a> vmstat的语法</h2><p>vmstat [-V] [-n] [delay [count]]</p><blockquote><ul><li>-V表示打印出版本信息；</li><li>-n表示在周期性循环输出时，输出的头部信息仅显示一次；</li><li>delay是两次输出之间的延迟时间；</li><li>count是指按照这个时间间隔统计的次数。</li></ul></blockquote><pre><code>/root$vmstat 5 5\nprocs -----------memory---------- ---swap-- -----io---- --system-- -----cpu-----\nr  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n6  0      0 27900472 204216 28188356    0    0     0     9    1    2 11 14 75  0  0\n9  0      0 27900380 204228 28188360    0    0     0    13 33312 126221 22 20 58  0  0\n2  0      0 27900340 204240 28188364    0    0     0    10 32755 125566 22 20 58  0  0\n</code></pre><h2 id="字段说明" tabindex="-1"><a class="header-anchor" href="#字段说明" aria-hidden="true">#</a> 字段说明</h2><p>Procs（进程）:</p><p>: - r: 运行队列中进程数量 - b: 等待IO的进程数量</p><p>Memory（内存）:</p><p>: - swpd: 使用虚拟内存大小 - free: 可用内存大小 - buff: 用作缓冲的内存大小 - cache: 用作缓存的内存大小</p><p>Swap:</p><p>: - si: 每秒从交换区写到内存的大小 - so: 每秒写入交换区的内存大小</p><p>IO：（现在的Linux版本块的大小为1024bytes）</p><p>: - bi: 每秒读取的块数 - bo: 每秒写入的块数</p><p>system：</p><p>: - in: 每秒中断数，包括时钟中断 - cs: 每秒上下文切换数</p><p>CPU（以百分比表示）</p><p>: - us: 用户进程执行时间(user time) - sy: 系统进程执行时间(system time) - id: 空闲时间(包括IO等待时间) - wa: 等待IO时间</p>',19)],o={},r=(0,a(83744).Z)(o,[["render",function(t,e){return(0,i.wg)(),(0,i.iD)("div",null,s)}]])}}]);