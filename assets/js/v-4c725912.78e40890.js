"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[18007],{26155:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-4c725912","path":"/go-tutor/basics/go-mod.html","title":"go语言 mod模块(Modules)使用","lang":"zh-CN","frontmatter":{"summary":"go语言 mod模块(Modules)使用 \\" Go语言从诞生之初就一直有个被诟病的问题: 缺少一个行之有效的“官方”包依赖管理工具. 其原因是在Google内部，所有人都是在一个代码库上进行开发的,因此并不是非常需要.但是Go语言变成一个社区化的工程语言之后,这个问题被放大了.\\" 参考文章 go mod模块特点 go mod命令 1. 设置 GO111MO","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/go-tutor/basics/go-mod.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"go语言 mod模块(Modules)使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-07-29T07:25:09.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-07-29T07:25:09.000Z"}]]},"excerpt":"","headers":[{"level":3,"title":"1. 设置 GO111MODULE","slug":"_1-设置-go111module","children":[]},{"level":3,"title":"2. go模块使用说明","slug":"_2-go模块使用说明","children":[]},{"level":3,"title":"3. go mod模块示例","slug":"_3-go-mod模块示例","children":[]},{"level":2,"title":"4. 如何升级模块版本","slug":"_4-如何升级模块版本","children":[]},{"level":2,"title":"5. 一个模块多版本共存","slug":"_5-一个模块多版本共存","children":[]}],"git":{"createdTime":1659079509000,"updatedTime":1659079509000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.68,"words":1705},"filePathRelative":"go-tutor/basics/go-mod.md","localizedDate":"2022年7月29日"}')},88301:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var e=a(66252);const o=(0,e.uE)('<h1 id="go语言-mod模块-modules-使用" tabindex="-1"><a class="header-anchor" href="#go语言-mod模块-modules-使用" aria-hidden="true">#</a> go语言 mod模块(Modules)使用</h1><blockquote><p>Go语言从诞生之初就一直有个被诟病的问题: 缺少一个行之有效的“官方”包依赖管理工具. 其原因是在Google内部，所有人都是在一个代码库上进行开发的,因此并不是非常需要.但是Go语言变成一个社区化的工程语言之后,这个问题被放大了.</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token number">1.</span> 设置 GO111MODULE\n<span class="token number">2.</span> <span class="token keyword">go</span>模块使用说明\n<span class="token number">3.</span> <span class="token keyword">go</span> mod模块示例\n<span class="token number">4.</span> 如何升级模块版本\n<span class="token number">5.</span> 一个模块多版本共存\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),i={href:"https://www.melvinvivas.com/go-version-1-11-modules/",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("参考文章"),t=(0,e.uE)('<p><strong>go mod模块特点</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1. 模块是相关Go包的集合(即一个模块可以包含多个package,一个包package包含多个go源文件)\n2. go命令直接支持使用模块\n3. 模块中记录和解决对其他模块的依赖性\n4. 模块取代了旧的基于GOPATH的方法来指定\n5. 有利于程序维护\n6. 提高代码重用性(供他人使用)\n7. 一个模块多版本共存(即同时使用同一个模块多个版本,例如为了更好的升级模块,我们先修改一小部分代码用新的版本,当模块新版本稳定后,我们在全面升级)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>go mod命令</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>download    download modules to <span class="token builtin class-name">local</span> cache <span class="token punctuation">(</span>下载依赖的module到本地cache<span class="token punctuation">))</span>\nedit        edit go.mod from tools or scripts <span class="token punctuation">(</span>编辑go.mod文件<span class="token punctuation">)</span>\ngraph       print module requirement graph <span class="token punctuation">(</span>打印模块依赖图<span class="token punctuation">))</span>\ninit        initialize new module <span class="token keyword">in</span> current directory <span class="token punctuation">(</span>在当前⽂件夹下初始化⼀个新的模块,创建go.mod⽂件<span class="token punctuation">))</span>\ntidy        <span class="token function">add</span> missing and remove unused modules <span class="token punctuation">(</span>增加缺少的module,删除未⽤的module<span class="token punctuation">)</span>\nvendor      <span class="token function">make</span> vendored copy of dependencies <span class="token punctuation">(</span>将依赖复制到vendor下<span class="token punctuation">)</span>\nverify      verify dependencies have expected content <span class="token punctuation">(</span>校验依赖的HASH码<span class="token punctuation">)</span>\nwhy         explain why packages or modules are needed <span class="token punctuation">(</span>解释为什么需要依赖<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-设置-go111module" tabindex="-1"><a class="header-anchor" href="#_1-设置-go111module" aria-hidden="true">#</a> 1. 设置 GO111MODULE</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>可以用环境变量 GO111MODULE 开启或关闭模块支持，它有三个可选值：off、on、auto,默认值是 auto.\n<span class="token number">1</span>. <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>off 无模块支持,go 会从 GOPATH 和 vendor 文件夹寻找包.\n<span class="token number">2</span>. <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on 模块支持,go 会忽略 GOPATH 和 vendor 文件夹,只根据 go.mod 下载依赖.\n<span class="token number">3</span>. <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>auto 如果找到任何go.mod,即使在GOPATH内部也开启模块支持.\n<span class="token punctuation">(</span>注意: 在Go <span class="token number">1.13</span>之前，GO111MODULE<span class="token operator">=</span>auto永远不会在GOPATH中启用模块模式<span class="token punctuation">)</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-go模块使用说明" tabindex="-1"><a class="header-anchor" href="#_2-go模块使用说明" aria-hidden="true">#</a> 2. go模块使用说明</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">1</span>. <span class="token punctuation">(</span>GO111MODULE<span class="token operator">=</span>off,把项目放到<span class="token variable">$GOPATH</span>/src之外<span class="token punctuation">)</span>或者<span class="token punctuation">(</span>设置GO111MODULE<span class="token operator">=</span>on,把项目放到任意目录<span class="token punctuation">)</span>即可激活模块模式\n<span class="token number">2</span>. 在项目目录下创建模块: <span class="token string">&quot;go mod init 模块名&quot;</span>,创建模块后,会在模块所在的文件夹生成go.mod文件\n<span class="token number">3</span>. 然后在项目目录下运行命令: <span class="token string">&quot;go build&quot;</span> 、<span class="token string">&quot;go test&quot;</span> 或 <span class="token string">&quot;go run&quot;</span>执行时，会自己去修改go.mod文件，生成<span class="token string">&quot;go.sum&quot;</span>文件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-go-mod模块示例" tabindex="-1"><a class="header-anchor" href="#_3-go-mod模块示例" aria-hidden="true">#</a> 3. go mod模块示例</h3><h6 id="_3-1-创建模块-hellomod-go-mod-init-hellomod" tabindex="-1"><a class="header-anchor" href="#_3-1-创建模块-hellomod-go-mod-init-hellomod" aria-hidden="true">#</a> 3.1 创建模块 hellomod: go mod init &quot;hellomod&quot;</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 1. 在github上创建仓库 hellomod</span>\n<span class="token comment"># 为什么要创建创库, 为了其他人也可以使用这个模块</span>\n\n<span class="token comment"># 2. 进入examples目录</span>\n<span class="token builtin class-name">cd</span> examples \n\n<span class="token comment"># 3. 下载 hellomod 仓库</span>\n<span class="token function">git</span> clone git@github.com:qq1060656096/hellomod.git\n\n<span class="token comment"># 4. 进入 hellomod目录</span>\n<span class="token builtin class-name">cd</span> hellomod\n\n<span class="token comment"># 5. 创建模块</span>\ngo mod init <span class="token string">&quot;github.com/qq1060656096/hellomod&quot;</span>\n<span class="token comment"># 创建模块失败会提示: &quot;go: modules disabled inside GOPATH/src by GO111MODULE=auto; see &#39;go help modules&#39;&quot;</span>\n\n<span class="token comment"># 为什么创建模块失败</span>\n<span class="token comment"># 因为GO111MODULE默认值是auto, 在 GOPATH/src 之外的目录才开启模块支持</span>\n<span class="token comment"># 我们有2中方式解决以上问题</span>\n<span class="token comment">#   第1种: 在 GOPATH/src 之外的目录创建模块</span>\n<span class="token comment">#   第2种: 直接设置GO111MODULE=on 模块支持</span>\n\n<span class="token comment"># 这里我们直接使用第2种</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on\ngo mod init <span class="token string">&quot;github.com/qq1060656096/hellomod&quot;</span>\n<span class="token comment"># 创建模块成功会提示&quot;go: creating new go.mod: module github.com/qq1060656096/hellomod&quot;</span>\n<span class="token comment"># 模块创建后里面会有一个go.mod文件</span>\n\n<span class="token comment"># 6. 查看go.mod文件的内容</span>\n$ <span class="token function">cat</span> go.mod\nmodule github.com/qq1060656096/hellomod\n<span class="token comment"># 里面只有一行, 就定义的模块名字</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-2-hellomod模块目录下-创建hello-go文件-并增加以下内容" tabindex="-1"><a class="header-anchor" href="#_3-2-hellomod模块目录下-创建hello-go文件-并增加以下内容" aria-hidden="true">#</a> 3.2 hellomod模块目录下,创建hello.go文件, 并增加以下内容</h6><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> hellomod\n\n<span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n <span class="token keyword">return</span> <span class="token string">&quot;Hello World!&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-3-hellomod模块目录下-创建hello-test-go文件-并增加以下内容" tabindex="-1"><a class="header-anchor" href="#_3-3-hellomod模块目录下-创建hello-test-go文件-并增加以下内容" aria-hidden="true">#</a> 3.3 hellomod模块目录下,创建hello_test.go文件, 并增加以下内容</h6><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> hellomod\n\n<span class="token keyword">import</span> <span class="token string">&quot;testing&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">TestHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n want <span class="token operator">:=</span> <span class="token string">&quot;Hello World!&quot;</span>\n <span class="token keyword">if</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> want <span class="token punctuation">{</span>\n  t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello() != %s&quot;</span><span class="token punctuation">,</span> want<span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-4-hellomod模块目录下-运行模块测试-go-test-v-会输出以下内容" tabindex="-1"><a class="header-anchor" href="#_3-4-hellomod模块目录下-运行模块测试-go-test-v-会输出以下内容" aria-hidden="true">#</a> 3.4 hellomod模块目录下,运行模块测试 &quot;go test -v&quot;会输出以下内容</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">==</span><span class="token operator">=</span> RUN   TestHello\n--- PASS: TestHello <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>\nPASS\nok      github.com/qq1060656096/hellomod        <span class="token number">0</span>.004s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-5-提交-hellomod-模块代码到github" tabindex="-1"><a class="header-anchor" href="#_3-5-提交-hellomod-模块代码到github" aria-hidden="true">#</a> 3.5 提交 hellomod 模块代码到github</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 提交代码到github</span>\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> commit -m <span class="token string">&#39;aaa: go hello模块第一次提交&#39;</span>\n<span class="token function">git</span> push origin master\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-6-回到examples目录并创建一个模块测试-testmod" tabindex="-1"><a class="header-anchor" href="#_3-6-回到examples目录并创建一个模块测试-testmod" aria-hidden="true">#</a> 3.6 回到examples目录并创建一个模块测试 testmod</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 回到 examples 并创建 testmod 目录, 然后在进入 testmod 目录</span>\n<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/ <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> testmod <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> testmod\n<span class="token comment"># 创建 testmod 模块</span>\ngo mod init <span class="token string">&quot;testmod&quot;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-7-testmod-模块中创建-main-go-文件" tabindex="-1"><a class="header-anchor" href="#_3-7-testmod-模块中创建-main-go-文件" aria-hidden="true">#</a> 3.7 testmod 模块中创建 main.go 文件</h6><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n <span class="token string">&quot;fmt&quot;</span>\n <span class="token string">&quot;github.com/qq1060656096/hellomod&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hellomod<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-8-testmod-模块中执行命令-go-run-main-go" tabindex="-1"><a class="header-anchor" href="#_3-8-testmod-模块中执行命令-go-run-main-go" aria-hidden="true">#</a> 3.8 testmod 模块中执行命令: go run main.go</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\n<span class="token comment"># go run main.go</span>\n<span class="token comment"># 命令会输出以下内容</span>\ngo: finding github.com/qq1060656096/hellomod\ngo: downloading github.com/qq1060656096/hellomod\nHello World<span class="token operator">!</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-如何升级模块版本" tabindex="-1"><a class="header-anchor" href="#_4-如何升级模块版本" aria-hidden="true">#</a> 4. 如何升级模块版本</h2><h6 id="_4-1-修改-hellomod-模块-hello-go文件" tabindex="-1"><a class="header-anchor" href="#_4-1-修改-hellomod-模块-hello-go文件" aria-hidden="true">#</a> 4.1 修改 hellomod 模块 hello.go文件</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>package hellomod\n\nfunc Hello<span class="token punctuation">(</span><span class="token punctuation">)</span> string <span class="token punctuation">{</span>\n <span class="token builtin class-name">return</span> <span class="token string">&quot;v2: Hello World!&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4-2-修改-hellomod-模块-hello-test-go-文件" tabindex="-1"><a class="header-anchor" href="#_4-2-修改-hellomod-模块-hello-test-go-文件" aria-hidden="true">#</a> 4.2 修改 hellomod 模块 hello_test.go 文件</h6><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> hellomod\n\n\n<span class="token keyword">import</span> <span class="token string">&quot;testing&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">TestHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n want <span class="token operator">:=</span> <span class="token string">&quot;v2: Hello World!&quot;</span>\n <span class="token keyword">if</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> want <span class="token punctuation">{</span>\n  t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello() != %s&quot;</span><span class="token punctuation">,</span> want<span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4-3-提交-hellomod-模块代码" tabindex="-1"><a class="header-anchor" href="#_4-3-提交-hellomod-模块代码" aria-hidden="true">#</a> 4.3 提交 hellomod 模块代码</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> commit -m <span class="token string">&quot;hellomod v2版本提交&quot;</span>\n<span class="token function">git</span> tag -m <span class="token string">&quot;v2.0.0&quot;</span> v2.0.0\n<span class="token function">git</span> push origin master --tags\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4-4-进入-testmod-模块目录-升级模块" tabindex="-1"><a class="header-anchor" href="#_4-4-进入-testmod-模块目录-升级模块" aria-hidden="true">#</a> 4.4 进入 testmod 模块目录, 升级模块</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/ <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> testmod\n<span class="token comment"># 更新模块, 注意更新模块会更改 go.mod 文件对应模块的版本, 当然你也可以手动编辑版本号</span>\ngo mod edit -require github.com/qq1060656096/hellomod@v2.0.0\n\ngo run main.go\n<span class="token comment"># 命令会输出: &quot;v2: Hello World!&quot;</span>\n<span class="token comment"># 现在 hellomod 模块以及使用v2.0.0的代码了</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-一个模块多版本共存" tabindex="-1"><a class="header-anchor" href="#_5-一个模块多版本共存" aria-hidden="true">#</a> 5. 一个模块多版本共存</h2><p><strong>注意</strong></p><blockquote><p>为了更好的升级模块,我们先修改一小部分代码用新的版本,当模块新版本稳定后,我们在全面升级</p></blockquote><h6 id="_5-1-修改-hellomod-模块-go-mod-文件" tabindex="-1"><a class="header-anchor" href="#_5-1-修改-hellomod-模块-go-mod-文件" aria-hidden="true">#</a> 5.1 修改 hellomod 模块 go.mod 文件</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>module github.com/qq1060656096/hellomod/v3\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_5-2-修改-hellomod-模块-hello-go-文件" tabindex="-1"><a class="header-anchor" href="#_5-2-修改-hellomod-模块-hello-go-文件" aria-hidden="true">#</a> 5.2 修改 hellomod 模块 hello.go 文件</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>package hellomod\n\nfunc Hello<span class="token punctuation">(</span><span class="token punctuation">)</span> string <span class="token punctuation">{</span>\n <span class="token builtin class-name">return</span> <span class="token string">&quot;v2: Hello World!&quot;</span>\n<span class="token punctuation">}</span>\n\nfunc HelloV3<span class="token punctuation">(</span><span class="token punctuation">)</span> string <span class="token punctuation">{</span>\n <span class="token builtin class-name">return</span> <span class="token string">&quot;v3.HelloV3: Hello World!&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_5-3-提交-hellomod-模块代码" tabindex="-1"><a class="header-anchor" href="#_5-3-提交-hellomod-模块代码" aria-hidden="true">#</a> 5.3 提交 hellomod 模块代码</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -b v3\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> commit -m <span class="token string">&quot;hellomod v3版本提交&quot;</span>\n<span class="token function">git</span> push origin v3\n<span class="token function">git</span> tag -m <span class="token string">&quot;v3.0.0&quot;</span> v3.0.0\n<span class="token function">git</span> push origin master --tags\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_5-3-testmod-模块中修改-main-go-文件" tabindex="-1"><a class="header-anchor" href="#_5-3-testmod-模块中修改-main-go-文件" aria-hidden="true">#</a> 5.3 testmod 模块中修改 main.go 文件</h6><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n <span class="token string">&quot;fmt&quot;</span>\n <span class="token string">&quot;github.com/qq1060656096/hellomod&quot;</span>\n hellomodV3 <span class="token string">&quot;github.com/qq1060656096/hellomod/v3&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hellomod<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hellomodV3<span class="token punctuation">.</span><span class="token function">HelloV3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_5-4-testmod-模块中执行命令-go-run-main-go" tabindex="-1"><a class="header-anchor" href="#_5-4-testmod-模块中执行命令-go-run-main-go" aria-hidden="true">#</a> 5.4 testmod 模块中执行命令: go run main.go</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/ <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> testmod\n<span class="token comment"># 添加v3版本模块, 注意更新模块会更改 go.mod 文件对应模块的版本, 当然你也可以手动编辑版本号</span>\ngo mod edit -require github.com/qq1060656096/hellomod/v3@v3.0.0\n<span class="token comment"># 如果你没有执行 &quot;go mod edit -require github.com/qq1060656096/hellomod/v3@v3.0.0&quot; 命令, go 在构建的时候也会自动查到依赖</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>go run main.go执行结果</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>                                                 \nHello World<span class="token operator">!</span>\nv3<span class="token punctuation">.</span>HelloV3<span class="token punctuation">:</span> Hello World<span class="token operator">!</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',49),d={},c=(0,a(83744).Z)(d,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[o,(0,e._)("p",null,[(0,e._)("a",i,[l,(0,e.Wm)(a)])]),t])}]])}}]);