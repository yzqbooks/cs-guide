"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[5037],{92608:(e,t,a)=>{a.r(t),a.d(t,{data:()=>s});const s=JSON.parse('{"key":"v-6a38aeb2","path":"/java-tutor/stackoverflow/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes.html","title":"如何测试 private 方法，变量或者内部类","lang":"zh-CN","frontmatter":{"summary":"如何测试 private 方法，变量或者内部类 当你需要测试一个遗留的应用程序，且不能更改方法的可见性时，那么，测试私有方法/属性的最好方式就是使用反射。 实际测试时，可以通过一些反射辅助类，设置和获取私有(静态)的变量、调用私有(静态)方法。遵循下面的窍门，你可以很好地处理私有方法和变量的测试。 私有变量: \\" note：\\" \\" 1. targetClas","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/stackoverflow/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"如何测试 private 方法，变量或者内部类"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-03-22T11:07:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-03-22T11:07:21.000Z"}]]},"excerpt":"","headers":[],"git":{"createdTime":1647947241000,"updatedTime":1647947241000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":0.74,"words":221},"filePathRelative":"java-tutor/stackoverflow/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes.md","localizedDate":"2022年3月22日"}')},8089:(e,t,a)=>{a.r(t),a.d(t,{default:()=>m});var s=a(66252);const r=(0,s._)("h1",{id:"如何测试-private-方法-变量或者内部类",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#如何测试-private-方法-变量或者内部类","aria-hidden":"true"},"#"),(0,s.Uk)(" 如何测试 private 方法，变量或者内部类")],-1),i=(0,s.Uk)("当你需要测试一个遗留的应用程序，且不能更改方法的可见性时，那么，测试私有方法/属性的最好方式就是使用"),o={href:"https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29",target:"_blank",rel:"noopener noreferrer"},l=(0,s.Uk)("反射"),d=(0,s.Uk)("。"),n=(0,s.uE)('<p>实际测试时，可以通过一些反射辅助类，设置和获取私有(静态)的变量、调用私有(静态)方法。遵循下面的窍门，你可以很好地处理私有方法和变量的测试。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Method method = targetClass.getDeclaredMethod(methodName, argClasses);\nmethod.setAccessible(true);\nreturn method.invoke(targetObject, argObjects);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>私有变量:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Field field = targetClass.getDeclaredField(fieldName);\nfield.setAccessible(true);\nfield.set(object, value);\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>note：</p><ol><li><code>targetClass.getDeclaredMethod(methodName, argClasses)</code>这个方法能让你获取到私有方法。<code>getDeclaredField</code>让你获取到私有变量</li><li>在对私有变量（方法）进行处理前，需要先<code>setAccessible(true)</code></li></ol></blockquote><p>stackoverflow原址：http://stackoverflow.com/questions/34571/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes</p>',6),c={},m=(0,a(83744).Z)(c,[["render",function(e,t){const a=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[r,(0,s._)("p",null,[i,(0,s._)("a",o,[l,(0,s.Wm)(a)]),d]),n])}]])}}]);