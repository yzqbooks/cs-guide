"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[18538],{89274:(e,s,i)=>{i.r(s),i.d(s,{data:()=>n});const n=JSON.parse('{"key":"v-7d766c5c","path":"/java-tutor/orm-tutor/redis-tutor.html","title":"RedisTemplate常用方法总结","lang":"zh-CN","frontmatter":{"summary":"RedisTemplate常用方法总结 Redis常用的数据类型 String; Hash; List; Set; zSet; Sorted set; https://blog.csdn.net/lydms/article/details/105224210 String类型 判断是否有key所对应的值，有则返回true，没有则返回false 有则取出key","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/orm-tutor/redis-tutor.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"RedisTemplate常用方法总结"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-04-05T15:17:32.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-04-05T15:17:32.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"Redis常用的数据类型","slug":"redis常用的数据类型","children":[]},{"level":2,"title":"String类型","slug":"string类型","children":[]},{"level":2,"title":"Hash类型","slug":"hash类型","children":[]},{"level":2,"title":"List类型","slug":"list类型","children":[]},{"level":2,"title":"Set类型","slug":"set类型","children":[]},{"level":2,"title":"zSet类型","slug":"zset类型","children":[]},{"level":2,"title":"Redis常用的数据类型","slug":"redis常用的数据类型-1","children":[]},{"level":2,"title":"String类型","slug":"string类型-1","children":[]},{"level":2,"title":"Hash类型","slug":"hash类型-1","children":[]},{"level":2,"title":"List类型","slug":"list类型-1","children":[]},{"level":2,"title":"Set类型","slug":"set类型-1","children":[]},{"level":2,"title":"zSet类型","slug":"zset类型-1","children":[]}],"git":{"createdTime":1649171852000,"updatedTime":1649171852000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":15.35,"words":4606},"filePathRelative":"java-tutor/orm-tutor/redis-tutor.md","localizedDate":"2022年4月5日"}')},94006:(e,s,i)=>{i.r(s),i.d(s,{default:()=>f});var n=i(66252);const t=(0,n._)("h1",{id:"redistemplate常用方法总结",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#redistemplate常用方法总结","aria-hidden":"true"},"#"),(0,n.Uk)(" RedisTemplate常用方法总结")],-1),a=(0,n._)("h2",{id:"redis常用的数据类型",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#redis常用的数据类型","aria-hidden":"true"},"#"),(0,n.Uk)(" Redis常用的数据类型")],-1),d=(0,n._)("li",null,"String",-1),r=(0,n._)("li",null,"Hash",-1),l=(0,n._)("li",null,"List",-1),u=(0,n._)("li",null,"Set",-1),o=(0,n._)("li",null,"zSet",-1),v=(0,n.Uk)("Sorted set "),c={href:"https://blog.csdn.net/lydms/article/details/105224210",target:"_blank",rel:"noopener noreferrer"},p=(0,n.Uk)("https://blog.csdn.net/lydms/article/details/105224210"),g=(0,n.uE)('<h2 id="string类型" tabindex="-1"><a class="header-anchor" href="#string类型" aria-hidden="true">#</a> String类型</h2><p><strong>判断是否有key所对应的值，有则返回true，没有则返回false</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>有则取出key值所对应的值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().get(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除单个key值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.delete(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>批量删除key</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.delete(keys) //其中keys:Collection&lt;K&gt; keys\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将当前传入的key值序列化为byte[]类型</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.dump(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置过期时间</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean expire(String key, long timeout, TimeUnit unit) {\n    return redisTemplate.expire(key, timeout, unit);\n }\n\n public Boolean expireAt(String key, Date date) {\n    return redisTemplate.expireAt(key, date);\n  }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查找匹配的key值，返回一个Set集合类型</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Set&lt;String&gt; getPatternKey(String pattern) {\n    return redisTemplate.keys(pattern);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改redis中key的名称</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> public void renameKey(String oldKey, String newKey) {\n    redisTemplate.rename(oldKey, newKey);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>返回传入key所存储的值的类型</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public DataType getKeyType(String key) {\n    return redisTemplate.type(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果旧值存在时，将旧值改为新值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean renameOldKeyIfAbsent(String oldKey, String newKey) {\n    return redisTemplate.renameIfAbsent(oldKey, newKey);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从redis中随机取出一个key</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.randomKey()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>返回当前key所对应的剩余过期时间</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> public Long getExpire(String key) {\n    return redisTemplate.getExpire(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>返回剩余过期时间并且指定时间单位</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Long getExpire(String key, TimeUnit unit) {\n    return redisTemplate.getExpire(key, unit);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将key持久化保存</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean persistKey(String key) {\n    return redisTemplate.persist(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将当前数据库的key移动到指定redis中数据库当中</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean moveToDbIndex(String key, int dbIndex) {\n    return redisTemplate.move(key, dbIndex);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置当前的key以及value值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().set(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置当前的key以及value值并且设置过期时间</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().set(key, value, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>返回key中字符串的子字符</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public String getCharacterRange(String key, long start, long end) {\n    return redisTemplate.opsForValue().get(key, start, end);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将旧的key设置为value，并且返回旧的key</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public String setKeyAsValue(String key, String value) {\n    return redisTemplate.opsForValue().getAndSet(key, value);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>批量获取值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> public List&lt;String&gt; multiGet(Collection&lt;String&gt; keys) {\n    return redisTemplate.opsForValue().multiGet(keys);\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在原有的值基础上新增字符串到末尾</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().append(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>以增量的方式将double值存储在变量中</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> public Double incrByDouble(String key, double increment) {\n    return redisTemplate.opsForValue().increment(key, increment);\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过increment(K key, long delta)方法以增量方式存储long值（正值则自增，负值则自减）</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Long incrBy(String key, long increment) {\n    return redisTemplate.opsForValue().increment(key, increment);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果对应的map集合名称不存在，则添加否则不做修改</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Map valueMap = new HashMap();  \nvalueMap.put(&quot;valueMap1&quot;,&quot;map1&quot;);  \nvalueMap.put(&quot;valueMap2&quot;,&quot;map2&quot;);  \nvalueMap.put(&quot;valueMap3&quot;,&quot;map3&quot;);  \nredisTemplate.opsForValue().multiSetIfAbsent(valueMap);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置map集合到redis</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Map valueMap = new HashMap();  \nvalueMap.put(&quot;valueMap1&quot;,&quot;map1&quot;);  \nvalueMap.put(&quot;valueMap2&quot;,&quot;map2&quot;);  \nvalueMap.put(&quot;valueMap3&quot;,&quot;map3&quot;);  \nredisTemplate.opsForValue().multiSet(valueMap);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取字符串的长度</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().size(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().set(key, value, offset)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重新设置key对应的值，如果存在返回false，否则返回true</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().setIfAbsent(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将值 value 关联到 key,并将 key 的过期时间设为 timeout</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().set(key, value, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将二进制第offset位值变为value</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().setBit(key, offset, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>对key所储存的字符串值，获取指定偏移量上的位(bit)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().getBit(key, offset)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="hash类型" tabindex="-1"><a class="header-anchor" href="#hash类型" aria-hidden="true">#</a> Hash类型</h2><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。 Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）。</p><p><strong>获取变量中的指定map键是否有值,如果存在该map键则获取值，没有则返回null。</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForHash().get(key, field)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取变量中的键值对</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Map&lt;Object, Object&gt; hGetAll(String key) {\n    return redisTemplate.opsForHash().entries(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>新增hashMap值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForHash().put(key, hashKey, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>以map集合的形式添加键值对</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public void hPutAll(String key, Map&lt;String, String&gt; maps) {\n    redisTemplate.opsForHash().putAll(key, maps);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>仅当hashKey不存在时才设置</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean hashPutIfAbsent(String key, String hashKey, String value) {\n    return redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除一个或者多个hash表字段</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Long hashDelete(String key, Object... fields) {\n    return redisTemplate.opsForHash().delete(key, fields);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看hash表中指定字段是否存在</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public boolean hashExists(String key, String field) {\n    return redisTemplate.opsForHash().hasKey(key, field);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>给哈希表key中的指定字段的整数值加上增量increment</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Long hashIncrBy(String key, Object field, long increment) {\n    return redisTemplate.opsForHash().increment(key, field, increment);\n}\n\n public Double hIncrByDouble(String key, Object field, double delta) {\n    return redisTemplate.opsForHash().increment(key, field, delta);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取所有hash表中字段</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForHash().keys(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取hash表中字段的数量</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForHash().size(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取hash表中存在的所有的值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public List&lt;Object&gt; hValues(String key) {\n    return redisTemplate.opsForHash().values(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匹配获取键值对，ScanOptions.NONE为获取全部键对</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Cursor&lt;Entry&lt;Object, Object&gt;&gt; hashScan(String key, ScanOptions options) {\n    return redisTemplate.opsForHash().scan(key, options);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="list类型" tabindex="-1"><a class="header-anchor" href="#list类型" aria-hidden="true">#</a> List类型</h2><p><strong>通过索引获取列表中的元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().index(key, index)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取列表指定范围内的元素(start开始位置, 0是开始位置，end 结束位置, -1返回所有)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().range(key, start, end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>存储在list的头部，即添加一个就把它放在最前面的索引处</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPush(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>把多个值存入List中(value可以是多个值，也可以是一个Collection value)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPushAll(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>List存在的时候再加入</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPushIfPresent(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>如果pivot处值存在则在pivot前面添加</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPush(key, pivot, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>按照先进先出的顺序来添加(value可以是多个值，或者是Collection var2)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().rightPush(key, value)\n\nredisTemplate.opsForList().rightPushAll(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在pivot元素的右边添加值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().rightPush(key, pivot, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置指定索引处元素的值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().set(key, index, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>移除并获取列表中第一个元素(如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPop(key)\n\nredisTemplate.opsForList().leftPop(key, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>移除并获取列表最后一个元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().rightPop(key)\n\nredisTemplate.opsForList().rightPop(key, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey)\n\nredisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除集合中值等于value的元素(index=0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素; index&lt;0, 从尾部开始删除第一个值等于value的元素)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().remove(key, index, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将List列表进行剪裁</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().trim(key, start, end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取当前key的List列表长度</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().size(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="set类型" tabindex="-1"><a class="header-anchor" href="#set类型" aria-hidden="true">#</a> Set类型</h2><p><strong>添加元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().add(key, values)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>移除元素(单个值、多个值)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().remove(key, values)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除并且返回一个随机的元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().pop(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合的大小</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().size(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>判断集合是否包含value</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().isMember(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取两个集合的交集(key对应的无序集合与otherKey对应的无序集合求交集)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().intersect(key, otherKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取多个集合的交集(Collection var2)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().intersect(key, otherKeys)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>key集合与otherKey集合的交集存储到destKey集合中(其中otherKey可以为单个值或者集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().intersectAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>key集合与多个集合的交集存储到destKey无序集合中</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().intersectAndStore(key, otherKeys, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取两个或者多个集合的并集(otherKeys可以为单个值或者是集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().union(key, otherKeys)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>key集合与otherKey集合的并集存储到destKey中(otherKeys可以为单个值或者是集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取两个或者多个集合的差集(otherKeys可以为单个值或者是集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().difference(key, otherKeys)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>差集存储到destKey中(otherKeys可以为单个值或者集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().differenceAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>随机获取集合中的一个元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().randomMember(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合中的所有元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().members(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>随机获取集合中count个元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().randomMembers(key, count)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取多个key无序集合中的元素（去重），count表示个数</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().distinctRandomMembers(key, count)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>遍历set类似于Interator(ScanOptions.NONE为显示所有的)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().scan(key, options)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="zset类型" tabindex="-1"><a class="header-anchor" href="#zset类型" aria-hidden="true">#</a> zSet类型</h2><p><strong>ZSetOperations提供了一系列方法对有序集合进行操作</strong><strong>添加元素(有序集合是按照元素的score值由小到大进行排列)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().add(key, value, score)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除对应的value,value可以为多个值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().remove(key, values)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>增加元素的score值，并返回增加后的值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().incrementScore(key, value, delta)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>返回元素在集合的排名,有序集合是按照元素的score值由小到大排列</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().rank(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>返回元素在集合的排名,按元素的score值由大到小排列</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().reverseRank(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合中给定区间的元素(start 开始位置，end 结束位置, -1查询所有)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().reverseRangeWithScores(key, start,end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>按照Score值查询集合中的元素，结果从小到大排序</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().reverseRangeByScore(key, min, max)\nredisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, min, max)\n//返回值为:Set&lt;ZSetOperations.TypedTuple&lt;V&gt;&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从高到低的排序集中获取分数在最小和最大值之间的元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().reverseRangeByScore(key, min, max, start, end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>根据score值获取集合元素数量</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().count(key, min, max)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合的大小</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().size(key)\nredisTemplate.opsForZSet().zCard(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取集合中key、value元素对应的score值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().score(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>移除指定索引位置处的成员</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().removeRange(key, start, end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>移除指定score范围的集合成员</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().removeRangeByScore(key, min, max)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取key和otherKey的并集并存储在destKey中（其中otherKeys可以为单个字符串或者字符串集合）</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取key和otherKey的交集并存储在destKey中（其中otherKeys可以为单个字符串或者字符串集合）</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().intersectAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>遍历集合（和iterator一模一样）</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> Cursor&lt;TypedTuple&lt;Object&gt;&gt; scan = opsForZSet.scan(&quot;test3&quot;, ScanOptions.NONE);\n        while (scan.hasNext()){\n            ZSetOperations.TypedTuple&lt;Object&gt; item = scan.next();\n            System.out.println(item.getValue() + &quot;:&quot; + item.getScore());\n        }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',190),m=(0,n.Uk)("参考："),b={href:"https://github.com/nuptkwz/notes/tree/master/technology/redis",target:"_blank",rel:"noopener noreferrer"},x=(0,n.Uk)("https://github.com/nuptkwz/notes/tree/master/technology/redis"),h=(0,n._)("strong",null,"------------恢复内容开始------------",-1),y=(0,n.uE)('<h2 id="redis常用的数据类型-1" tabindex="-1"><a class="header-anchor" href="#redis常用的数据类型-1" aria-hidden="true">#</a> Redis常用的数据类型</h2><ul><li>String</li><li>Hash</li><li>List</li><li>Set</li><li>zSet</li><li>Sorted set</li></ul><h2 id="string类型-1" tabindex="-1"><a class="header-anchor" href="#string类型-1" aria-hidden="true">#</a> String类型</h2><p><strong>判断是否有key所对应的值，有则返回true，没有则返回false</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.hasKey(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>有则取出key值所对应的值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().get(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除单个key值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.delete(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>批量删除key</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.delete(keys) //其中keys:Collection&lt;K&gt; keys\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将当前传入的key值序列化为byte[]类型</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.dump(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置过期时间</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean expire(String key, long timeout, TimeUnit unit) {\n    return redisTemplate.expire(key, timeout, unit);\n }\n\n public Boolean expireAt(String key, Date date) {\n    return redisTemplate.expireAt(key, date);\n  }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查找匹配的key值，返回一个Set集合类型</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Set&lt;String&gt; getPatternKey(String pattern) {\n    return redisTemplate.keys(pattern);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改redis中key的名称</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> public void renameKey(String oldKey, String newKey) {\n    redisTemplate.rename(oldKey, newKey);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>返回传入key所存储的值的类型</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public DataType getKeyType(String key) {\n    return redisTemplate.type(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果旧值存在时，将旧值改为新值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean renameOldKeyIfAbsent(String oldKey, String newKey) {\n    return redisTemplate.renameIfAbsent(oldKey, newKey);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从redis中随机取出一个key</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.randomKey()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>返回当前key所对应的剩余过期时间</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> public Long getExpire(String key) {\n    return redisTemplate.getExpire(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>返回剩余过期时间并且指定时间单位</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Long getExpire(String key, TimeUnit unit) {\n    return redisTemplate.getExpire(key, unit);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将key持久化保存</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean persistKey(String key) {\n    return redisTemplate.persist(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将当前数据库的key移动到指定redis中数据库当中</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean moveToDbIndex(String key, int dbIndex) {\n    return redisTemplate.move(key, dbIndex);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置当前的key以及value值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().set(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置当前的key以及value值并且设置过期时间</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().set(key, value, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>返回key中字符串的子字符</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public String getCharacterRange(String key, long start, long end) {\n    return redisTemplate.opsForValue().get(key, start, end);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将旧的key设置为value，并且返回旧的key</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public String setKeyAsValue(String key, String value) {\n    return redisTemplate.opsForValue().getAndSet(key, value);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>批量获取值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> public List&lt;String&gt; multiGet(Collection&lt;String&gt; keys) {\n    return redisTemplate.opsForValue().multiGet(keys);\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在原有的值基础上新增字符串到末尾</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().append(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>以增量的方式将double值存储在变量中</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> public Double incrByDouble(String key, double increment) {\n    return redisTemplate.opsForValue().increment(key, increment);\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过increment(K key, long delta)方法以增量方式存储long值（正值则自增，负值则自减）</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Long incrBy(String key, long increment) {\n    return redisTemplate.opsForValue().increment(key, increment);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果对应的map集合名称不存在，则添加否则不做修改</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Map valueMap = new HashMap();  \nvalueMap.put(&quot;valueMap1&quot;,&quot;map1&quot;);  \nvalueMap.put(&quot;valueMap2&quot;,&quot;map2&quot;);  \nvalueMap.put(&quot;valueMap3&quot;,&quot;map3&quot;);  \nredisTemplate.opsForValue().multiSetIfAbsent(valueMap);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置map集合到redis</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Map valueMap = new HashMap();  \nvalueMap.put(&quot;valueMap1&quot;,&quot;map1&quot;);  \nvalueMap.put(&quot;valueMap2&quot;,&quot;map2&quot;);  \nvalueMap.put(&quot;valueMap3&quot;,&quot;map3&quot;);  \nredisTemplate.opsForValue().multiSet(valueMap);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取字符串的长度</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().size(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().set(key, value, offset)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重新设置key对应的值，如果存在返回false，否则返回true</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().setIfAbsent(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将值 value 关联到 key,并将 key 的过期时间设为 timeout</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().set(key, value, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将二进制第offset位值变为value</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().setBit(key, offset, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>对key所储存的字符串值，获取指定偏移量上的位(bit)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForValue().getBit(key, offset)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="hash类型-1" tabindex="-1"><a class="header-anchor" href="#hash类型-1" aria-hidden="true">#</a> Hash类型</h2><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。 Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）。</p><p><strong>获取变量中的指定map键是否有值,如果存在该map键则获取值，没有则返回null。</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForHash().get(key, field)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取变量中的键值对</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Map&lt;Object, Object&gt; hGetAll(String key) {\n    return redisTemplate.opsForHash().entries(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>新增hashMap值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForHash().put(key, hashKey, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>以map集合的形式添加键值对</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public void hPutAll(String key, Map&lt;String, String&gt; maps) {\n    redisTemplate.opsForHash().putAll(key, maps);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>仅当hashKey不存在时才设置</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Boolean hashPutIfAbsent(String key, String hashKey, String value) {\n    return redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除一个或者多个hash表字段</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Long hashDelete(String key, Object... fields) {\n    return redisTemplate.opsForHash().delete(key, fields);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看hash表中指定字段是否存在</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public boolean hashExists(String key, String field) {\n    return redisTemplate.opsForHash().hasKey(key, field);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>给哈希表key中的指定字段的整数值加上增量increment</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Long hashIncrBy(String key, Object field, long increment) {\n    return redisTemplate.opsForHash().increment(key, field, increment);\n}\n\n public Double hIncrByDouble(String key, Object field, double delta) {\n    return redisTemplate.opsForHash().increment(key, field, delta);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取所有hash表中字段</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForHash().keys(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取hash表中字段的数量</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForHash().size(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取hash表中存在的所有的值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public List&lt;Object&gt; hValues(String key) {\n    return redisTemplate.opsForHash().values(key);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匹配获取键值对，ScanOptions.NONE为获取全部键对</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public Cursor&lt;Entry&lt;Object, Object&gt;&gt; hashScan(String key, ScanOptions options) {\n    return redisTemplate.opsForHash().scan(key, options);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="list类型-1" tabindex="-1"><a class="header-anchor" href="#list类型-1" aria-hidden="true">#</a> List类型</h2><p><strong>通过索引获取列表中的元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().index(key, index)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取列表指定范围内的元素(start开始位置, 0是开始位置，end 结束位置, -1返回所有)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().range(key, start, end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>存储在list的头部，即添加一个就把它放在最前面的索引处</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPush(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>把多个值存入List中(value可以是多个值，也可以是一个Collection value)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPushAll(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>List存在的时候再加入</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPushIfPresent(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>如果pivot处值存在则在pivot前面添加</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPush(key, pivot, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>按照先进先出的顺序来添加(value可以是多个值，或者是Collection var2)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().rightPush(key, value)\n\nredisTemplate.opsForList().rightPushAll(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在pivot元素的右边添加值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().rightPush(key, pivot, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置指定索引处元素的值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().set(key, index, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>移除并获取列表中第一个元素(如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().leftPop(key)\n\nredisTemplate.opsForList().leftPop(key, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>移除并获取列表最后一个元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().rightPop(key)\n\nredisTemplate.opsForList().rightPop(key, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey)\n\nredisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey, timeout, unit)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除集合中值等于value的元素(index=0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素; index&lt;0, 从尾部开始删除第一个值等于value的元素)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().remove(key, index, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将List列表进行剪裁</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().trim(key, start, end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取当前key的List列表长度</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForList().size(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="set类型-1" tabindex="-1"><a class="header-anchor" href="#set类型-1" aria-hidden="true">#</a> Set类型</h2><p><strong>添加元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().add(key, values)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>移除元素(单个值、多个值)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().remove(key, values)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除并且返回一个随机的元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().pop(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合的大小</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().size(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>判断集合是否包含value</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().isMember(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取两个集合的交集(key对应的无序集合与otherKey对应的无序集合求交集)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().intersect(key, otherKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取多个集合的交集(Collection var2)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().intersect(key, otherKeys)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>key集合与otherKey集合的交集存储到destKey集合中(其中otherKey可以为单个值或者集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().intersectAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>key集合与多个集合的交集存储到destKey无序集合中</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().intersectAndStore(key, otherKeys, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取两个或者多个集合的并集(otherKeys可以为单个值或者是集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().union(key, otherKeys)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>key集合与otherKey集合的并集存储到destKey中(otherKeys可以为单个值或者是集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取两个或者多个集合的差集(otherKeys可以为单个值或者是集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().difference(key, otherKeys)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>差集存储到destKey中(otherKeys可以为单个值或者集合)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().differenceAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>随机获取集合中的一个元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().randomMember(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合中的所有元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().members(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>随机获取集合中count个元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().randomMembers(key, count)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取多个key无序集合中的元素（去重），count表示个数</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().distinctRandomMembers(key, count)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>遍历set类似于Interator(ScanOptions.NONE为显示所有的)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForSet().scan(key, options)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="zset类型-1" tabindex="-1"><a class="header-anchor" href="#zset类型-1" aria-hidden="true">#</a> zSet类型</h2><p><strong>ZSetOperations提供了一系列方法对有序集合进行操作</strong><strong>添加元素(有序集合是按照元素的score值由小到大进行排列)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().add(key, value, score)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除对应的value,value可以为多个值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().remove(key, values)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>增加元素的score值，并返回增加后的值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().incrementScore(key, value, delta)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>返回元素在集合的排名,有序集合是按照元素的score值由小到大排列</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().rank(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>返回元素在集合的排名,按元素的score值由大到小排列</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().reverseRank(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合中给定区间的元素(start 开始位置，end 结束位置, -1查询所有)</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().reverseRangeWithScores(key, start,end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>按照Score值查询集合中的元素，结果从小到大排序</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().reverseRangeByScore(key, min, max)\nredisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, min, max)\n//返回值为:Set&lt;ZSetOperations.TypedTuple&lt;V&gt;&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从高到低的排序集中获取分数在最小和最大值之间的元素</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().reverseRangeByScore(key, min, max, start, end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>根据score值获取集合元素数量</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().count(key, min, max)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合的大小</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().size(key)\nredisTemplate.opsForZSet().zCard(key)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取集合中key、value元素对应的score值</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().score(key, value)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>移除指定索引位置处的成员</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().removeRange(key, start, end)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>移除指定score范围的集合成员</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().removeRangeByScore(key, min, max)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取key和otherKey的并集并存储在destKey中（其中otherKeys可以为单个字符串或者字符串集合）</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取key和otherKey的交集并存储在destKey中（其中otherKeys可以为单个字符串或者字符串集合）</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redisTemplate.opsForZSet().intersectAndStore(key, otherKey, destKey)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>遍历集合（和iterator一模一样）</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> Cursor&lt;TypedTuple&lt;Object&gt;&gt; scan = opsForZSet.scan(&quot;test3&quot;, ScanOptions.NONE);\n        while (scan.hasNext()){\n            ZSetOperations.TypedTuple&lt;Object&gt; item = scan.next();\n            System.out.println(item.getValue() + &quot;:&quot; + item.getScore());\n        }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',192),k=(0,n.Uk)("参考："),S={href:"https://github.com/nuptkwz/notes/tree/master/technology/redis",target:"_blank",rel:"noopener noreferrer"},T=(0,n.Uk)("https://github.com/nuptkwz/notes/tree/master/technology/redis"),F=(0,n._)("strong",null,"------------恢复内容结束------------",-1),K={},f=(0,i(83744).Z)(K,[["render",function(e,s){const i=(0,n.up)("ExternalLinkIcon");return(0,n.wg)(),(0,n.iD)("div",null,[t,a,(0,n._)("ul",null,[d,r,l,u,o,(0,n._)("li",null,[v,(0,n._)("a",c,[p,(0,n.Wm)(i)])])]),g,(0,n._)("p",null,[m,(0,n._)("a",b,[x,(0,n.Wm)(i)]),h]),y,(0,n._)("p",null,[k,(0,n._)("a",S,[T,(0,n.Wm)(i)]),F])])}]])}}]);