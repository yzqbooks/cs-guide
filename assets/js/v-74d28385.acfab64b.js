"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[32490],{89749:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-74d28385","path":"/java-tutor/springboot/spring-errors/errors.html","title":"springboot错误","lang":"zh-CN","frontmatter":{"summary":"springboot错误 yaml错误 这是idea没有识别出来项目,需要重新import一下 解决方案： failed to load response data 当需要根据后台传回地址跳转页面时 即使使用preserve log 可以查看上一个页面获取地址请求，但是此时请求返回值为failed to load response data 当关闭页面跳转可","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/springboot/spring-errors/errors.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"springboot错误"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yzqdev.github.io/cs-guide/cs-guide/"}],["meta",{"property":"og:updated_time","content":"2022-06-18T06:54:45.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"springboot错误"}],["meta",{"property":"article:modified_time","content":"2022-06-18T06:54:45.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"yaml错误","slug":"yaml错误","children":[]},{"level":2,"title":"failed to load response data","slug":"failed-to-load-response-data","children":[]},{"level":2,"title":"一直是cors的错误","slug":"一直是cors的错误","children":[]},{"level":2,"title":"Springboot使用alibaba的fastJson,@JSONField不起作用的问题","slug":"springboot使用alibaba的fastjson-jsonfield不起作用的问题","children":[]},{"level":2,"title":"springboot多模块运行","slug":"springboot多模块运行","children":[]},{"level":2,"title":"LocalDatetime传参数据不对","slug":"localdatetime传参数据不对","children":[{"level":3,"title":"post请求使用formdata进行传参，这种情况下只需要在变量上添加@DateTimeFormat注解","slug":"post请求使用formdata进行传参-这种情况下只需要在变量上添加-datetimeformat注解","children":[]},{"level":3,"title":"使用post请求传参，并将参数放在请求体中以json格式传参，此时，需要在接口的实体类前添加@RequestBody注解，同时在LocalDateTime类型的变量上添加 @JsonFormat注解","slug":"使用post请求传参-并将参数放在请求体中以json格式传参-此时-需要在接口的实体类前添加-requestbody注解-同时在localdatetime类型的变量上添加-jsonformat注解","children":[]}]},{"level":2,"title":"id为数组,使用雪花id,前端出现错误","slug":"id为数组-使用雪花id-前端出现错误","children":[{"level":3,"title":"id使用字符串","slug":"id使用字符串","children":[]},{"level":3,"title":"使用JsonSerialize","slug":"使用jsonserialize","children":[]}]}],"git":{"createdTime":1649171852000,"updatedTime":1655535285000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":3}]},"readingTime":{"minutes":4.27,"words":1280},"filePathRelative":"java-tutor/springboot/spring-errors/errors.md","localizedDate":"2022年4月5日"}')},1200:(n,s,a)=>{a.r(s),a.d(s,{default:()=>H});var e=a(66252);const t=a.p+"assets/img/error1.9b11a066.png",o=a.p+"assets/img/error2.94cf93eb.png",p=(0,e.uE)('<h1 id="springboot错误" tabindex="-1"><a class="header-anchor" href="#springboot错误" aria-hidden="true">#</a> springboot错误</h1><h2 id="yaml错误" tabindex="-1"><a class="header-anchor" href="#yaml错误" aria-hidden="true">#</a> yaml错误</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>found character &#39;@&#39; that cannot start any token\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是idea没有识别出来项目,需要重新import一下</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Error:(3, 38) java: 程序包org.springframework.stereotype不存在\nError:(4, 47) java: 程序包org.springframework.web.bind.annotation不存在\nError:(5, 47) java: 程序包org.springframework.web.bind.annotation不存在\nError:(7, 2) java: 找不到符号\n 符号: 类 Controller\nError:(10, 6) java: 找不到符号\n 符号:  类 ResponseBody\n 位置: 类 com.test.controller.HelloController\nError:(11, 6) java: 找不到符号\n 符号:  类 RequestMapping\n 位置: 类 com.test.controller.HelloController\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方案：<br><img src="'+t+'" alt="tip" loading="lazy"><img src="'+o+'" alt="tip" loading="lazy"></p><h2 id="failed-to-load-response-data" tabindex="-1"><a class="header-anchor" href="#failed-to-load-response-data" aria-hidden="true">#</a> failed to load response data</h2><p>当需要根据后台传回地址跳转页面时 即使使用preserve log 可以查看上一个页面获取地址请求，但是此时请求返回值为failed to load response data 当关闭页面跳转可以查看到接口返回值。 ​</p><h2 id="一直是cors的错误" tabindex="-1"><a class="header-anchor" href="#一直是cors的错误" aria-hidden="true">#</a> 一直是cors的错误</h2><p>可能是应为interceptor里面不能注入bean,去掉@autowired和@resource改写为utils来查询 在Interceptor中通过@Autowired注入service报空指针错误。就把拦截器作为bean注入</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>\n \n    <span class="token doc-comment comment">/**\n     * 将拦截器作为bean写入配置中\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">MyInterceptor</span> <span class="token function">myInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n \n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * 多个拦截器组成一个拦截器链;\n         * addPathPatterns用于添加拦截规则;\n         * excludePathPatterns用户排除拦截;\n         * 对来自/** 全路径请求进行拦截\n         */</span> \n        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">myInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',11),i={id:"springboot使用alibaba的fastjson-jsonfield不起作用的问题",tabindex:"-1"},l=(0,e._)("a",{class:"header-anchor",href:"#springboot使用alibaba的fastjson-jsonfield不起作用的问题","aria-hidden":"true"},"#",-1),c=(0,e.Uk)(),r={href:"https://www.cnblogs.com/h-java/p/10220737.html",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("Springboot使用alibaba的fastJson,@JSONField不起作用的问题"),d=(0,e.Uk)("在Springboot中默认的JSON解析框架是jackson 今天引入alibaba的fastjson，使用@JSONField(serialize=false),让@RestController转换数据给前端的时候不序列化莫些字段，发现@JSONField根本不起作用 在网上查阅了一番，发现Springboot使用fastjson需要替换默认的json转换器的 具体解决方法有两种："),v=(0,e._)("br",null,null,-1),k=(0,e.Uk)(" 本文借鉴地址： "),m={href:"https://blog.csdn.net/qq_28929589/article/details/79245774",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("https://blog.csdn.net/qq_28929589/article/details/79245774"),b=(0,e._)("br",null,null,-1),h=(0,e.Uk)(" 一、（1）启动类继承extends WebMvcConfigurerAdapter （2）覆盖方法configureMessageConverters"),f=(0,e._)("br",null,null,-1),y=(0,e.Uk)(" 二、（1）在App.java启动类中，注入Bean : HttpMessageConverters"),j=(0,e._)("br",null,null,-1),w=(0,e.Uk)(" 第一种方式："),C=(0,e._)("br",null,null,-1),x=(0,e.Uk)(" 启动类继承WebMvcConfigurerAdapter，然后对configureMessageConverters方法进行重写"),J=(0,e.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>converters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">FastJsonHttpMessageConverter</span> fastConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">FastJsonConfig</span> fastJsonConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fastJsonConfig<span class="token punctuation">.</span><span class="token function">setSerializerFeatures</span><span class="token punctuation">(</span>\n                <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>PrettyFormat</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        fastConverter<span class="token punctuation">.</span><span class="token function">setFastJsonConfig</span><span class="token punctuation">(</span>fastJsonConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fastConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方式：在App.java启动类中，注入Bean : HttpMessageConverters</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">HttpMessageConverters</span> <span class="token function">fastJsonHttpMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">FastJsonHttpMessageConverter</span> fastConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">FastJsonConfig</span> fastJsonConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fastJsonConfig<span class="token punctuation">.</span><span class="token function">setSerializerFeatures</span><span class="token punctuation">(</span><span class="token class-name">SerializerFeature<span class="token punctuation">.</span>PrettyFormat</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fastConverter<span class="token punctuation">.</span><span class="token function">setFastJsonConfig</span><span class="token punctuation">(</span>fastJsonConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converter <span class="token operator">=</span> fastConverter<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageConverters</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot多模块运行" tabindex="-1"><a class="header-anchor" href="#springboot多模块运行" aria-hidden="true">#</a> springboot多模块运行</h2>',4),S=(0,e.Uk)("见"),F={href:"https://spring.io/guides/gs/multi-module/",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("官方文档"),M=(0,e.uE)('<p>比如我有如下module</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>root\n    ├───common\n    ├───main-module (main方法,包含springboot-maven-plugin)\n    └───system-module\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在root目录直接<code>mvn spring-boot:run -pl main-module</code>即可</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>关于 maven-compile-plugin和springboot-maven-plugin<br> maven-compiler-plugin 是用于在编译（compile）阶段加入定制化参数，而 spring-boot-maven-plugin 是用于 spring boot 项目的打包（package）阶段，两者没什么关系。</p></div><p>目标编译的Java版本可以通过属性指定， 不一定要在plugin的配置里，如</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 或者设置java版本 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="localdatetime传参数据不对" tabindex="-1"><a class="header-anchor" href="#localdatetime传参数据不对" aria-hidden="true">#</a> LocalDatetime传参数据不对</h2><p>使用过java8的朋友应该都知道LocalDateTime类型，它作为全新的日期和时间API ，对比Date类型有着很大的优势，极大的方便了我们对于时间和日期的操作。不过，如果在日常使用中，如果我们不对这个类型的字段进行处理的话，在打印或者直接返回到页面的时候往往看到的格式是这样的 2020-11-11T22:12:03.793 。显然这种格式对于用户来说阅读体验很差，那么，今天我们将通过这篇文章来介绍一下在使用LocalDateTime是如何在接受参数和返回信息时进行格式化。 比如我们有一个UserVo.java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token punctuation">{</span>\n \n    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> birthday<span class="token punctuation">;</span>\n    <span class="token comment">//省略Getter and Setter方法</span>\n \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post请求使用formdata进行传参-这种情况下只需要在变量上添加-datetimeformat注解" tabindex="-1"><a class="header-anchor" href="#post请求使用formdata进行传参-这种情况下只需要在变量上添加-datetimeformat注解" aria-hidden="true">#</a> post请求使用formdata进行传参，这种情况下只需要在变量上添加@DateTimeFormat注解</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> birthday<span class="token punctuation">;</span>\n    <span class="token comment">//省略Getter and Setter方法</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用post请求传参-并将参数放在请求体中以json格式传参-此时-需要在接口的实体类前添加-requestbody注解-同时在localdatetime类型的变量上添加-jsonformat注解" tabindex="-1"><a class="header-anchor" href="#使用post请求传参-并将参数放在请求体中以json格式传参-此时-需要在接口的实体类前添加-requestbody注解-同时在localdatetime类型的变量上添加-jsonformat注解" aria-hidden="true">#</a> 使用post请求传参，并将参数放在请求体中以json格式传参，此时，需要在接口的实体类前添加@RequestBody注解，同时在LocalDateTime类型的变量上添加 @JsonFormat注解</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVo</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n<span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> birthday<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="id为数组-使用雪花id-前端出现错误" tabindex="-1"><a class="header-anchor" href="#id为数组-使用雪花id-前端出现错误" aria-hidden="true">#</a> id为数组,使用雪花id,前端出现错误</h2><p>后端返回了一个超大的数字，前端拿到数据之后在控制台打印出来却跟后端返回的不一样。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">4518777332709233930</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment">// 4518777332709234000</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当时看了半天也没找到问题，后来发现其他数字也都跟后端返回的不一样，这个时候才隐约想起 JS 中处理超长数字有精度问题。JS 的最大和最小安全值可以这样获得：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9007199254740991</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-9007199254740991</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>超过这个范围就会出现精度问题。</p><p>解决方法:</p><h3 id="id使用字符串" tabindex="-1"><a class="header-anchor" href="#id使用字符串" aria-hidden="true">#</a> id使用字符串</h3>',21),z=(0,e.Uk)("见知乎回答"),q={href:"https://www.zhihu.com/question/281123046",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("https://www.zhihu.com/question/281123046"),E=(0,e.uE)('<h3 id="使用jsonserialize" tabindex="-1"><a class="header-anchor" href="#使用jsonserialize" aria-hidden="true">#</a> 使用JsonSerialize</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Jackson</span>\n<span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ser<span class="token punctuation">.</span>std<span class="token punctuation">.</span></span>ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>\n\n<span class="token comment">// FastJson</span>\n<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serializeUsing <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span>ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样前端接收的id就是字符串了</p>',3),U={},H=(0,a(83744).Z)(U,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[p,(0,e._)("h2",i,[l,c,(0,e._)("a",r,[u,(0,e.Wm)(a)])]),(0,e._)("p",null,[d,v,k,(0,e._)("a",m,[g,(0,e.Wm)(a)]),b,h,f,y,j,w,C,x]),J,(0,e._)("p",null,[S,(0,e._)("a",F,[_,(0,e.Wm)(a)])]),M,(0,e._)("p",null,[z,(0,e._)("a",q,[T,(0,e.Wm)(a)])]),E])}]])}}]);