"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[13883],{77566:(a,n,e)=>{e.r(n),e.d(n,{data:()=>s});const s=JSON.parse('{"key":"v-6d2db312","path":"/java-tutor/stackoverflow/when-and-how-should-i-use-a-threadlocal-variable.html","title":"该什么时候使用 ThreadLocal变量，它是如何工作的？","lang":"zh-CN","frontmatter":{"summary":"该什么时候使用 ThreadLocal变量，它是如何工作的？ 回答1 一种可能的（也是常见的）使用情形是你不想通过同步方式（synchronized）访问非线程安全的对象（说的就是SimpleDateFormat）,而是想给每个线程一个对象实例的时候。 例如 ` 回答2 因为ThreadLocal是一个既定线程内部的数据引用，你可能在使用线程池的应用服务器上","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/stackoverflow/when-and-how-should-i-use-a-threadlocal-variable.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"该什么时候使用 ThreadLocal变量，它是如何工作的？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-03-22T11:07:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-03-22T11:07:21.000Z"}]]},"excerpt":"","headers":[{"level":3,"title":"回答1","slug":"回答1","children":[]},{"level":3,"title":"回答2","slug":"回答2","children":[]}],"git":{"createdTime":1647947241000,"updatedTime":1647947241000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"java-tutor/stackoverflow/when-and-how-should-i-use-a-threadlocal-variable.md","localizedDate":"2022年3月22日"}')},17333:(a,n,e)=>{e.r(n),e.d(n,{default:()=>T});var s=e(66252);const t=(0,s.uE)('<h1 id="该什么时候使用-threadlocal变量-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#该什么时候使用-threadlocal变量-它是如何工作的" aria-hidden="true">#</a> 该什么时候使用 ThreadLocal变量，它是如何工作的？</h1><h3 id="回答1" tabindex="-1"><a class="header-anchor" href="#回答1" aria-hidden="true">#</a> 回答1</h3><p>一种可能的（也是常见的）使用情形是你不想通过同步方式（synchronized）访问非线程安全的对象（说的就是SimpleDateFormat）,而是想给每个线程一个对象实例的时候。 例如</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// SimpleDateFormat is not thread-safe, so give one to each thread</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> formatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">protected</span> <span class="token class-name">SimpleDateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyyMMdd HHmm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatIt</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> formatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回答2" tabindex="-1"><a class="header-anchor" href="#回答2" aria-hidden="true">#</a> 回答2</h3><p>因为ThreadLocal是一个既定线程内部的数据引用，你可能在使用线程池的应用服务器上因此引起类加载时候的内存泄漏。你需要使用remove()方法很小心地清理TheadLocal中get()或者set()的变量。 如果程序执行完毕没有清理的话，它持有的任何对类的引用将作为部署的Web应用程序的一部分仍保持在永久堆，永远无法得到回收。重新部署/取消部署也无法清理对应用程序类的引用，因为线程不是被你的应用程序所拥有的。 每次成功部署都会创建一个永远不会被垃圾回收类的实例。</p>',6),o=(0,s.Uk)("最后将会遇到内存不足的异常-java.lang.java.lang.OutOfMemoryError: PermGen space -XX:MaxPermSize，在google了很多答案之后你可能只是增加了-XX:MaxPermSize，而不是修复这个bug。 倘若你的确遇到这种问题，可以通过"),l={href:"http://www.eclipse.org/mat/",target:"_blank",rel:"noopener noreferrer"},r=(0,s.Uk)("Eclipse's Memory Analyzer"),p=(0,s.Uk)("或根据"),c={href:"https://blogs.oracle.com/fkieviet/entry/classloader_leaks_the_dreaded_java",target:"_blank",rel:"noopener noreferrer"},i=(0,s.Uk)("Frank Kieviet's guide"),d=(0,s.Uk)(" 和 "),u={href:"https://blogs.oracle.com/fkieviet/entry/how_to_fix_the_dreaded",target:"_blank",rel:"noopener noreferrer"},k=(0,s.Uk)("followup"),m=(0,s.Uk)("来判断哪些线程和类保留了那些引用。"),h=(0,s.Uk)("更新：又发现了"),v={href:"http://avasseur.blogspot.jp/2003/11/threadlocal-and-memory-leaks.html",target:"_blank",rel:"noopener noreferrer"},g=(0,s.Uk)("Alex Vasseur's blog entry"),b=(0,s.Uk)("，它帮助我查清楚了一些ThreadLocal的问题。"),f=(0,s.Uk)("stackoverflow链接："),w={href:"http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable",target:"_blank",rel:"noopener noreferrer"},y=(0,s.Uk)("http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable"),_={},T=(0,e(83744).Z)(_,[["render",function(a,n){const e=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[t,(0,s._)("p",null,[o,(0,s._)("a",l,[r,(0,s.Wm)(e)]),p,(0,s._)("a",c,[i,(0,s.Wm)(e)]),d,(0,s._)("a",u,[k,(0,s.Wm)(e)]),m]),(0,s._)("p",null,[h,(0,s._)("a",v,[g,(0,s.Wm)(e)]),b]),(0,s._)("p",null,[f,(0,s._)("a",w,[y,(0,s.Wm)(e)])])])}]])}}]);