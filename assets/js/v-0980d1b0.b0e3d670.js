"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[53026],{82767:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e=JSON.parse('{"key":"v-0980d1b0","path":"/java-tutor/springboot/spring-log.html","title":"Java日志框架","lang":"zh-CN","frontmatter":{"summary":"Java日志框架 1.SLF4J(Simple logging Facade for Java) 意思为简单日志门面，它是把不同的日志系统的实现进行了具体的抽象化，只提供了统一的日志使用接口，使用时只需要按照其提供的接口方法进行调用即可，由于它只是一个接口，并不是一个具体的可以直接单独使用的日志框架，所以最终日志的格式、记录级别、输出方式等都要通过接口绑定的","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/springboot/spring-log.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"Java日志框架"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-26T07:13:03.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-26T07:13:03.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"1.SLF4J(Simple logging Facade for Java)","slug":"_1-slf4j-simple-logging-facade-for-java","children":[{"level":3,"title":"如何使用SLF4J?","slug":"如何使用slf4j","children":[]},{"level":3,"title":"所以，结合各日志实现包使用时提供的jar包情况为","slug":"所以-结合各日志实现包使用时提供的jar包情况为","children":[]}]},{"level":2,"title":"2.log4j(log for java)","slug":"_2-log4j-log-for-java","children":[]},{"level":2,"title":"3.logback","slug":"_3-logback","children":[]},{"level":2,"title":"4.总结如下：","slug":"_4-总结如下","children":[]}],"git":{"createdTime":1649171852000,"updatedTime":1653549183000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":3}]},"readingTime":{"minutes":6.98,"words":2095},"filePathRelative":"java-tutor/springboot/spring-log.md","localizedDate":"2022年4月5日"}')},90390:(a,n,s)=>{s.r(n),s.d(n,{default:()=>W});var e=s(66252);const t=(0,e.uE)('<h1 id="java日志框架" tabindex="-1"><a class="header-anchor" href="#java日志框架" aria-hidden="true">#</a> Java日志框架</h1><h2 id="_1-slf4j-simple-logging-facade-for-java" tabindex="-1"><a class="header-anchor" href="#_1-slf4j-simple-logging-facade-for-java" aria-hidden="true">#</a> 1.SLF4J(Simple logging Facade for Java)</h2><p>意思为简单日志门面，它是把不同的日志系统的实现进行了具体的抽象化，只提供了统一的日志使用接口，使用时只需要按照其提供的接口方法进行调用即可，由于它只是一个接口，并不是一个具体的可以直接单独使用的日志框架，所以最终日志的格式、记录级别、输出方式等都要通过接口绑定的具体的日志系统来实现，这些具体的日志系统就有log4j,logback,java.util.logging等，它们才实现了具体的日志系统的功能。</p><h3 id="如何使用slf4j" tabindex="-1"><a class="header-anchor" href="#如何使用slf4j" aria-hidden="true">#</a> 如何使用SLF4J?</h3><p>既然SLF4J只是一个接口，那么实际使用时必须要结合具体的日志系统来使用，我们首先来看SLF4J和各个具体的日志系统进行绑定时的框架原理图：</p><p><img src="https://img2018.cnblogs.com/blog/1434095/201810/1434095-20181011231449434-658115391.png" alt="img" loading="lazy"></p><p>其实slf4j原理很简单，他只提供一个核心slf4j api(就是slf4j-api.jar包)，这个包只有日志的接口，并没有实现，所以如果要使用就得再给它提供一个实现了些接口的日志包，比 如：log4j,common logging,jdk log日志实现包等，但是这些日志实现又不能通过接口直接调用，实现上他们根本就和slf4j-api不一致，因此slf4j又增加了一层来转换各日志实现包的使 用，当然slf4j-simple除外。其结构如下： slf4j-api(接口层) | 各日志实现包的连接层( slf4j-jdk14, slf4j-log4j) | 各日志实现包</p><h3 id="所以-结合各日志实现包使用时提供的jar包情况为" tabindex="-1"><a class="header-anchor" href="#所以-结合各日志实现包使用时提供的jar包情况为" aria-hidden="true">#</a> 所以，结合各日志实现包使用时提供的jar包情况为</h3><p>SLF4J和logback结合使用时需要提供的jar:slf4j-api.jar,logback-classic.jar,logback-core.jar</p><p>SLF4J和log4j结合使用时需要提供的jar:slf4j-api.jar,slf4j-log412.jar,log4j.jar</p><p>SLF4J和JDK中java.util.logging结合使用时需要提供的jar:slf4j-api.jar,slf4j-jdk14.jar</p><p>SLF4J和simple(SLF4J本身提供的一个接口的简单实现)结合使用时需要提供的jar:slf4j-api.jar,slf4j-simple.jar</p><p>当然还有其他的日志实现包，以上是经常会使用到的一些。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>注意，以上slf4j和各日志实现包结合使用时最好只使用一种结合，不然的话会提示重复绑定日志，并且会导致日志无法输出。</p></div><p>***slf4j-api.jar:对外提供统一的日志调用接口，该接口具体提供的调用方式和方法举例说明：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n\n　　<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Tester</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过LoggerFactory获取Logger实例</span>\n\n　　<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n​    <span class="token comment">//接口里的统一的调用方法，各具体的日志系统都有实现这些方法</span>\n　　logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;testlog: {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n​    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;testlog: {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n​    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;testlog: {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n​    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;testlog: {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n​    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;testlog: {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果系统中之前已经使用了log4j做日志输出，想使用slf4j作为统一的日志输出，该怎么办呢？</strong></p><p>如果之前系统中是单独使用log4j做为日志输出的，这时再想使用slf4j做为日志输出时，如果系统中日志比较多，此时更改日志输出方法肯定是不太现实的，这个时候就可以使用log4j-over-slf4j.jar将使用log4j日志框架输出的日志路由到slf4j上来统一采用slf4j来输出日志。</p><p><strong>为什么要使用SLF4J?</strong></p><ul><li>slf4j是一个日志接口，自己没有具体实现日志系统，只提供了一组标准的调用api,这样将调用和具体的日志实现分离，使用slf4j后有利于根据自己实际的需求更换具体的日志系统，比如，之前使用的具体的日志系统为log4j,想更换为logback时，只需要删除log4j相关的jar,然后加入logback相关的jar和日志配置文件即可，而不需要改动具体的日志输出方法，试想如果没有采用这种方式，当你的系统中日志输出有成千上万条时，你要更换日志系统将是多么庞大的一项工程。如果你开发的是一个面向公众使用的组件或公共服务模块，那么一定要使用slf4的这种形式，这有利于别人在调用你的模块时保持和他系统中使用统一的日志输出。</li><li>slf4j日志输出时可以使用{}占位符，如，logger.info(&quot;testlog: {}&quot;, &quot;test&quot;)，而如果只使用log4j做日志输出时，只能以logger.info(&quot;testlog:&quot;+&quot;test&quot;)这种形式，前者要比后者在性能上更好，后者采用+连接字符串时就是new 一个String 字符串，在性能上就不如前者。</li></ul><h2 id="_2-log4j-log-for-java" tabindex="-1"><a class="header-anchor" href="#_2-log4j-log-for-java" aria-hidden="true">#</a> 2.log4j(log for java)</h2><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p><p><strong>如何使用？</strong></p><ul><li>引入jar,使用log4j时需要的jar为：log4j.jar。</li><li>定义配置文件log4j.properties或log4j.xml</li><li>在具体的类中进行使用： <ul><li>在需要日志输出的类中加入：private static final Logger logger = Logger.getLogger(Tester.class); //通过Logger获取Logger实例</li><li>在需要输出日志的地方调用相应方法即可：logger.debug(“System …..”)</li></ul></li></ul><p>关于如何单独使用log4j，建议详细阅读以下文章：</p>',25),l={href:"https://blog.csdn.net/u012422446/article/details/51199724",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("https://blog.csdn.net/u012422446/article/details/51199724"),p={href:"https://blog.csdn.net/azheng270/article/details/2173430/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("https://blog.csdn.net/azheng270/article/details/2173430/"),c={href:"http://shmilyaw-hotmail-com.iteye.com/blog/2410764",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("http://shmilyaw-hotmail-com.iteye.com/blog/2410764"),g=(0,e.uE)('<h2 id="_3-logback" tabindex="-1"><a class="header-anchor" href="#_3-logback" aria-hidden="true">#</a> 3.logback</h2><p>logback同样是由log4j的作者设计完成的，拥有更好的特性，用来取代log4j的一个日志框架,是slf4j的原生实现(即直接实现了slf4j的接口，而log4j并没有直接实现，所以就需要一个适配器slf4j-log4j12.jar),logback一共有以下几个模块：</p><ul><li>logback-core：其它两个模块的基础模块</li><li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging</li><li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能</li></ul><p>同样，单独使用它时，需要引入以上jar,然后进行配置文件的配置，最后就是在相关类中进行使用，使用时加入以下语句:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>　　<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n 　logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;打印日志&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于logback的使用，详细使用方法及配置推荐阅读以下文章：</p>',6),u={href:"https://www.cnblogs.com/warking/p/5710303.html",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("https://www.cnblogs.com/warking/p/5710303.html"),k=(0,e._)("h2",{id:"_4-总结如下",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_4-总结如下","aria-hidden":"true"},"#"),(0,e.Uk)(" 4.总结如下：")],-1),j=(0,e._)("p",null,"1、slf4j是java的一个日志门面，实现了日志框架一些通用的api，log4j和logback是具体的日志框架。",-1),m=(0,e._)("p",null,"2、他们可以单独的使用，也可以绑定slf4j一起使用。",-1),f=(0,e._)("p",null,"单独使用，分别调用框架自己的方法来输出日志信息。绑定slf4j一起使用。调用slf4j的api来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）。显然不推荐单独使用日志框架。假设项目中已经使用了log4j，而我们此时加载了一个类库，而这个类库依赖另一个日志框架。这个时候我们就需要维护两个日志框架，这是一个非常麻烦的事情。而使用了slf4j就不同了，由于应用调用的抽象层的api，与底层日志框架是无关的，因此可以任意更换日志框架。",-1),h=(0,e._)("p",null,"这篇文章主要是来帮大家理清 slf4j，log4j，logback之间的关系，对于使用及相关配置文件的详细配置不做说明，对于具体的使用参考文章末尾相关参考链接。",-1),v=(0,e._)("p",null,"最后，送上slf4j和log4j整合使用时的一些参考链接",-1),b={href:"https://blog.csdn.net/javaloveiphone/article/details/52486257",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("https://blog.csdn.net/javaloveiphone/article/details/52486257"),w=(0,e.Uk)(" （log桥接工具jcl-over-slf4j使用，项目排除commons-logging依赖的影响）"),y={href:"https://blog.csdn.net/minicto/article/details/52672472",target:"_blank",rel:"noopener noreferrer"},q=(0,e.Uk)("https://blog.csdn.net/minicto/article/details/52672472"),L={href:"https://blog.csdn.net/foreverling/article/details/51385128",target:"_blank",rel:"noopener noreferrer"},J=(0,e.Uk)("https://blog.csdn.net/foreverling/article/details/51385128"),S={href:"https://www.cnblogs.com/junzi2099/p/7930268.html#_label6",target:"_blank",rel:"noopener noreferrer"},F=(0,e.Uk)("https://www.cnblogs.com/junzi2099/p/7930268.html#_label6"),U={href:"https://www.cnblogs.com/chenhongliang/p/5312517.html",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("https://www.cnblogs.com/chenhongliang/p/5312517.html"),z=(0,e.Uk)(" (java常用日志框架介绍)"),T={},W=(0,s(83744).Z)(T,[["render",function(a,n){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("p",null,[(0,e._)("a",l,[o,(0,e.Wm)(s)])]),(0,e._)("p",null,[(0,e._)("a",p,[i,(0,e.Wm)(s)])]),(0,e._)("p",null,[(0,e._)("a",c,[r,(0,e.Wm)(s)])]),g,(0,e._)("p",null,[(0,e._)("a",u,[d,(0,e.Wm)(s)])]),k,j,m,f,h,v,(0,e._)("p",null,[(0,e._)("a",b,[_,(0,e.Wm)(s)]),w]),(0,e._)("p",null,[(0,e._)("a",y,[q,(0,e.Wm)(s)])]),(0,e._)("p",null,[(0,e._)("a",L,[J,(0,e.Wm)(s)])]),(0,e._)("p",null,[(0,e._)("a",S,[F,(0,e.Wm)(s)])]),(0,e._)("p",null,[(0,e._)("a",U,[x,(0,e.Wm)(s)]),z])])}]])}}]);