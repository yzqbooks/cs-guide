"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[29679],{46452:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-b5f57b7c","path":"/java-tutor/stackoverflow/why-does-math-round0-49999999999999994-return-1.html","title":"为什么数学函数Math.round(0.49999999999999994) 返回 1","lang":"zh-CN","frontmatter":{"summary":"为什么数学函数Math.round(0.49999999999999994) 返回 1 tags:stackoverflow-java-top-qa --- ###问题 通过下面的程序你可以看出来,对于任意一个比0.5略小的都是舍去小数向下取整,只有0.5是例外. 输出为: _译者注:请看输出的最后两行,0.49999999999999994的输出为1,而0","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/stackoverflow/why-does-math-round0-49999999999999994-return-1.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"为什么数学函数Math.round(0.49999999999999994) 返回 1"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-03-22T11:07:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-03-22T11:07:21.000Z"}]]},"excerpt":"","headers":[{"level":3,"title":"回答","slug":"回答","children":[]},{"level":3,"title":"stackoverflow原文链接:http://stackoverflow.com/questions/9902968/why-does-math-round0-49999999999999994-return-1","slug":"stackoverflow原文链接-http-stackoverflow-com-questions-9902968-why-does-math-round0-49999999999999994-return-1","children":[]}],"git":{"createdTime":1647947241000,"updatedTime":1647947241000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.92,"words":575},"filePathRelative":"java-tutor/stackoverflow/why-does-math-round0-49999999999999994-return-1.md","localizedDate":"2022年3月22日"}')},92622:(n,s,a)=>{a.r(s),a.d(s,{default:()=>w});var e=a(66252);const t=(0,e.uE)('<h1 id="为什么数学函数math-round-0-49999999999999994-返回-1" tabindex="-1"><a class="header-anchor" href="#为什么数学函数math-round-0-49999999999999994-返回-1" aria-hidden="true">#</a> 为什么数学函数Math.round(0.49999999999999994) 返回 1</h1><p>tags:stackoverflow-java-top-qa</p><hr><p>###问题 通过下面的程序你可以看出来,对于任意一个比0.5略小的都是舍去小数向下取整,只有0.5是例外.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">do</span> <span class="token punctuation">{</span>\n        x <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">longBitsToDouble</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot; rounded is &quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        l<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>10.5 rounded is 11\n10.499999999999998 rounded is 10\n9.5 rounded is 10\n9.499999999999998 rounded is 9\n8.5 rounded is 9\n8.499999999999998 rounded is 8\n7.5 rounded is 8\n7.499999999999999 rounded is 7\n6.5 rounded is 7\n6.499999999999999 rounded is 6\n5.5 rounded is 6\n5.499999999999999 rounded is 5\n4.5 rounded is 5\n4.499999999999999 rounded is 4\n3.5 rounded is 4\n3.4999999999999996 rounded is 3\n2.5 rounded is 3\n2.4999999999999996 rounded is 2\n1.5 rounded is 2\n1.4999999999999998 rounded is 1\n0.5 rounded is 1\n0.49999999999999994 rounded is 1\n0.4999999999999999 rounded is 0\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>_译者注:请看输出的最后两行,0.49999999999999994的输出为1,而0.49999999999999999的输出为0</em></p><p>我使用的版本是 Java 6 update 31</p><h3 id="回答" tabindex="-1"><a class="header-anchor" href="#回答" aria-hidden="true">#</a> 回答</h3><p><strong>总结</strong></p><p>在 Java 6(或者之前的版本),round(x)是用floor(x+0.5)实现的.¹ 这是一个规范上的bug,恰恰是在这种病理条件下.²Java 7 不再使用这个有问题的实现了.</p><p><strong>问题</strong></p><p>0.5+0.49999999999999994 在double的精度下的结果是1</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%016x\\n&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">0.49999999999999994</span><span class="token punctuation">;</span>\n\n    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 3fe0000000000000</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 3fdfffffffffffff</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3ff0000000000000</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3ff0000000000000</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为0.49999999999999994的指数比0.5的指数小,所以当它们两个相加时,0.49999999999999994的原数就会发生移位,然后最小精度单位(unit of least precision)/最后置单位(unit of last place)相应的变大了.</p><p><strong>解决方案</strong></p><p>自从Java 7以来,OpenJDK(举个栗子)实现如下⁴:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0x1.fffffffffffffp-2</span><span class="token punctuation">)</span> <span class="token comment">// greatest double value less than 0.5</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">floor</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">0.5d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',19),o={href:"http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html#round%28double%29",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html#round%28double%29"),c={href:"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6430675",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6430675"),i=(0,e.Uk)(" (credits to @SimonNickerson for finding this)"),u={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#round%28double%29",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#round%28double%29"),d={href:"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/lang/Math.java#Math.round%28double%29",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/lang/Math.java#Math.round%28double%29"),v={id:"stackoverflow原文链接-http-stackoverflow-com-questions-9902968-why-does-math-round0-49999999999999994-return-1",tabindex:"-1"},m=(0,e._)("a",{class:"header-anchor",href:"#stackoverflow原文链接-http-stackoverflow-com-questions-9902968-why-does-math-round0-49999999999999994-return-1","aria-hidden":"true"},"#",-1),b=(0,e.Uk)(" stackoverflow原文链接:"),h={href:"http://stackoverflow.com/questions/9902968/why-does-math-round0-49999999999999994-return-1",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("http://stackoverflow.com/questions/9902968/why-does-math-round0-49999999999999994-return-1"),g={},w=(0,a(83744).Z)(g,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("ol",null,[(0,e._)("li",null,[(0,e._)("a",o,[p,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",c,[l,(0,e.Wm)(a)]),i]),(0,e._)("li",null,[(0,e._)("a",u,[r,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",d,[k,(0,e.Wm)(a)])])]),(0,e._)("h3",v,[m,b,(0,e._)("a",h,[f,(0,e.Wm)(a)])])])}]])}}]);