"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[7110],{69425:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a=JSON.parse('{"key":"v-a5698992","path":"/python-tutor/python-config/poetry.html","title":"使用poetry","lang":"zh-CN","frontmatter":{"summary":"使用poetry 安装poetry 使用命令 config.toml文件 poetry提供了全局config配置和特定项目的config配置。 windows下的全局config配置文件：%userprofile%/poetry/config.yoml 指定pip源 add命令 run命令 这个命令也是一个比较重要的命令，可以让我们不进入虚拟环境就执行虚拟环","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/python-tutor/python-config/poetry.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"使用poetry"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-07-25T14:57:57.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-07-25T14:57:57.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"安装poetry","slug":"安装poetry","children":[]},{"level":2,"title":"使用命令","slug":"使用命令","children":[]},{"level":2,"title":"config.toml文件","slug":"config-toml文件","children":[{"level":3,"title":"指定pip源","slug":"指定pip源","children":[]},{"level":3,"title":"add命令","slug":"add命令","children":[]},{"level":3,"title":"run命令","slug":"run命令","children":[]},{"level":3,"title":"env命令","slug":"env命令","children":[]}]}],"git":{"createdTime":1658761077000,"updatedTime":1658761077000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.82,"words":547},"filePathRelative":"python-tutor/python-config/poetry.md","localizedDate":"2022年7月25日"}')},87942:(n,e,s)=>{s.r(e),s.d(e,{default:()=>l});var a=s(66252);const t=[(0,a.uE)('<h1 id="使用poetry" tabindex="-1"><a class="header-anchor" href="#使用poetry" aria-hidden="true">#</a> 使用poetry</h1><h2 id="安装poetry" tabindex="-1"><a class="header-anchor" href="#安装poetry" aria-hidden="true">#</a> 安装poetry</h2><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>pip install poetry\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用命令" tabindex="-1"><a class="header-anchor" href="#使用命令" aria-hidden="true">#</a> 使用命令</h2><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>poetry self update\n<span class="token comment"># 查看所有配置</span>\npoetry config <span class="token operator">--</span>list \n<span class="token comment"># 查看单个配置</span>\npoetry config virtualenvs<span class="token punctuation">.</span>path \n<span class="token comment"># 更新配置</span>\npoetry config virtualenvs<span class="token punctuation">.</span>in-project true \n<span class="token comment"># 重置配置</span>\npoetry config virtualenvs<span class="token punctuation">.</span>path <span class="token operator">--</span>unset \n<span class="token comment"># 添加poetry,会在项目目录生成一个pyproject.toml,他是一个非常重要的文件，包含了工程的配置和依赖库信息</span>\npoetry init \n\n<span class="token comment"># 将依赖包导出为 requirements.txt 格式，导出文件名为 requirements.txt </span>\npoetry export <span class="token operator">-</span>f requirements<span class="token punctuation">.</span>txt <span class="token operator">--</span>output requirements<span class="token punctuation">.</span>txt \n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="config-toml文件" tabindex="-1"><a class="header-anchor" href="#config-toml文件" aria-hidden="true">#</a> config.toml文件</h2><p>poetry提供了全局config配置和特定项目的config配置。 windows下的全局config配置文件：<code>%userprofile%/poetry/config.yoml</code></p><h3 id="指定pip源" tabindex="-1"><a class="header-anchor" href="#指定pip源" aria-hidden="true">#</a> 指定pip源</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[[tool.poetry.source]]\nname = &quot;custom&quot;\nurl = &quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;\ndefault = true\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add命令" tabindex="-1"><a class="header-anchor" href="#add命令" aria-hidden="true">#</a> add命令</h3><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>poetry add requests  <span class="token comment"># ==&gt; pip install requests </span>\npoetry add requests@^2<span class="token punctuation">.</span>20<span class="token punctuation">.</span>0 <span class="token comment"># 安装大于2.20.0版本的包 </span>\npoetry add <span class="token string">&quot;requests=2.20.0&quot;</span> <span class="token comment"># ==&gt; pip install requests==2.20.0 </span>\npoetry add <span class="token string">&quot;uvicorn[standard]&quot;</span> <span class="token comment"># ==&gt; pip install uvicorn[standard] </span>\n \n<span class="token comment"># 从 git 仓库安装 </span>\npoetry add git+https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/sdispater/pendulum<span class="token punctuation">.</span>git \npoetry add git+ssh:<span class="token operator">/</span><span class="token operator">/</span>git@github<span class="token punctuation">.</span>com/sdispater/pendulum<span class="token punctuation">.</span>git \npoetry add git+https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/sdispater/pendulum<span class="token punctuation">.</span>git<span class="token comment">#develop </span>\npoetry add git+https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/sdispater/pendulum<span class="token punctuation">.</span>git<span class="token comment">#2.0.5 </span>\n \n<span class="token comment"># 从本地文件安装 </span>\npoetry add <span class="token punctuation">.</span><span class="token operator">/</span>my-package/ \npoetry add <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>my-package/dist/my-package-0<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz \npoetry add <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>my-package/dist/my_package-0<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>whl \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run命令" tabindex="-1"><a class="header-anchor" href="#run命令" aria-hidden="true">#</a> run命令</h3><p>这个命令也是一个比较重要的命令，可以让我们不进入虚拟环境就执行虚拟环境内的命令</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 查询虚拟环境内的 Python 版本 \npoetry run python -V \n \n# 执行虚拟环境内的脚本 \npoetry run python test.py \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="env命令" tabindex="-1"><a class="header-anchor" href="#env命令" aria-hidden="true">#</a> env命令</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 使用指定环境的python \npoetry env use /full/path/to/python \n \n# 如果python在环境变量中，可以使用一下方式指定 \npoetry env use python3.7 \n \n# 显示当前虚拟环境信息 \npoetry env info \n \n# 仅显示虚拟环境的路径 \npoetry env info --path \n \n# 显示当前工程的所有虚拟环境列表 \npoetry env list \n \n# 显示当前工程的虚拟环境绝对路径 \npoetry env list --full-path \n \n# 删除虚拟环境 \npoetry env remove /full/path/to/python \npoetry env remove python3.7 \n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cache-dir Type: string</p><p>缓存目录配置，使用 poetry 安装的包源文件都会缓存到这个目录。以下是系统默认目录：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>macOS: ~/Library/Caches/pypoetry\nWindows: C:\\Users\\AppData\\Local\\pypoetry\\Cache\nUnix: ~/.cache/pypoetry\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>virtualenvs.path Type: string</p><p>默认是{cache-dir}/virtualenvs，虚拟环境创建的目录，如果上面的 in-project 为 true，此配置就无效</p>',21)],i={},l=(0,s(83744).Z)(i,[["render",function(n,e){return(0,a.wg)(),(0,a.iD)("div",null,t)}]])}}]);