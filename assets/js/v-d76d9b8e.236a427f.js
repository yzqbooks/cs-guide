"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[67484],{68218:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-d76d9b8e","path":"/java-tutor/stackoverflow/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java.html","title":"重写（Override）equals和hashCode方法时应考虑的问题","lang":"zh-CN","frontmatter":{"summary":"重写（Override）equals和hashCode方法时应考虑的问题 理论上讲（编程语言、数学层面） equals() 定义了对象的相等关系（自反性、对称性、传递性）（有点抽象，更详细说明，请参考javadoc)) 。 另外，它还具有一致性（也就是说，如果一个对象没有修改，那么对象的equals方法，应总是返回相同的值），此外，o.equals(null","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/stackoverflow/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"重写（Override）equals和hashCode方法时应考虑的问题"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-03-22T11:07:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-03-22T11:07:21.000Z"}]]},"excerpt":"","headers":[{"level":3,"title":"理论上讲（编程语言、数学层面）","slug":"理论上讲-编程语言、数学层面","children":[]},{"level":3,"title":"实践上讲","slug":"实践上讲","children":[]}],"git":{"createdTime":1647947241000,"updatedTime":1647947241000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.65,"words":494},"filePathRelative":"java-tutor/stackoverflow/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java.md","localizedDate":"2022年3月22日"}')},53666:(n,a,s)=>{s.r(a),s.d(a,{default:()=>z});var e=s(66252);const o=(0,e._)("h1",{id:"重写-override-equals和hashcode方法时应考虑的问题",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#重写-override-equals和hashcode方法时应考虑的问题","aria-hidden":"true"},"#"),(0,e.Uk)(" 重写（Override）equals和hashCode方法时应考虑的问题")],-1),t=(0,e._)("h3",{id:"理论上讲-编程语言、数学层面",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#理论上讲-编程语言、数学层面","aria-hidden":"true"},"#"),(0,e.Uk)(" 理论上讲（编程语言、数学层面）")],-1),p=(0,e.Uk)("equals() 定义了对象的相等关系（自反性、对称性、传递性）（有点抽象，更详细说明，请参考"),l={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("javadoc"),i=(0,e.Uk)(") 。 另外，它还具有一致性（也就是说，如果一个对象没有修改，那么对象的equals方法，应总是返回相同的值），此外，o.equals(null)应当总是返回false。 hashCode()（"),r={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("javadoc"),d=(0,e.Uk)(")也必须具备一致性的（也就是说，如果equal的结果没有变，那么hashcode()也应总是返回相同的值）"),k=(0,e._)("p",null,"总的来说，这两个方法的关系：",-1),h=(0,e._)("p",null,[(0,e._)("strong",null,"假如a.equals(b)，那么a.hashCode() 应等于b.hashCode()")],-1),m=(0,e._)("h3",{id:"实践上讲",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#实践上讲","aria-hidden":"true"},"#"),(0,e.Uk)(" 实践上讲")],-1),v=(0,e._)("p",null,[(0,e._)("strong",null,"如果你重写了其中一个方法，那么务必重写另外一个方法")],-1),b=(0,e._)("p",null,"equals()和hashCode()所计算的属性集（set of fields）应当是一样的 如何更快地重写这两个方法呢？",-1),g=(0,e.Uk)("使用"),f={href:"http://commons.apache.org/lang/",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("Apache Commons Lang library"),y=(0,e.Uk)("中的"),q={href:"http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("EqualsBuilder"),j=(0,e.Uk)("、"),C={href:"http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("HashCodeBuilder"),H=(0,e.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashCodeBuilder</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// two randomly chosen prime numbers</span>\n            <span class="token comment">// if deriving: appendSuper(super.hashCode()).</span>\n            <span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>\n            <span class="token function">append</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span>\n            <span class="token function">toHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Person</span> rhs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n            <span class="token comment">// if deriving: appendSuper(super.equals(obj)).</span>\n            <span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>\n            <span class="token function">append</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span>\n            <span class="token function">isEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>如果你是用eclipse，可以在代码编辑区右键，然后选择 Source &gt; Generate hashCode() and equals()</li></ol><p><strong>另外请记得</strong></p><p>当你使用一些基于Hash的 Collection 、 Map，例如HashSet, LinkedHashSet, HashMap, Hashtable, 、WeakHashMap等。在键值对被放到集合中之后，请确保其key值所对应的hashCode()是保持不变的。比较可靠的一个办法，是保持这些key是不可变的，这也能带来不少好处</p>',4),O=(0,e.Uk)("stackoverflow链接： "),S={href:"http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java"),x={},z=(0,s(83744).Z)(x,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[o,t,(0,e._)("p",null,[p,(0,e._)("a",l,[c,(0,e.Wm)(s)]),i,(0,e._)("a",r,[u,(0,e.Wm)(s)]),d]),k,h,m,v,b,(0,e._)("ol",null,[(0,e._)("li",null,[g,(0,e._)("a",f,[w,(0,e.Wm)(s)]),y,(0,e._)("a",q,[_,(0,e.Wm)(s)]),j,(0,e._)("a",C,[U,(0,e.Wm)(s)])])]),H,(0,e._)("p",null,[O,(0,e._)("a",S,[W,(0,e.Wm)(s)])])])}]])}}]);