"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[87334],{7037:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-2a2cfdbe","path":"/java-tutor/stackoverflow/why-does-java-have-transient-variables.html","title":"transient 关键字的作用?","lang":"zh-CN","frontmatter":{"summary":"transient 关键字的作用? Java 语言规范中提到,transient 关键字用来说明指定属性不进行序列化. 若要理解 transient 关键字的作用,自然需要对序列化有一定的认识. 序列化 序列化是用来持久化对象的状态 -- 将对象转化为字节码保存到指定的文件中.类似地,可以通过反序列化,将字节码还原为对象原有的状态.序列化是 Java 中一个","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/stackoverflow/why-does-java-have-transient-variables.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"transient 关键字的作用?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-06-18T06:54:45.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-06-18T06:54:45.000Z"}]]},"excerpt":"","headers":[],"git":{"createdTime":1647947241000,"updatedTime":1655535285000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":2}]},"readingTime":{"minutes":1.8,"words":541},"filePathRelative":"java-tutor/stackoverflow/why-does-java-have-transient-variables.md","localizedDate":"2022年3月22日"}')},73323:(n,a,s)=>{s.r(a),s.d(a,{default:()=>v});var e=s(66252);const t=(0,e._)("h1",{id:"transient-关键字的作用",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#transient-关键字的作用","aria-hidden":"true"},"#"),(0,e.Uk)(" transient 关键字的作用?")],-1),o={href:"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1.3",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("Java 语言规范"),i=(0,e.Uk)("中提到,transient 关键字用来说明指定属性不进行序列化."),r=(0,e.uE)('<p>若要理解 transient 关键字的作用,自然需要对序列化有一定的认识.</p><p><strong>序列化</strong></p><p>序列化是用来持久化对象的状态 -- 将对象转化为字节码保存到指定的文件中.类似地,可以通过反序列化,将字节码还原为对象原有的状态.序列化是 Java 中一个比较重要的概念,因为在网络编程中会经常用到序列化与反序列化机制.一个相对若想在网络中传输,就必须转化为字节的形式.而 Serializable 接口就是用来标识某个类或接口可以转化为字节码,Serializable 可以认为是一个标识符,因为它没有任何的方法.</p><p>Serializable 允许我们将一个类转化为字节码,进而在网络传输.可是,一个类中可能存在某些敏感的信息,我们是不想在网络中传输的,这时候我们就需要借助 transient 关键字了.被 transient 关键字标识的 field,不会进行序列化.</p><p>下面通过一个例子说明 transient 关键字的作用.现假设我们需要在网络中传输 Person 类:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> certNo<span class="token punctuation">;</span> <span class="token comment">// 身份证号码</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> certNo<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>certNo <span class="token operator">=</span> certNo<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Person{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, certNo=&#39;&quot;</span> <span class="token operator">+</span> certNo <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若不使用 transient 关键字,反序列化时输出的信息是 :</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Person{name=&#39;tianya&#39;, certNo=&#39;12314&#39;, age=23}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们知道,身份证号码属于敏感信息,并不想在网络中传输,这时我们就可以借助 transient 关键字,如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> private transient String certNo;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候,通过反序列化获取的 Person 信息如下 :</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Person{name=&#39;tianya&#39;, certNo=&#39;null&#39;, age=23}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',12),l=(0,e.Uk)("stackoverflow原址："),c={href:"http://stackoverflow.com/questions/910374/why-does-java-have-transient-variables",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("http://stackoverflow.com/questions/910374/why-does-java-have-transient-variables"),u={},v=(0,s(83744).Z)(u,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("p",null,[(0,e._)("a",o,[p,(0,e.Wm)(s)]),i]),r,(0,e._)("p",null,[l,(0,e._)("a",c,[d,(0,e.Wm)(s)])])])}]])}}]);