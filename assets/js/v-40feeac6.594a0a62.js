"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[78865],{940:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-40feeac6","path":"/frontend/regex/common-reg1.html","title":"常用正则表达式1","lang":"zh-CN","frontmatter":{"summary":"常用正则表达式1 javascript正则表达式检验 校验是否全由数字组成** 校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串** 校验用户姓名：只能输入1-30个以字母开头的字串** 校验密码：只能输入6-20个字母、数字、下划线** 校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”** //校验手机号码：必须以数字","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/regex/common-reg1.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"常用正则表达式1"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-06-05T00:09:15.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-06-05T00:09:15.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"javascript正则表达式检验","slug":"javascript正则表达式检验","children":[{"level":3,"title":"校验是否全由数字组成**","slug":"校验是否全由数字组成","children":[]},{"level":3,"title":"校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串**","slug":"校验登录名-只能输入5-20个以字母开头、可带数字、-、-的字串","children":[]},{"level":3,"title":"校验用户姓名：只能输入1-30个以字母开头的字串**","slug":"校验用户姓名-只能输入1-30个以字母开头的字串","children":[]},{"level":3,"title":"校验密码：只能输入6-20个字母、数字、下划线**","slug":"校验密码-只能输入6-20个字母、数字、下划线","children":[]},{"level":3,"title":"校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”**","slug":"校验普通电话、传真号码-可以-开头-除数字外-可含有","children":[]},{"level":3,"title":"校验邮政编码**","slug":"校验邮政编码","children":[]}]},{"level":2,"title":"校验搜索关键字","slug":"校验搜索关键字","children":[]}],"git":{"createdTime":1649085570000,"updatedTime":1654387755000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":3}]},"readingTime":{"minutes":4.59,"words":1376},"filePathRelative":"frontend/regex/common-reg1.md","localizedDate":"2022年4月4日"}')},28257:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(66252);const t=[(0,e.uE)('<h1 id="常用正则表达式1" tabindex="-1"><a class="header-anchor" href="#常用正则表达式1" aria-hidden="true">#</a> 常用正则表达式1</h1><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n&quot;^\\\\d+$&quot; //非负整数（正整数 + 0）\n\n&quot;^[0-9]_[1-9][0-9]_$&quot; //正整数\n\n&quot;^((-\\\\d+)|(0+))$&quot; //非正整数（负整数 + 0）\n\n&quot;^-[0-9]_[1-9][0-9]_$&quot; //负整数\n\n&quot;^-?\\\\d+$&quot; //整数\n\n&quot;^\\\\d+(\\\\.\\\\d+)?$&quot; //非负浮点数（正浮点数 + 0）\n\n&quot;^(([0-9]+\\\\.[0-9]_[1-9][0-9]_)|([0-9]_[1-9][0-9]_\\\\.[0-9]+)|([0-9]_[1-9][0-9]_))$&quot; //正浮点数\n\n&quot;^((-\\\\d+(\\\\.\\\\d+)?)|(0+(\\\\.0+)?))$&quot; //非正浮点数（负浮点数 + 0）\n&quot;^(-(([0-9]+\\\\.[0-9]_[1-9][0-9]_)|([0-9]_[1-9][0-9]_\\\\.[0-9]+)|([0-9]_[1-9][0-9]_)))$&quot; //负浮点数\n\n&quot;^(-?\\\\d+)(\\\\.\\\\d+)?$&quot; //浮点数\n\n&quot;^[A-Za-z]+$&quot; //由26个英文字母组成的字符串\n\n&quot;^[A-Z]+$&quot; //由26个英文字母的大写组成的字符串\n\n&quot;^[a-z]+$&quot; //由26个英文字母的小写组成的字符串\n\n&quot;^[A-Za-z0-9]+$&quot; //由数字和26个英文字母组成的字符串\n\n&quot;^\\\\w+$&quot; //由数字、26个英文字母或者下划线组成的字符串\n\n&quot;^[\\\\w-]+(\\\\.[\\\\w-]+)*@[\\\\w-]+(\\\\.[\\\\w-]+)+$&quot; //email地址\n\n&quot;^[a-zA-z]+://(\\\\w+(-\\\\w+)*)(\\\\.(\\\\w+(-\\\\w+)*))*(\\\\?\\\\S*)?$&quot; //url\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript正则表达式检验" tabindex="-1"><a class="header-anchor" href="#javascript正则表达式检验" aria-hidden="true">#</a> javascript正则表达式检验</h2><h3 id="校验是否全由数字组成" tabindex="-1"><a class="header-anchor" href="#校验是否全由数字组成" aria-hidden="true">#</a> 校验是否全由数字组成**</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]{1,20}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验登录名-只能输入5-20个以字母开头、可带数字、-、-的字串" tabindex="-1"><a class="header-anchor" href="#校验登录名-只能输入5-20个以字母开头、可带数字、-、-的字串" aria-hidden="true">#</a> 校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串**</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isRegisterUserName</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验用户姓名-只能输入1-30个以字母开头的字串" tabindex="-1"><a class="header-anchor" href="#校验用户姓名-只能输入1-30个以字母开头的字串" aria-hidden="true">#</a> 校验用户姓名：只能输入1-30个以字母开头的字串**</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isTrueName</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]{1,30}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验密码-只能输入6-20个字母、数字、下划线" tabindex="-1"><a class="header-anchor" href="#校验密码-只能输入6-20个字母、数字、下划线" aria-hidden="true">#</a> 校验密码：只能输入6-20个字母、数字、下划线**</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isPasswd</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\w){6,20}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验普通电话、传真号码-可以-开头-除数字外-可含有" tabindex="-1"><a class="header-anchor" href="#校验普通电话、传真号码-可以-开头-除数字外-可含有" aria-hidden="true">#</a> 校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”**</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isTel</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n<span class="token comment">//let patrn=/^[+]{0,1}(\\d){1,3}[ ]?([-]?(\\d){1,12})+$/;</span>\n<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+]{0,1}(\\d){1,3}[ ]?([-]?((\\d)|[ ]){1,12})+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//校验手机号码：必须以数字开头，除数字外，可含有“-”</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isMobil</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+]{0,1}(\\d){1,3}[ ]?([-]?((\\d)|[ ]){1,12})+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验邮政编码" tabindex="-1"><a class="header-anchor" href="#校验邮政编码" aria-hidden="true">#</a> 校验邮政编码**</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isPostalCode</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n<span class="token comment">//let patrn=/^[a-zA-Z0-9]{3,12}$/;</span>\n<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9 ]{3,12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="校验搜索关键字" tabindex="-1"><a class="header-anchor" href="#校验搜索关键字" aria-hidden="true">#</a> 校验搜索关键字</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isSearch</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> patrn <span class="token operator">=</span>\n    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^`~!@#$%^&amp;*()+=|\\\\\\][\\]\\{\\}:;\\&#39;\\,.&lt;&gt;/?]{1}[^`~!@$%^&amp;()+=|\\\\\\][\\]\\{\\}:;\\&#39;\\,.&lt;&gt;?]{0,19}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isIP</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//by zergling</span>\n  <span class="token keyword">let</span> patrn <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9.]{1,20}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * FUNCTION: isBetween\n * PARAMETERS: val AS any value\n * lo AS Lower limit to check\n * hi AS Higher limit to check\n * CALLS: NOTHING\n * RETURNS: TRUE if val is between lo and hi both inclusive, otherwise false.\n ***/</span>\n<span class="token keyword">function</span> <span class="token function">isBetween</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> lo <span class="token operator">||</span> val <span class="token operator">&gt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * FUNCTION: isDate checks a valid date\n * PARAMETERS: theStr AS String\n * CALLS: isBetween, isInt\n * RETURNS: TRUE if theStr is a valid date otherwise false.\n ***/</span>\n<span class="token keyword">function</span> <span class="token function">isDate</span><span class="token punctuation">(</span><span class="token parameter">theStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> the1st <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> the2nd <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>the1st <span class="token operator">==</span> the2nd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> y <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> the1st<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> m <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>the1st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> the2nd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> d <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>the2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> theStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> maxDays <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">isInt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">isInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isBetween</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>\n      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>\n      <span class="token keyword">else</span> maxDays <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBetween</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> maxDays<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * FUNCTION: isEuDate checks a valid date in British format\n * PARAMETERS: theStr AS String\n * CALLS: isBetween, isInt\n * RETURNS: TRUE if theStr is a valid date otherwise false.\n ***/</span>\n<span class="token keyword">function</span> <span class="token function">isEuDate</span><span class="token punctuation">(</span><span class="token parameter">theStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBetween</span><span class="token punctuation">(</span>theStr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> the1st <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> the2nd <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>the1st <span class="token operator">==</span> the2nd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> m <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>the1st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> the2nd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> d <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> the1st<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> y <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>the2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> theStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> maxDays <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">isInt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">isInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBetween</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span> maxDays <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBetween</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> maxDays<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/*\n * FUNCTION: Compare Date! Which is the latest!\n * PARAMETERS: lessDate,moreDate AS String\n * CALLS: isDate,isBetween\n * RETURNS: TRUE if lessDate&lt;moreDate\n **/</span>\n<span class="token keyword">function</span> <span class="token function">isComdate</span><span class="token punctuation">(</span><span class="token parameter">lessDate<span class="token punctuation">,</span> moreDate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDate</span><span class="token punctuation">(</span>lessDate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDate</span><span class="token punctuation">(</span>moreDate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> less1st <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> less2nd <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> more1st <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> more2nd <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> lessy <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> less1st<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> lessm <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>less1st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> less2nd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> lessd <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>less2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lessDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> morey <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> more1st<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> morem <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>more1st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> more2nd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> mored <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>more2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> moreDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> Date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>lessy<span class="token punctuation">,</span> lessm<span class="token punctuation">,</span> lessd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> Date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>morey<span class="token punctuation">,</span> morem<span class="token punctuation">,</span> mored<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Date1 <span class="token operator">&gt;</span> Date2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * FUNCTION isEmpty checks if the parameter is empty or null\n * PARAMETER str AS String\n ***/</span>\n<span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * FUNCTION: isInt\n * PARAMETER: theStr AS String\n * RETURNS: TRUE if the passed parameter is an integer, otherwise FALSE\n * CALLS: isDigit\n ***/</span>\n<span class="token keyword">function</span> <span class="token function">isInt</span><span class="token punctuation">(</span><span class="token parameter">theStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>theStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> theStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDigit</span><span class="token punctuation">(</span>theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> flag<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n* FUNCTION: isReal\n* PARAMETER: heStr AS String \ndecLen AS Integer (how many digits after period)\n* RETURNS: TRUE if theStr is a float, otherwise FALSE\n* CALLS: isInt\n***/</span>\n<span class="token keyword">function</span> <span class="token function">isReal</span><span class="token punctuation">(</span><span class="token parameter">theStr<span class="token punctuation">,</span> decLen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> dot1st <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> dot2nd <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> <span class="token constant">OK</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>theStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dot1st <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInt</span><span class="token punctuation">(</span>theStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dot1st <span class="token operator">!=</span> dot2nd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dot1st <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> intPart <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dot1st<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> decPart <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>dot2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>decPart<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> decLen<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInt</span><span class="token punctuation">(</span>intPart<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isInt</span><span class="token punctuation">(</span>decPart<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>decPart<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * FUNCTION: isEmail\n * PARAMETER: String (Email Address)\n * RETURNS: TRUE if the String is a valid Email address\n * FALSE if the passed string is not a valid Email Address\n * EMAIL FORMAT: AnyName@EmailServer e.g; webmaster@hotmail.com\n * @ sign can appear only once in the email address.\n **/</span>\n<span class="token keyword">function</span> <span class="token function">isEmail</span><span class="token punctuation">(</span><span class="token parameter">theStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> atIndex <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> dotIndex <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> atIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  theSub <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    atIndex <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span>\n    atIndex <span class="token operator">!=</span> theStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n    dotIndex <span class="token operator">&lt;</span> atIndex <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">||</span>\n    theStr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> theSub<span class="token punctuation">.</span>length\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n* FUNCTION: newWindow\n* PARAMETERS: doc -&gt; Document to open in the new window\nhite -&gt; Height of the new window\nwide -&gt; Width of the new window\nbars -&gt; 1-Scroll bars = YES 0-Scroll Bars = NO\nresize -&gt; 1-Resizable = YES 0-Resizable = NO\n* CALLS: NONE\n* RETURNS: New window instance\n***/</span>\n<span class="token keyword">function</span> <span class="token function">newWindow</span><span class="token punctuation">(</span><span class="token parameter">doc<span class="token punctuation">,</span> hite<span class="token punctuation">,</span> wide<span class="token punctuation">,</span> bars<span class="token punctuation">,</span> resize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> winNew <span class="token operator">=</span> <span class="token string">&quot;_blank&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> opt <span class="token operator">=</span> <span class="token string">&quot;toolbar=0,location=0,directories=0,status=0,menubar=0,&quot;</span><span class="token punctuation">;</span>\n  opt <span class="token operator">+=</span> <span class="token string">&quot;scrollbars=&quot;</span> <span class="token operator">+</span> bars <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>\n  opt <span class="token operator">+=</span> <span class="token string">&quot;resizable=&quot;</span> <span class="token operator">+</span> resize <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>\n  opt <span class="token operator">+=</span> <span class="token string">&quot;width=&quot;</span> <span class="token operator">+</span> wide <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>\n  opt <span class="token operator">+=</span> <span class="token string">&quot;height=&quot;</span> <span class="token operator">+</span> hite<span class="token punctuation">;</span>\n  winHandle <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> winNew<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * FUNCTION: DecimalFormat\n * PARAMETERS: paramValue -&gt; Field value\n * CALLS: NONE\n * RETURNS: Formated string\n ***/</span>\n<span class="token keyword">function</span> <span class="token function">DecimalFormat</span><span class="token punctuation">(</span><span class="token parameter">paramValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> intPart <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>paramValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> decPart <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>paramValue<span class="token punctuation">)</span> <span class="token operator">-</span> intPart<span class="token punctuation">;</span>\n  str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>decPart <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> decPart <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> str <span class="token operator">+=</span> intPart <span class="token operator">+</span> <span class="token string">&quot;.00&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> str <span class="token operator">+=</span> intPart <span class="token operator">+</span> decPart<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',19)],p={},o=(0,a(83744).Z)(p,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])}}]);