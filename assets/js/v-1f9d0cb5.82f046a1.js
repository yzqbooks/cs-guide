"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[68750],{19160:(e,i,l)=>{l.r(i),l.d(i,{data:()=>n});const n=JSON.parse('{"key":"v-1f9d0cb5","path":"/linux-tutor/server/Wormhole-Install-And-Settings.html","title":"Wormhole + Flink 最佳实践","lang":"zh-CN","frontmatter":{"summary":"Wormhole + Flink 最佳实践 本文声明 感谢 Wormhole 的官方帮助！官方微信群很友好，这让我很意外，只能感谢了！; 本人大数据和 Ansible 刚看，只会皮毛的皮毛。但是也因为这样的契机促使了我写这篇文章。; 因为刚入门，需要了解细节，所以没用 Ambari 这类工具，已经熟悉的可以考虑使用。; 希望对你们有帮助。; --------","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/linux-tutor/server/Wormhole-Install-And-Settings.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"Wormhole + Flink 最佳实践"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-27T01:37:35.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-27T01:37:35.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"本文声明","slug":"本文声明","children":[]},{"level":2,"title":"前置声明","slug":"前置声明","children":[]},{"level":2,"title":"本文目标","slug":"本文目标","children":[]},{"level":2,"title":"服务器基础环境设置","slug":"服务器基础环境设置","children":[]},{"level":2,"title":"Wormhole 所需组件安装","slug":"wormhole-所需组件安装","children":[]},{"level":2,"title":"Wormhole 安装 + 配置","slug":"wormhole-安装-配置","children":[]},{"level":2,"title":"创建用户","slug":"创建用户","children":[]},{"level":2,"title":"创建 Source 需要涉及的概念","slug":"创建-source-需要涉及的概念","children":[]},{"level":2,"title":"创建 Sink 需要涉及的概念","slug":"创建-sink-需要涉及的概念","children":[]},{"level":2,"title":"创建 Project","slug":"创建-project","children":[]},{"level":2,"title":"Flink Stream","slug":"flink-stream","children":[]},{"level":2,"title":"Flink Flow","slug":"flink-flow","children":[]},{"level":2,"title":"Kafka 发送测试数据","slug":"kafka-发送测试数据","children":[]}],"git":{"createdTime":1653615455000,"updatedTime":1653615455000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":12.53,"words":3758},"filePathRelative":"linux-tutor/server/Wormhole-Install-And-Settings.md","localizedDate":"2022年5月27日"}')},15189:(e,i,l)=>{l.r(i),l.d(i,{default:()=>te});var n=l(66252);const a=(0,n.uE)('<h1 id="wormhole-flink-最佳实践" tabindex="-1"><a class="header-anchor" href="#wormhole-flink-最佳实践" aria-hidden="true">#</a> Wormhole + Flink 最佳实践</h1><h2 id="本文声明" tabindex="-1"><a class="header-anchor" href="#本文声明" aria-hidden="true">#</a> 本文声明</h2><ul><li><strong>感谢 Wormhole 的官方帮助！官方微信群很友好，这让我很意外，只能感谢了！</strong></li><li>本人大数据和 Ansible 刚看，只会皮毛的皮毛。但是也因为这样的契机促使了我写这篇文章。</li><li>因为刚入门，需要了解细节，所以没用 Ambari 这类工具，已经熟悉的可以考虑使用。</li><li>希望对你们有帮助。</li></ul><hr><h2 id="前置声明" tabindex="-1"><a class="header-anchor" href="#前置声明" aria-hidden="true">#</a> 前置声明</h2>',5),s=(0,n._)("li",null,"需要对 Linux 环境，流计算的一些基础概念有基础了解，比如：Source、Sink、YARN、Zookeeper、Kafka、Ansible 等",-1),d=(0,n.Uk)("如果有欠缺，可以查看本系列文章："),o=(0,n.Uk)("点击我"),r=(0,n.uE)('<hr><h2 id="本文目标" tabindex="-1"><a class="header-anchor" href="#本文目标" aria-hidden="true">#</a> 本文目标</h2><ul><li>统计 <strong>滑动窗口</strong> 下的流过的数据量（count）</li><li>业务数据格式：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n   &quot;id&quot;: 1,\n   &quot;name&quot;: &quot;test&quot;,\n   &quot;phone&quot;: &quot;18074546423&quot;,\n   &quot;city&quot;: &quot;Beijing&quot;,\n   &quot;time&quot;: &quot;2017-12-22 10:00:00&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="服务器基础环境设置" tabindex="-1"><a class="header-anchor" href="#服务器基础环境设置" aria-hidden="true">#</a> 服务器基础环境设置</h2><h4 id="特别说明" tabindex="-1"><a class="header-anchor" href="#特别说明" aria-hidden="true">#</a> 特别说明</h4><ul><li><strong>4 台 8C32G 服务器 CentOS 7.5，内存推荐 16G 或以上。</strong><ul><li><strong>为了方便，所有服务器都已经关闭防火墙，并且在云服务上设置安全组对外开通所有端口</strong></li><li><strong>全程 root 用户</strong></li></ul></li><li>整体部署结构图：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12159-7a94673ea075873c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="未命名文件(1).png" loading="lazy"></p><h4 id="服务器基础配置" tabindex="-1"><a class="header-anchor" href="#服务器基础配置" aria-hidden="true">#</a> 服务器基础配置</h4><ul><li>给对应服务器设置 hostname，方便后面使用：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>hostnamectl --static set-hostname linux01\nhostnamectl --static set-hostname linux02\nhostnamectl --static set-hostname linux03\nhostnamectl --static set-hostname linux04\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>给所有服务器设置 hosts：<code>vim /etc/hosts</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>172.16.0.55       linux01\n172.16.0.92       linux02\n172.16.0.133      linux03\n172.16.0.159      linux04\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 linux01 生成密钥对，设置 SSH 免密登录</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>生产密钥对\nssh-keygen -t rsa\n\n\n公钥内容写入 authorized_keys\ncat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys\n\n测试：\nssh localhost\n\n将公钥复制到其他机子\nssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@linux02（根据提示输入 linux02 密码）\n\nssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@linux03（根据提示输入 linux03 密码）\n\nssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@linux04（根据提示输入 linux04 密码）\n\n\n在 linux01 上测试\nssh linux01\n\nssh linux02\n\nssh linux03\n\nssh linux04\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装基础软件：<code>yum install -y zip unzip lrzsz git epel-release wget htop deltarpm</code></li><li>安装 Ansible：<code>yum install -y ansible</code></li><li>配置 Inventory 编辑配置文件：<code>vim /etc/ansible/hosts</code></li><li>在文件尾部补上如下内容</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[hadoop-host]\nlinux01\nlinux02\nlinux03\n\n[kafka-host]\nlinux04\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试 Ansible：<code>ansible all -a &#39;ps&#39;</code>，必须保证能得到如下结果：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>linux01 | CHANGED | rc=0 &gt;&gt;\n  PID TTY          TIME CMD\n11088 pts/7    00:00:00 sh\n11101 pts/7    00:00:00 python\n11102 pts/7    00:00:00 ps\n\nlinux02 | CHANGED | rc=0 &gt;&gt;\n  PID TTY          TIME CMD\n10590 pts/1    00:00:00 sh\n10603 pts/1    00:00:00 python\n10604 pts/1    00:00:00 ps\n\nlinux03 | CHANGED | rc=0 &gt;&gt;\n  PID TTY          TIME CMD\n10586 pts/1    00:00:00 sh\n10599 pts/1    00:00:00 python\n10600 pts/1    00:00:00 ps\n\nlinux04 | CHANGED | rc=0 &gt;&gt;\n  PID TTY          TIME CMD\n10574 pts/1    00:00:00 sh\n10587 pts/1    00:00:00 python\n10588 pts/1    00:00:00 ps\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务器基础组件-centos-7-x" tabindex="-1"><a class="header-anchor" href="#服务器基础组件-centos-7-x" aria-hidden="true">#</a> 服务器基础组件（CentOS 7.x）</h4><ul><li>创建脚本文件：<code>vim /opt/install-basic-playbook.yml</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>- hosts: all\n  remote_user: root\n  tasks:\n    - name: Disable SELinux at next reboot\n      selinux:\n        state: disabled\n        \n    - name: disable firewalld\n      command: &quot;{{ item }}&quot;\n      with_items:\n         - systemctl stop firewalld\n         - systemctl disable firewalld\n         \n    - name: install-basic\n      command: &quot;{{ item }}&quot;\n      with_items:\n         - yum install -y zip unzip lrzsz git epel-release wget htop deltarpm\n         \n    - name: install-vim\n      shell: &quot;{{ item }}&quot;\n      with_items:\n         - yum install -y vim\n         - curl https://raw.githubusercontent.com/wklken/vim-for-server/master/vimrc &gt; ~/.vimrc\n         \n    - name: install-docker\n      shell: &quot;{{ item }}&quot;\n      with_items:\n         - yum install -y yum-utils device-mapper-persistent-data lvm2\n         - yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n         - yum makecache fast\n         - yum install -y docker-ce\n         - systemctl start docker.service\n         - docker run hello-world\n         \n    - name: install-docker-compose\n      shell: &quot;{{ item }}&quot;\n      with_items:\n         - curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n         - chmod +x /usr/local/bin/docker-compose\n         - docker-compose --version\n         - systemctl restart docker.service\n         - systemctl enable docker.service\n         \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行命令：<code>ansible-playbook /opt/install-basic-playbook.yml</code></li></ul><hr><h2 id="wormhole-所需组件安装" tabindex="-1"><a class="header-anchor" href="#wormhole-所需组件安装" aria-hidden="true">#</a> Wormhole 所需组件安装</h2>',26),t=(0,n.Uk)("参考官网："),u={href:"https://edp963.github.io/wormhole/deployment.html",target:"_blank",rel:"noopener noreferrer"},c=(0,n.Uk)("https://edp963.github.io/wormhole/deployment.html"),v=(0,n._)("li",null,"必须组件（版本请不要随便用，而是按照如下说明来）：",-1),m=(0,n._)("li",null,[(0,n.Uk)("我个人习惯软件都是放在："),(0,n._)("code",null,"/usr/local"),(0,n.Uk)("，压缩包放在："),(0,n._)("code",null,"/opt")],-1),b=(0,n._)("h4",{id:"关于版本号和端口问题",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#关于版本号和端口问题","aria-hidden":"true"},"#"),(0,n.Uk)(" 关于版本号和端口问题")],-1),h=(0,n.Uk)("百度云打包下载（提取码：8tm3）："),p={href:"https://pan.baidu.com/s/1hJa-wdxGSjG_z1SS8Qt2cg",target:"_blank",rel:"noopener noreferrer"},k=(0,n.Uk)("https://pan.baidu.com/s/1hJa-wdxGSjG_z1SS8Qt2cg"),q=(0,n.uE)("<li>版本： <ul><li><strong>jdk-8u191-linux-x64.tar.gz</strong></li><li><strong>zookeeper-3.4.13（Docker）</strong></li><li><strong>kafka_2.11-0.10.2.2.tgz</strong></li><li><strong>hadoop-2.6.5.tar.gz</strong></li><li><strong>flink-1.5.1-bin-hadoop26-scala_2.11.tgz</strong></li><li><strong>spark-2.2.0-bin-hadoop2.6.tgz</strong></li><li><strong>mysql-3.7（Docker）</strong></li><li><strong>wormhole-0.6.0-beta.tar.gz</strong></li></ul></li><li>端口 <ul><li>都采用组件默认端口</li></ul></li>",2),f=(0,n.uE)('<h4 id="jdk-安装" tabindex="-1"><a class="header-anchor" href="#jdk-安装" aria-hidden="true">#</a> JDK 安装</h4><ul><li>将 linux01 下的 JDK 压缩包复制到所有机子的 /opt 目录下：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>scp -r /opt/jdk-8u191-linux-x64.tar.gz root@linux02:/opt\n\nscp -r /opt/jdk-8u191-linux-x64.tar.gz root@linux03:/opt\n\nscp -r /opt/jdk-8u191-linux-x64.tar.gz root@linux04:/opt\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 linux01 创建脚本文件：<code>vim /opt/jdk8-playbook.yml</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>- hosts: all\n  remote_user: root\n  tasks:\n    - name: copy jdk\n      copy: src=/opt/jdk-8u191-linux-x64.tar.gz dest=/usr/local\n      \n    - name: tar jdk\n      shell: cd /usr/local &amp;&amp; tar zxf jdk-8u191-linux-x64.tar.gz\n      \n    - name: set JAVA_HOME\n      blockinfile: \n        path: /etc/profile\n        marker: &quot;#{mark} JDK ENV&quot;\n        block: |\n          JAVA_HOME=/usr/local/jdk1.8.0_191\n          JRE_HOME=$JAVA_HOME/jre\n          PATH=$PATH:$JAVA_HOME/bin\n          CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n          export JAVA_HOME\n          export JRE_HOME\n          export PATH\n          export CLASSPATH\n    \n    - name: source profile\n      shell: source /etc/profile\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行命令：<code>ansible-playbook /opt/jdk8-playbook.yml</code></li><li>经过试验，发现还是要自己再手动：<code>source /etc/profile</code>，原因未知。</li></ul><h4 id="hadoop-集群-hdfs-yarn" tabindex="-1"><a class="header-anchor" href="#hadoop-集群-hdfs-yarn" aria-hidden="true">#</a> Hadoop 集群（HDFS，YARN）</h4><ul><li>Hadoop 集群（HDFS，YARN）（linux01、linux02、linux03）：<code>2.6.5</code></li><li>Hadoop 环境可以用脚本文件，剩余部分内容请参考上文手工操作：<code>vim /opt/hadoop-playbook.yml</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>- hosts: hadoop-host\n  remote_user: root\n  tasks:\n    - name: Creates directory\n      file:\n        path: /data/hadoop/hdfs/name\n        state: directory\n    - name: Creates directory\n      file:\n        path: /data/hadoop/hdfs/data\n        state: directory\n    - name: Creates directory\n      file:\n        path: /data/hadoop/hdfs/tmp\n        state: directory\n\n    - name: set HADOOP_HOME\n      blockinfile: \n        path: /etc/profile\n        marker: &quot;#{mark} HADOOP ENV&quot;\n        block: |\n          HADOOP_HOME=/usr/local/hadoop\n          HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop\n          YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop\n          PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\n          export HADOOP_CONF_DIR\n          export YARN_CONF_DIR\n          export HADOOP_HOME\n          export PATH\n    \n    - name: source profile\n      shell: source /etc/profile\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',9),g=(0,n._)("li",null,[(0,n.Uk)("执行命令："),(0,n._)("code",null,"ansible-playbook /opt/hadoop-playbook.yml")],-1),x=(0,n.Uk)("剩余内容较多，具体参考："),_=(0,n.Uk)("点击我"),y=(0,n._)("ul",null,[(0,n._)("li",null,[(0,n.Uk)("解压压缩包："),(0,n._)("code",null,"tar zxvf hadoop-2.6.5.tar.gz")]),(0,n._)("li",null,[(0,n.Uk)("这里最好把目录重命名下："),(0,n._)("code",null,"mv /usr/local/hadoop-2.6.5 /usr/local/hadoop")]),(0,n._)("li",null,"剩下内容从：修改 linux01 配置，开始阅读")],-1),w=(0,n.uE)('<h4 id="flink" tabindex="-1"><a class="header-anchor" href="#flink" aria-hidden="true">#</a> Flink</h4><ul><li>须安装在 linux01</li><li>Flink 单点（linux01）：<code>1.5.1</code></li><li>拷贝：<code>cd /usr/local/ &amp;&amp; cp /opt/flink-1.5.1-bin-hadoop26-scala_2.11.tgz .</code></li><li>解压：<code>tar zxf flink-*.tgz</code></li><li>修改目录名：<code>mv /usr/local/flink-1.5.1 /usr/local/flink</code></li><li>修改配置文件：<code>vim /usr/local/flink/conf/flink-conf.yaml</code><ul><li>在文件最前加上：<code>env.java.home: /usr/local/jdk1.8.0_191</code></li></ul></li><li>启动：<code>cd /usr/local/flink &amp;&amp; ./bin/start-cluster.sh</code></li><li>停止：<code>cd /usr/local/flink &amp;&amp; ./bin/stop-cluster.sh</code></li><li>查看日志：<code>tail -300f log/flink-*-standalonesession-*.log</code></li><li>浏览器访问 WEB 管理：<code>http://linux01:8081/</code></li><li>yarn 启动 <ul><li>先停止下本地模式</li><li>测试控制台启动：<code>cd /usr/local/flink &amp;&amp; ./bin/yarn-session.sh -n 2 -jm 2024 -tm 2024</code></li><li>有可能会报：<code>The Flink Yarn cluster has failed</code>，可能是资源不够，需要调优内存相关参数</li></ul></li></ul><h4 id="zookeeper" tabindex="-1"><a class="header-anchor" href="#zookeeper" aria-hidden="true">#</a> Zookeeper</h4><ul><li>Zookeeper 单点（linux04）：<code>3.4.13</code></li><li>单个实例：<code>docker run -d --restart always --name one-zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime zookeeper:3.4.13</code></li></ul><h4 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka" aria-hidden="true">#</a> Kafka</h4><ul><li>Kafka 单点（linux04）：<code>0.10.2.2</code></li><li>上传压缩包到 /opt 目录下</li><li>拷贝压缩包：<code>cd /usr/local &amp;&amp; cp /opt/kafka_2.11-0.10.2.2.tgz .</code></li><li>解压：<code>tar zxvf kafka_2.11-0.10.2.2.tgz</code></li><li>删除压缩包并重命名目录：<code>rm -rf kafka_2.11-0.10.2.2.tgz &amp;&amp; mv /usr/local/kafka_2.11-0.10.2.2 /usr/local/kafka</code></li><li>修改 kafka-server 的配置文件：<code>vim /usr/local/kafka/config/server.properties</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>034 行：listeners=PLAINTEXT://0.0.0.0:9092\n039 行：advertised.listeners=PLAINTEXT://linux04:9092\n119 行：zookeeper.connect=linux04:2181\n补充  ：auto.create.topics.enable=true\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>启动 kafka 服务（必须制定配置文件）：<code>cd /usr/local/kafka &amp;&amp; bin/kafka-server-start.sh config/server.properties</code><ul><li>后台方式运行 kafka 服务：<code>cd /usr/local/kafka &amp;&amp; bin/kafka-server-start.sh -daemon config/server.properties</code></li><li>停止 kafka 服务：<code>cd /usr/local/kafka &amp;&amp; bin/kafka-server-stop.sh</code></li></ul></li><li>再开一个终端测试： <ul><li>创建 topic 命令：<code>cd /usr/local/kafka &amp;&amp; bin/kafka-topics.sh --create --zookeeper linux04:2181 --replication-factor 1 --partitions 1 --topic my-topic-test</code></li><li>查看 topic 命令：<code>cd /usr/local/kafka &amp;&amp; bin/kafka-topics.sh --list --zookeeper linux04:2181</code></li><li>删除 topic：<code>cd /usr/local/kafka &amp;&amp; bin/kafka-topics.sh --delete --topic my-topic-test --zookeeper linux04:2181</code></li><li>给 topic 发送消息命令：<code>cd /usr/local/kafka &amp;&amp; bin/kafka-console-producer.sh --broker-list linux04:9092 --topic my-topic-test</code>，然后在出现交互输入框的时候输入你要发送的内容</li><li>再开一个终端，进入 kafka 容器，接受消息：<code>cd /usr/local/kafka &amp;&amp; bin/kafka-console-consumer.sh --bootstrap-server linux04:9092 --topic my-topic-test --from-beginning</code></li><li>此时发送的终端输入一个内容回车，接受消息的终端就可以收到。</li></ul></li></ul><h4 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h4><ul><li>MySQL 单点（linux04）：<code>5.7</code></li><li>创建本地数据存储 + 配置文件目录：<code>mkdir -p /data/docker/mysql/datadir /data/docker/mysql/conf /data/docker/mysql/log</code></li><li>在宿主机上创建一个配置文件：<code>vim /data/docker/mysql/conf/mysql-1.cnf</code>，内容如下：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[mysql]\ndefault-character-set = utf8\n\n[mysqld]\npid-file = /var/run/mysqld/mysqld.pid\nsocket = /var/run/mysqld/mysqld.sock\ndatadir = /var/lib/mysql\nsymbolic-links=0\n\nlog-error=/var/log/mysql/error.log\ndefault-storage-engine = InnoDB\ncollation-server = utf8_unicode_ci\ninit_connect = &#39;SET NAMES utf8&#39;\ncharacter-set-server = utf8\nlower_case_table_names = 1\nmax_allowed_packet = 50M\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>赋权（避免挂载的时候，一些程序需要容器中的用户的特定权限使用）：<code>chmod -R 777 /data/docker/mysql/datadir /data/docker/mysql/log</code></li><li>赋权：<code>chown -R 0:0 /data/docker/mysql/conf</code></li><li><code>docker run -p 3306:3306 --name one-mysql -v /data/docker/mysql/datadir:/var/lib/mysql -v /data/docker/mysql/log:/var/log/mysql -v /data/docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=aaabbb123456 -d mysql:5.7</code></li><li>连上容器：<code>docker exec -it one-mysql /bin/bash</code><ul><li>连上 MySQL：<code>mysql -u root -p</code></li><li>创建表：<code>CREATE DATABASE wormhole DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;</code></li></ul></li><li><strong>确保用 sqlyog 能直接在外网连上，方便后面调试</strong></li></ul><h4 id="spark" tabindex="-1"><a class="header-anchor" href="#spark" aria-hidden="true">#</a> Spark</h4><ul><li>须安装在 linux01</li><li>Spark 单点（linux01）：<code>2.2.0</code></li><li>上传压缩包到 /opt 目录下</li><li>拷贝压缩包：<code>cd /usr/local &amp;&amp; cp /opt/spark-2.2.0-bin-hadoop2.6.tgz .</code></li><li>解压：<code>tar zxvf spark-2.2.0-bin-hadoop2.6.tgz</code></li><li>重命名：<code>mv /usr/local/spark-2.2.0-bin-hadoop2.6 /usr/local/spark</code></li><li>增加环境变量：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>vim /etc/profile\n\nSPARK_HOME=/usr/local/spark\nPATH=$PATH:${SPARK_HOME}/bin:${SPARK_HOME}/sbin\nexport SPARK_HOME\nexport PATH\n\nsource /etc/profile\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改配置：<code>cp $SPARK_HOME/conf/spark-env.sh.template $SPARK_HOME/conf/spark-env.sh</code></li><li>修改配置：<code>vim $SPARK_HOME/conf/spark-env.sh</code></li><li>假设我的 hadoop 路径是：/usr/local/hadoop，则最尾巴增加：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="非必须组件" tabindex="-1"><a class="header-anchor" href="#非必须组件" aria-hidden="true">#</a> 非必须组件</h4><ul><li>Elasticsearch（支持版本 5.x）（非必须，若无则无法查看 wormhole 处理数据的吞吐和延时）</li><li>Grafana （支持版本 4.x）（非必须，若无则无法查看 wormhole 处理数据的吞吐和延时的图形化展示）</li></ul><hr><h2 id="wormhole-安装-配置" tabindex="-1"><a class="header-anchor" href="#wormhole-安装-配置" aria-hidden="true">#</a> Wormhole 安装 + 配置</h2><ul><li>须安装在 linux01</li><li>wormhole 单点（linux01）：<code>0.6.0-beta</code>，2018-12-06 版本</li><li>先在 linux04 机子的 kafka 创建 topic：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cd /usr/local/kafka &amp;&amp; bin/kafka-topics.sh --list --zookeeper linux04:2181\ncd /usr/local/kafka &amp;&amp; bin/kafka-topics.sh --create --zookeeper linux04:2181 --replication-factor 1 --partitions 1 --topic source\ncd /usr/local/kafka &amp;&amp; bin/kafka-topics.sh --create --zookeeper linux04:2181 --replication-factor 1 --partitions 1 --topic wormhole_feedback\ncd /usr/local/kafka &amp;&amp; bin/kafka-topics.sh --create --zookeeper linux04:2181 --replication-factor 1 --partitions 1 --topic wormhole_heartbeat\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上传压缩包到 /opt 目录下</li><li>拷贝压缩包：<code>cd /usr/local &amp;&amp; cp /opt/wormhole-0.6.0-beta.tar.gz .</code></li><li>解压：<code>cd /usr/local &amp;&amp; tar -xvf wormhole-0.6.0-beta.tar.gz</code></li><li>修改配置文件：<code>vim /usr/local/wormhole-0.6.0-beta/conf/application.conf</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\nakka.http.server.request-timeout = 120s\n\nwormholeServer {\n  cluster.id = &quot;&quot; #optional global uuid\n  host = &quot;linux01&quot;\n  port = 8989\n  ui.default.language = &quot;Chinese&quot;\n  token.timeout = 1\n  token.secret.key = &quot;iytr174395lclkb?lgj~8u;[=L:ljg&quot;\n  admin.username = &quot;admin&quot;    #default admin user name\n  admin.password = &quot;admin&quot;    #default admin user password\n}\n\nmysql = {\n  driver = &quot;slick.driver.MySQLDriver$&quot;\n  db = {\n    driver = &quot;com.mysql.jdbc.Driver&quot;\n    user = &quot;root&quot;\n    password = &quot;aaabbb123456&quot;\n    url = &quot;jdbc:mysql://linux04:3306/wormhole?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&quot;\n    numThreads = 4\n    minConnections = 4\n    maxConnections = 10\n    connectionTimeout = 3000\n  }\n}\n\n#ldap = {\n#  enabled = false\n#  user = &quot;&quot;\n#  pwd = &quot;&quot;\n#  url = &quot;&quot;\n#  dc = &quot;&quot;\n#  read.timeout = 3000\n#  read.timeout = 5000\n#  connect = {\n#    timeout = 5000\n#    pool = true\n#  }\n#}\n\nspark = {\n  wormholeServer.user = &quot;root&quot;   #WormholeServer linux user\n  wormholeServer.ssh.port = 22       #ssh port, please set WormholeServer linux user can password-less login itself remote\n  spark.home = &quot;/usr/local/spark&quot;\n  yarn.queue.name = &quot;default&quot;        #WormholeServer submit spark streaming/job queue\n  wormhole.hdfs.root.path = &quot;hdfs://linux01/wormhole&quot;   #WormholeServer hdfslog data default hdfs root path\n  yarn.rm1.http.url = &quot;linux01:8088&quot;    #Yarn ActiveResourceManager address\n  yarn.rm2.http.url = &quot;linux01:8088&quot;   #Yarn StandbyResourceManager address\n}\n\nflink = {\n  home = &quot;/usr/local/flink&quot;\n  yarn.queue.name = &quot;default&quot;\n  feedback.state.count=100\n  checkpoint.enable=false\n  checkpoint.interval=60000\n  stateBackend=&quot;hdfs://linux01/flink-checkpoints&quot;\n  feedback.interval=30\n}\n\nzookeeper = {\n  connection.url = &quot;linux04:2181&quot;  #WormholeServer stream and flow interaction channel\n  wormhole.root.path = &quot;/wormhole&quot;   #zookeeper\n}\n\nkafka = {\n  brokers.url = &quot;linux04:9092&quot;\n  zookeeper.url = &quot;linux04:2181&quot;\n  topic.refactor = 1\n  using.cluster.suffix = false #if true, _${cluster.id} will be concatenated to consumer.feedback.topic\n  consumer = {\n    feedback.topic = &quot;wormhole_feedback&quot;\n    poll-interval = 20ms\n    poll-timeout = 1s\n    stop-timeout = 30s\n    close-timeout = 20s\n    commit-timeout = 70s\n    wakeup-timeout = 60s\n    max-wakeups = 10\n    session.timeout.ms = 60000\n    heartbeat.interval.ms = 50000\n    max.poll.records = 1000\n    request.timeout.ms = 80000\n    max.partition.fetch.bytes = 10485760\n  }\n}\n\n#kerberos = {\n#  keyTab=&quot;&quot;      #the keyTab will be used on yarn\n#  spark.principal=&quot;&quot;   #the principal of spark\n#  spark.keyTab=&quot;&quot;      #the keyTab of spark\n#  server.config=&quot;&quot;     #the path of krb5.conf\n#  jaas.startShell.config=&quot;&quot; #the path of jaas config file which should be used by start.sh\n#  jaas.yarn.config=&quot;&quot;     #the path of jaas config file which will be uploaded to yarn\n#  server.enabled=false   #enable wormhole connect to Kerberized cluster\n#}\n\n# choose monitor method among ES、MYSQL\nmonitor ={\n   database.type=&quot;MYSQL&quot;\n}\n\n#Wormhole feedback data store, if doesn&#39;t want to config, you will not see wormhole processing delay and throughput\n#if not set, please comment it\n\n#elasticSearch.http = {\n#  url = &quot;http://localhost:9200&quot;\n#  user = &quot;&quot;\n#  password = &quot;&quot;\n#}\n\n#display wormhole processing delay and throughput data, get admin user token from grafana\n#garfana should set to be anonymous login, so you can access the dashboard through wormhole directly\n#if not set, please comment it\n\n#grafana = {\n#  url = &quot;http://localhost:3000&quot;\n#  admin.token = &quot;jihefouglokoj&quot;\n#}\n\n#delete feedback history data on time\nmaintenance = {\n  mysql.feedback.remain.maxDays = 7\n  elasticSearch.feedback.remain.maxDays = 7\n}\n\n\n#Dbus integration, support serveral DBus services, if not set, please comment it\n\n#dbus = {\n#  api = [\n#    {\n#      login = {\n#        url = &quot;http://localhost:8080/keeper/login&quot;\n#        email = &quot;&quot;\n#        password = &quot;&quot;\n#      }\n#      synchronization.namespace.url = &quot;http://localhost:8080/keeper/tables/riderSearch&quot;\n#    }\n#  ]\n#}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',25),S=(0,n.Uk)("初始化表结构脚本路径："),A={href:"https://github.com/edp963/wormhole/blob/master/rider/conf/wormhole.sql",target:"_blank",rel:"noopener noreferrer"},z=(0,n.Uk)("https://github.com/edp963/wormhole/blob/master/rider/conf/wormhole.sql"),E=(0,n._)("ul",null,[(0,n._)("li",null,"该脚本存在一个问题：初始化脚本和补丁脚本混在一起，所以直接复制执行会有报错，但是报错的部分是不影响"),(0,n._)("li",null,"我是直接把基础 sql 和补丁 sql 分开执行，方便判断。")],-1),j=(0,n._)("li",null,[(0,n.Uk)("启动："),(0,n._)("code",null,"sh /usr/local/wormhole-0.6.0-beta/bin/start.sh")],-1),O=(0,n._)("li",null,[(0,n.Uk)("查看 log："),(0,n._)("code",null,"tail -200f /usr/local/wormhole-0.6.0-beta/logs/application.log")],-1),H=(0,n.Uk)("部署完成，浏览器访问："),T={href:"http://linux01:8989",target:"_blank",rel:"noopener noreferrer"},P=(0,n.Uk)("http://linux01:8989"),D=(0,n._)("li",null,"默认管理员用户名：admin，密码：admin",-1),M=(0,n._)("hr",null,null,-1),U=(0,n._)("h2",{id:"创建用户",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#创建用户","aria-hidden":"true"},"#"),(0,n.Uk)(" 创建用户")],-1),C=(0,n._)("strong",null,"参考官网，必须先了解下",-1),R=(0,n.Uk)("："),F={href:"https://edp963.github.io/wormhole/quick-start.html",target:"_blank",rel:"noopener noreferrer"},N=(0,n.Uk)("https://edp963.github.io/wormhole/quick-start.html"),W=(0,n._)("li",null,"必须创建用户，后面才能进入 Project 里面创建 Stream / Flow",-1),I=(0,n._)("li",null,[(0,n.Uk)("创建的用户类型必须是："),(0,n._)("code",null,"user")],-1),L=(0,n._)("li",null,[(0,n.Uk)("假设这里创建的用户叫做："),(0,n._)("code",null,"user1@bg.com")],-1),K=(0,n.uE)('<hr><h2 id="创建-source-需要涉及的概念" tabindex="-1"><a class="header-anchor" href="#创建-source-需要涉及的概念" aria-hidden="true">#</a> 创建 Source 需要涉及的概念</h2><h4 id="创建-instance" tabindex="-1"><a class="header-anchor" href="#创建-instance" aria-hidden="true">#</a> 创建 Instance</h4><ul><li>Instance 用于绑定各个组件的所在服务连接</li><li>一般我们都会选择 Kafka 作为 source，后面的基础也是基于 Kafka 作为 Source 的场景</li><li>假设填写实例名：<code>source_kafka</code></li><li>URL：<code>linux04:9092</code></li></ul><h4 id="创建-database" tabindex="-1"><a class="header-anchor" href="#创建-database" aria-hidden="true">#</a> 创建 Database</h4><ul><li>各个组件的具体数据库、Topic 等信息</li><li>假设填写 Topic Name：<code>source</code></li><li>Partition：1</li></ul><h4 id="创建-namespace" tabindex="-1"><a class="header-anchor" href="#创建-namespace" aria-hidden="true">#</a> 创建 Namespace</h4><ul><li>wormhole 抽象出来的概念</li><li>用于数据分类</li><li>假设填写 Tables：<code>ums_extension id</code></li><li>配置 schema，记得配置上 ums_ts</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n   &quot;id&quot;: 1,\n   &quot;name&quot;: &quot;test&quot;,\n   &quot;phone&quot;: &quot;18074546423&quot;,\n   &quot;city&quot;: &quot;Beijing&quot;,\n   &quot;time&quot;: &quot;2017-12-22 10:00:00&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="创建-sink-需要涉及的概念" tabindex="-1"><a class="header-anchor" href="#创建-sink-需要涉及的概念" aria-hidden="true">#</a> 创建 Sink 需要涉及的概念</h2><h4 id="创建-instance-1" tabindex="-1"><a class="header-anchor" href="#创建-instance-1" aria-hidden="true">#</a> 创建 Instance</h4><ul><li>假设填写实例名：<code>sink_mysql</code></li><li>URL：<code>linux04:3306</code></li></ul><h4 id="创建-database-1" tabindex="-1"><a class="header-anchor" href="#创建-database-1" aria-hidden="true">#</a> 创建 Database</h4><ul><li>假设填写 Database Name：<code>sink</code></li><li>config 参数：<code>useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;rewriteBatchedStatements=true</code></li></ul><h4 id="创建-namespace-1" tabindex="-1"><a class="header-anchor" href="#创建-namespace-1" aria-hidden="true">#</a> 创建 Namespace</h4><ul><li>假设填写 Tables: <code>user id</code></li></ul><hr><h2 id="创建-project" tabindex="-1"><a class="header-anchor" href="#创建-project" aria-hidden="true">#</a> 创建 Project</h2><ul><li>项目标识：<code>demo</code></li></ul><hr><h2 id="flink-stream" tabindex="-1"><a class="header-anchor" href="#flink-stream" aria-hidden="true">#</a> Flink Stream</h2><ul><li>Stream 是在 Project 内容页下才能创建</li><li>一个 Stream 可以有多个 Flow</li><li>并且是 Project 下面的用户才能创建，admin 用户没有权限</li><li>要删除 Project 必须先进入 Project 内容页删除所有 Stream 之后 admin 才能删除 Project</li><li>新建 Stream <ul><li>Stream type 类型选择：<code>Flink</code></li><li>假设填写 Name：<code>wormhole_stream_test</code></li></ul></li></ul><h2 id="flink-flow" tabindex="-1"><a class="header-anchor" href="#flink-flow" aria-hidden="true">#</a> Flink Flow</h2>',24),B=(0,n._)("li",null,[(0,n.Uk)("假设 Flow name 为："),(0,n._)("code",null,"wormhole_flow_test")],-1),$=(0,n._)("li",null,"Flow 是在 Project 内容页下才能创建",-1),J=(0,n._)("li",null,"并且是 Project 下面的用户才能创建，admin 用户没有权限",-1),Y=(0,n._)("li",null,"Flow 会关联 source 和 sink",-1),G=(0,n._)("li",null,"要删除 Project 必须先进入 Project 内容页删除所有 Stream 之后 admin 才能删除 Project",-1),V=(0,n.Uk)("基于 Stream 新建 Flow "),Q=(0,n._)("li",null,"Pipeline",-1),Z=(0,n.Uk)("Transformation "),X={href:"https://edp963.github.io/wormhole/user-guide.html#cep",target:"_blank",rel:"noopener noreferrer"},ee=(0,n.Uk)("https://edp963.github.io/wormhole/user-guide.html#cep"),ie=(0,n._)("li",null,"NO_SKIP 滑动窗口",-1),le=(0,n._)("li",null,"SKIP_PAST_LAST_EVENT 滚动窗口",-1),ne=(0,n._)("li",null,"KeyBy 分组字段",-1),ae=(0,n._)("li",null,[(0,n.Uk)("Output "),(0,n._)("ul",null,[(0,n._)("li",null,"Agg：将匹配的多条数据做聚合，生成一条数据输出,例：field1:avg,field2:max（目前支持 max/min/avg/sum）"),(0,n._)("li",null,"Detail：将匹配的多条数据逐一输出"),(0,n._)("li",null,"FilteredRow：按条件选择指定的一条数据输出，例：head/last/ field1:min/max")])],-1),se=(0,n._)("li",null,"Confirmation",-1),de=(0,n._)("li",null,"注意：Stream 处于 running 状态时，才可以启动 Flow",-1),oe=(0,n.uE)('<hr><h2 id="kafka-发送测试数据" tabindex="-1"><a class="header-anchor" href="#kafka-发送测试数据" aria-hidden="true">#</a> Kafka 发送测试数据</h2><ul><li>在 linux04 机子上</li><li><code>cd /usr/local/kafka/bin &amp;&amp; ./kafka-console-producer.sh --broker-list linux04:9092 --topic source --property &quot;parse.key=true&quot; --property &quot;key.separator=@@@&quot;</code></li><li>发送 UMS 流消息协议规范格式：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>data_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 1, &quot;name&quot;: &quot;test1&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:01:00&quot;}\n\ndata_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 2, &quot;name&quot;: &quot;test2&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:02:00&quot;}\n\ndata_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 3, &quot;name&quot;: &quot;test3&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:03:00&quot;}\n\ndata_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 4, &quot;name&quot;: &quot;test4&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:04:00&quot;}\n\ndata_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 5, &quot;name&quot;: &quot;test5&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:05:00&quot;}\n\ndata_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 6, &quot;name&quot;: &quot;test6&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:06:00&quot;}\n\ndata_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 7, &quot;name&quot;: &quot;test7&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:07:00&quot;}\n\ndata_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 8, &quot;name&quot;: &quot;test8&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:08:00&quot;}\n\ndata_increment_data.kafka.source_kafka.source.ums_extension.*.*.*@@@{&quot;id&quot;: 9, &quot;name&quot;: &quot;test9&quot;, &quot;phone&quot;:&quot;18074546423&quot;, &quot;city&quot;: &quot;Beijing&quot;, &quot;time&quot;: &quot;2017-12-22 10:09:00&quot;}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),re={},te=(0,l(83744).Z)(re,[["render",function(e,i){const l=(0,n.up)("RouterLink"),re=(0,n.up)("ExternalLinkIcon");return(0,n.wg)(),(0,n.iD)("div",null,[a,(0,n._)("ul",null,[s,(0,n._)("li",null,[d,(0,n.Wm)(l,{to:"/linux-tutor/"},{default:(0,n.w5)((()=>[o])),_:1})])]),r,(0,n._)("ul",null,[(0,n._)("li",null,[t,(0,n._)("a",u,[c,(0,n.Wm)(re)])]),v,m]),b,(0,n._)("ul",null,[(0,n._)("li",null,[h,(0,n._)("a",p,[k,(0,n.Wm)(re)])]),q]),f,(0,n._)("ul",null,[g,(0,n._)("li",null,[x,(0,n.Wm)(l,{to:"/linux-tutor/server/Hadoop-Install-And-Settings.html"},{default:(0,n.w5)((()=>[_])),_:1}),y])]),w,(0,n._)("ul",null,[(0,n._)("li",null,[S,(0,n._)("a",A,[z,(0,n.Wm)(re)]),E]),j,O,(0,n._)("li",null,[H,(0,n._)("a",T,[P,(0,n.Wm)(re)])]),D]),M,U,(0,n._)("ul",null,[(0,n._)("li",null,[C,R,(0,n._)("a",F,[N,(0,n.Wm)(re)])]),W,I,L]),K,(0,n._)("ul",null,[B,$,J,Y,G,(0,n._)("li",null,[V,(0,n._)("ul",null,[Q,(0,n._)("li",null,[Z,(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("a",X,[ee,(0,n.Wm)(re)])]),ie,le,ne,ae])]),se])]),de]),oe])}]])}}]);