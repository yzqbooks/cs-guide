"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[74686],{35742:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s=JSON.parse('{"key":"v-205f7471","path":"/frontend/package-manager/pm2.html","title":"2.pm2使用教程","lang":"zh-CN","frontmatter":{"summary":"2.pm2使用教程 简介 PM2 是 node 进程管理工具，可以利用它来简化很多 node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。 安装 快速使用 执行package.json的命令 常用命令 启动 参数说明： --watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。; -","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/package-manager/pm2.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"2.pm2使用教程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-26T16:22:32.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-26T16:22:32.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"简介","slug":"简介","children":[]},{"level":2,"title":"安装","slug":"安装","children":[]},{"level":2,"title":"快速使用","slug":"快速使用","children":[{"level":3,"title":"执行package.json的命令","slug":"执行package-json的命令","children":[]}]},{"level":2,"title":"常用命令","slug":"常用命令","children":[{"level":3,"title":"启动","slug":"启动","children":[]},{"level":3,"title":"重启","slug":"重启","children":[]},{"level":3,"title":"3.3 停止","slug":"_3-3-停止","children":[]},{"level":3,"title":"停止","slug":"停止","children":[]},{"level":3,"title":"从进程列表删除进程","slug":"从进程列表删除进程","children":[]},{"level":3,"title":"删除进程列表中所有进程","slug":"删除进程列表中所有进程","children":[]},{"level":3,"title":"查看进程状态","slug":"查看进程状态","children":[]},{"level":3,"title":"查看某个进程的信息","slug":"查看某个进程的信息","children":[]},{"level":3,"title":"负载均衡","slug":"负载均衡","children":[]},{"level":3,"title":"日志查看","slug":"日志查看","children":[]},{"level":3,"title":"开机自动启动","slug":"开机自动启动","children":[]},{"level":3,"title":"监控(monitor)-查看进程的资源消耗情况","slug":"监控-monitor-查看进程的资源消耗情况","children":[]}]},{"level":2,"title":"通过pm2配置文件来自动部署项目","slug":"通过pm2配置文件来自动部署项目","children":[{"level":3,"title":"在项目根目录下新建一个 deploy.yaml 文件","slug":"在项目根目录下新建一个-deploy-yaml-文件","children":[]},{"level":3,"title":"配置git的ssh免密认证","slug":"配置git的ssh免密认证","children":[]},{"level":3,"title":"使用pm2部署项目","slug":"使用pm2部署项目","children":[]},{"level":3,"title":"该部署流程同样适用前端项目","slug":"该部署流程同样适用前端项目","children":[]}]}],"git":{"createdTime":1651499190000,"updatedTime":1653582152000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":5}]},"readingTime":{"minutes":5.92,"words":1776},"filePathRelative":"frontend/package-manager/pm2.md","localizedDate":"2022年5月2日"}')},67040:(e,n,a)=>{a.r(n),a.d(n,{default:()=>m});var s=a(66252);const i=(0,s.uE)('<h1 id="_2-pm2使用教程" tabindex="-1"><a class="header-anchor" href="#_2-pm2使用教程" aria-hidden="true">#</a> 2.pm2使用教程</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>PM2 是 node 进程管理工具，可以利用它来简化很多 node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>npm install <span class="token operator">-</span>g pm2\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用" aria-hidden="true">#</a> 快速使用</h2><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>pm2 <span class="token function">start</span> app<span class="token punctuation">.</span>js\n\npm2 save\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行package-json的命令" tabindex="-1"><a class="header-anchor" href="#执行package-json的命令" aria-hidden="true">#</a> 执行package.json的命令</h3><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>pm2 <span class="token function">start</span>  npm <span class="token operator">--</span> run dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h3><p>参数说明：</p><ul><li><code>--watch</code>：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。</li><li><code>-i --instances</code>：启用多少个实例，可用于负载均衡。如果<code>-i 0</code>或者<code>-i max</code>，则根据当前机器核数确定实例数目。</li><li><code>--ignore-watch</code>：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如<code>--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;</code></li><li><code>-n --name</code>：应用的名称。查看应用信息的时候可以用到。</li><li><code>-o --output &lt;path&gt;</code>：标准输出日志文件的路径。</li><li><code>-e --error &lt;path&gt;</code>：错误输出日志文件的路径。</li><li><code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python...)。比如你用的coffee script来编写应用。</li></ul><h3 id="重启" tabindex="-1"><a class="header-anchor" href="#重启" aria-hidden="true">#</a> 重启</h3><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>pm2 restart app<span class="token punctuation">.</span>js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-停止" tabindex="-1"><a class="header-anchor" href="#_3-3-停止" aria-hidden="true">#</a> 3.3 停止</h3><p>停止特定的应用。可以先通过<code>pm2 list</code>获取应用的名字（--name指定的）或者进程id。</p><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>pm2 stop app_name|app_id\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要停止所有应用，可以</p><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>pm2 stop all\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="停止" tabindex="-1"><a class="header-anchor" href="#停止" aria-hidden="true">#</a> 停止</h3><p>类似<code>pm2 stop</code>，如下</p><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>pm2 stop app_name|app_id\npm2 stop all\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从进程列表删除进程" tabindex="-1"><a class="header-anchor" href="#从进程列表删除进程" aria-hidden="true">#</a> 从进程列表删除进程</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// pm2 delete [appname] | id</span>\npm2 <span class="token keyword">delete</span> app  <span class="token comment">// 指定进程名删除</span>\npm2 <span class="token keyword">delete</span> <span class="token number">0</span>    <span class="token comment">// 指定进程id删除</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除进程列表中所有进程" tabindex="-1"><a class="header-anchor" href="#删除进程列表中所有进程" aria-hidden="true">#</a> 删除进程列表中所有进程</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>pm2 <span class="token keyword">delete</span> all\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看进程状态" tabindex="-1"><a class="header-anchor" href="#查看进程状态" aria-hidden="true">#</a> 查看进程状态</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>pm2 list\n<span class="token comment">// 或者</span>\npm2 ls\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看某个进程的信息" tabindex="-1"><a class="header-anchor" href="#查看某个进程的信息" aria-hidden="true">#</a> 查看某个进程的信息</h3><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>pm2 describe 0\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h3><p>命令如下，表示开启三个进程。如果<code>-i 0</code>，则会根据机器当前核数自动开启尽可能多的进程。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pm2 start app.js -i <span class="token number">3</span> <span class="token comment"># 开启三个进程</span>\npm2 start app.js -i max <span class="token comment"># 根据机器CPU核数，开启对应数目的进程 </span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日志查看" tabindex="-1"><a class="header-anchor" href="#日志查看" aria-hidden="true">#</a> 日志查看</h3><p>除了可以打开日志文件查看日志外，还可以通过<code>pm2 logs</code>来查看实时日志。这点对于线上问题排查非常重要。</p><p>比如某个 node 服务突然异常重启了，那么可以通过 pm2 提供的日志工具来查看实时日志，看是不是脚本出错之类导致的异常重启。</p><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>pm2 logs\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="开机自动启动" tabindex="-1"><a class="header-anchor" href="#开机自动启动" aria-hidden="true">#</a> 开机自动启动</h3>',39),l=(0,s.Uk)("可以通过"),d=(0,s._)("code",null,"pm2 startup",-1),t=(0,s.Uk)("来实现开机自启动。细节可"),r={href:"https://links.jianshu.com/go?to=http%3A%2F%2Fpm2.keymetrics.io%2Fdocs%2Fusage%2Fstartup%2F",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Uk)("参考"),o=(0,s.Uk)("。大致流程如下"),c=(0,s.uE)('<ol><li>通过<code>pm2 save</code>保存当前进程状态。</li><li>通过<code>pm2 startup [platform]</code>生成开机自启动的命令。（记得查看控制台输出）</li><li>将步骤2生成的命令，粘贴到控制台进行，搞定。</li></ol><h3 id="监控-monitor-查看进程的资源消耗情况" tabindex="-1"><a class="header-anchor" href="#监控-monitor-查看进程的资源消耗情况" aria-hidden="true">#</a> 监控(monitor)-查看进程的资源消耗情况</h3><p>运行如下命令，查看当前通过pm2运行的进程的状态。</p><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>pm2 monit\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="通过pm2配置文件来自动部署项目" tabindex="-1"><a class="header-anchor" href="#通过pm2配置文件来自动部署项目" aria-hidden="true">#</a> 通过pm2配置文件来自动部署项目</h2><h3 id="在项目根目录下新建一个-deploy-yaml-文件" tabindex="-1"><a class="header-anchor" href="#在项目根目录下新建一个-deploy-yaml-文件" aria-hidden="true">#</a> 在项目根目录下新建一个 deploy.yaml 文件</h3><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token preprocessor property"># deploy.yaml</span>\napps<span class="token punctuation">:</span>\n  <span class="token operator">-</span> script<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token operator">/</span>start<span class="token punctuation">.</span>js       # 入口文件\n    name<span class="token punctuation">:</span> &#39;app&#39;              # 程序名称\n    env<span class="token punctuation">:</span>                     # 环境变量\n      COMMON_VARIABLE<span class="token punctuation">:</span> <span class="token class-name">true</span>\n    env_production<span class="token punctuation">:</span>\n      NODE_ENV<span class="token punctuation">:</span> <span class="token class-name">production</span>\n\ndeploy<span class="token punctuation">:</span>                     # 部署脚本\n  production<span class="token punctuation">:</span>               # 生产环境\n    user<span class="token punctuation">:</span> lentoo            # 服务器的用户名\n    host<span class="token punctuation">:</span> <span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.166</span>     # 服务器的ip地址\n    port<span class="token punctuation">:</span> <span class="token number">22</span>                # ssh端口\n    <span class="token keyword">ref</span><span class="token punctuation">:</span> origin<span class="token operator">/</span>master      # 要拉取的git分支\n    ssh_options<span class="token punctuation">:</span> StrictHostKeyChecking<span class="token operator">=</span>no # SSH 公钥检查\n    repo<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token comment">/**.git # 远程仓库地址\n    path: /home              # 拉取到服务器某个目录下\n    pre-deploy: git fetch --all # 部署前执行\n    post-deploy: npm install &amp;&amp;  pm2 reload deploy.yaml --env production # 部署后执行\n    env:\n      NODE_ENV: production\n</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置git的ssh免密认证" tabindex="-1"><a class="header-anchor" href="#配置git的ssh免密认证" aria-hidden="true">#</a> 配置git的ssh免密认证</h3><ol><li>在服务器中生成rsa公钥和私钥，当前是 <strong>centos7</strong> 下进行</li><li>前提服务器要安装git，没有安装的先安装git，已安装的跳过</li></ol><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>yum –y install git\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>生成秘钥</li></ol><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>ssh-keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">&quot;xxx@xxx.com&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在~/.ssh目录下有 id_rsa和 id_rsa.pub两个文件，其中id_rsa.pub文件里存放的即是公钥key。</p><ol><li>登录到GitHub，点击右上方的头像，选择settings ，点击Add SSH key，把id_rsa.pub的内容复制到里面即可。</li></ol><p><img src="https:////upload-images.jianshu.io/upload_images/12842279-3e7086bd55d5a008.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" loading="lazy"></p><p>图片.png</p><h3 id="使用pm2部署项目" tabindex="-1"><a class="header-anchor" href="#使用pm2部署项目" aria-hidden="true">#</a> 使用pm2部署项目</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>一般监控 node 有几种方案：</p><p>supervisor: 一般用作开发环境的使用； forever: 管理多个站点，一般每个站点的访问量不大的情况，不需要监控； PM2: 网站的访问量比较大，需要完整的监控页面。</p></div><p>每次部署前先将本地的代码提交到远程git仓库</p><ul><li>首次部署</li></ul><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>pm2 deploy deploy<span class="token punctuation">.</span>yaml production setup \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>部署完成后，既可登陆服务器查看配置的目录下是否从git上拉取了项目</p><ul><li>再次部署</li></ul><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>pm2 deploy deploy<span class="token punctuation">.</span>yaml production upddate\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="该部署流程同样适用前端项目" tabindex="-1"><a class="header-anchor" href="#该部署流程同样适用前端项目" aria-hidden="true">#</a> 该部署流程同样适用前端项目</h3><p>如vue-cli的项目，自动部署到服务器，自动执行<code>npm run build</code> 命令，生成的dist目录，指定到nginx的静态文件目录下。 由于 PM2 通常都用于 node 应用, 所以 exec_mode 应写为 fork, 其中最重要的是 args, -jar 和 jar 包所在的位置应该注明, 如果需要提供其他参数, 也要在 args 中一并注明.</p><p>假设创建如下所示的 fz.json, 使用命令 <code>pm2 start fz.json</code> 即可运行 fz.jar. 使用命令 tail -f /home/imzhizi/log/fz-out.log 还可以查看运行日志.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>name:应用程序名称\nargs:脚本的参数域\ncwd:应用程序所在的目录\nscript:应用程序的脚本路径\nlog_date_format:\nnode_args:node 的参数域\nerror_file:自定义应用程序的错误日志文件\nout_file:自定义应用程序日志文件\npid_file:自定义应用程序的pid文件\ninstances:\nmin_uptime:最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量\nmax_restarts:设置应用程序异常退出重启的次数，默认15次（从0开始计数）\ncron_restart:定时启动，解决重启能解决的问题\nwatch:是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，  pm2会自动重载。这里也可以设置你要监控的文件。\nmerge_logs:\nexec_interpreter:应用程序的脚本类型，这里使用的shell，默认是nodejs\nexec_mode:应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork\nautorestart:启用/禁用应用程序崩溃或退出时自动重启\nvizion:启用/禁用vizion特性(版本控制)\n \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zfile&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;-jar&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;zfile-3.2.war&quot;</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token property">&quot;error_file&quot;</span><span class="token operator">:</span><span class="token string">&quot;./log/err.log&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;out_file&quot;</span><span class="token operator">:</span><span class="token string">&quot;./log/out.log&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;exec_interpreter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;exec_mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fork&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几点经验:</p><p>通过 json 启动之后, 就可以直接使用 json 文件中的名称来对项目进行控制, 如<code>pm2 stop name</code>; 每次重新打包之后, 使用 <code>pm2 restart name</code>就可以更新项目; 如果修改了 json 文件, 就无法通过 restart 更新项目了, 必须要先 <code>pm2 del name</code>然后再重新 <code>pm2 start xx.json</code>.</p>',31),u={},m=(0,a(83744).Z)(u,[["render",function(e,n){const a=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[i,(0,s._)("p",null,[l,d,t,(0,s._)("a",r,[p,(0,s.Wm)(a)]),o]),c])}]])}}]);