"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[70701],{40307:(e,d,o)=>{o.r(d),o.d(d,{data:()=>i});const i=JSON.parse('{"key":"v-54d5b855","path":"/go-tutor/go-deps.html","title":"依赖管理","lang":"zh-CN","frontmatter":{"summary":"依赖管理 比如开源软件 Kubernetes（v1.17.0版本）的 go.mod 文件中就有数十个依赖包被标记为indirect： 在执行命令go mod tidy时，Go module 会自动整理go.mod 文件，如果有必要会在部分依赖包的后面增加// indirect注释。一般而言，被添加注释的包肯定是间接依赖的包，而没有添加// indirect注","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/go-tutor/go-deps.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"依赖管理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-05-09T01:26:58.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-05-09T01:26:58.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"直接依赖未启用 Go module","slug":"直接依赖未启用-go-module","children":[]},{"level":2,"title":"直接依赖 go.mod 文件不完整","slug":"直接依赖-go-mod-文件不完整","children":[]},{"level":2,"title":"总结","slug":"总结","children":[{"level":3,"title":"为什么要记录间接依赖","slug":"为什么要记录间接依赖","children":[]},{"level":3,"title":"如何处理间接依赖","slug":"如何处理间接依赖","children":[]},{"level":3,"title":"如何查找间接依赖来源","slug":"如何查找间接依赖来源","children":[]}]}],"git":{"createdTime":1652059618000,"updatedTime":1652059618000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":4.19,"words":1257},"filePathRelative":"go-tutor/go-deps.md","localizedDate":"2022年5月9日"}')},36140:(e,d,o)=>{o.r(d),o.d(d,{default:()=>t});var i=o(66252);const c=[(0,i.uE)('<h1 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理" aria-hidden="true">#</a> 依赖管理</h1><p>比如开源软件 Kubernetes（v1.17.0版本）的 go.mod 文件中就有数十个依赖包被标记为<code>indirect</code>：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>require (\n github.com/Rican7/retry v0.1.0 // indirect\n github.com/auth0/go-jwt-middleware v0.0.0-20170425171159-5493cabe49f7 // indirect\n github.com/boltdb/bolt v1.3.1 // indirect\n github.com/checkpoint-restore/go-criu v0.0.0-20190109184317-bdb7599cd87b // indirect\n github.com/codegangsta/negroni v1.0.0 // indirect\n ...\n)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行命令<code>go mod tidy</code>时，Go module 会自动整理<code>go.mod 文件</code>，如果有必要会在部分依赖包的后面增加<code>// indirect</code>注释。一般而言，被添加注释的包肯定是间接依赖的包，而没有添加<code>// indirect</code>注释的包则是直接依赖的包，即明确的出现在某个<code>import</code>语句中。</p><p>然而，这里需要着重强调的是：并不是所有的间接依赖都会出现在 <code>go.mod</code>文件中。</p><p>间接依赖出现在<code>go.mod</code>文件的情况，可能符合下面所列场景的一种或多种：</p><ul><li>直接依赖未启用 Go module</li><li>直接依赖go.mod 文件中缺失部分依赖</li></ul><h2 id="直接依赖未启用-go-module" tabindex="-1"><a class="header-anchor" href="#直接依赖未启用-go-module" aria-hidden="true">#</a> 直接依赖未启用 Go module</h2><p>如下图所示，Module A 依赖 B，但是 B 还未切换成 Module，也即没有<code>go.mod</code>文件，此时，当使用<code>go mod tidy</code>命令更新A的<code>go.mod</code>文件时，B的两个依赖B1和B2将会被添加到A的<code>go.mod</code>文件中（前提是A之前没有依赖B1和B2），并且B1 和B2还会被添加<code>// indirect</code>的注释。</p><p><img src="https://oscimg.oschina.net/oscnet/up-11e7a118e04c3ee4ffcb258bd744ab1ab13.png#id=V03F0&amp;originHeight=228&amp;originWidth=406&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="a" loading="lazy"></p><p>此时Module A的<code>go.mod</code>文件中require部分将会变成：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>require (\n B vx.x.x\n B1 vx.x.x // indirect\n B2 vx.x.x // indirect\n)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖B及B的依赖B1和B2都会出现在<code>go.mod</code>文件中。</p><h2 id="直接依赖-go-mod-文件不完整" tabindex="-1"><a class="header-anchor" href="#直接依赖-go-mod-文件不完整" aria-hidden="true">#</a> 直接依赖 go.mod 文件不完整</h2><p>如上面所述，如果依赖B没有<code>go.mod</code>文件，则Module A 将会把B的所有依赖记录到A 的<code>go.mod</code>文件中。即便B拥有<code>go.mod</code>，如果<code>go.mod</code>文件不完整的话，Module A依然会记录部分B的依赖到<code>go.mod</code>文件中。</p><p>如下图所示，Module B虽然提供了<code>go.mod</code>文件中，但<code>go.mod</code>文件中只添加了依赖B1，那么此时A在引用B时，则会在A的<code>go.mod</code>文件中添加B2作为间接依赖，B1则不会出现在A的<code>go.mod</code>文件中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f185e4a01c63ffce70767ecdf065819100c.png#id=RK4Ku&amp;originHeight=228&amp;originWidth=406&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="a" loading="lazy"></p><p>此时Module A的<code>go.mod</code>文件中require部分将会变成：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>require (\n B vx.x.x\n B2 vx.x.x // indirect\n)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于B1已经包含进B的<code>go.mod</code>文件中，A的<code>go.mod</code>文件则不必再记录，只会记录缺失的B2。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="为什么要记录间接依赖" tabindex="-1"><a class="header-anchor" href="#为什么要记录间接依赖" aria-hidden="true">#</a> 为什么要记录间接依赖</h3><p>在上面的例子中，如果某个依赖B 没有<code>go.mod</code>文件，在A 的<code>go.mod</code>文件中已经记录了依赖B及其版本号，为什么还要增加间接依赖呢？</p><p>我们知道Go module需要精确地记录软件的依赖情况，虽然此处记录了依赖B的版本号，但B的依赖情况没有记录下来，所以如果B的<code>go.mod</code>文件缺失了（或没有）这个信息，则需要在A的<code>go.mod</code>文件中记录下来。此时间接依赖的版本号将会跟据Go module的版本选择机制确定一个最优版本。</p><h3 id="如何处理间接依赖" tabindex="-1"><a class="header-anchor" href="#如何处理间接依赖" aria-hidden="true">#</a> 如何处理间接依赖</h3><p>综上所述间接依赖出现在<code>go.mod</code>中，可以一定程度上说明依赖有瑕疵，要么是其不支持Go module，要么是其<code>go.mod</code>文件不完整。</p><p>由于Go 语言从v1.11版本才推出module的特性，众多开源软件迁移到go module还需要一段时间，在过渡期必然会出现间接依赖，但随着时间的推进，在<code>go.mod</code>中出现<code>// indirect</code>的机率会越来越低。</p><p>出现间接依赖可能意味着你在使用过时的软件，如果有精力的话还是推荐尽快消除间接依赖。可以通过使用依赖的新版本或者替换依赖的方式消除间接依赖。</p><h3 id="如何查找间接依赖来源" tabindex="-1"><a class="header-anchor" href="#如何查找间接依赖来源" aria-hidden="true">#</a> 如何查找间接依赖来源</h3><p>Go module提供了<code>go mod why</code> 命令来解释为什么会依赖某个软件包，若要查看<code>go.mod</code>中某个间接依赖是被哪个依赖引入的，可以使用命令<code>go mod why -m &lt;pkg&gt;</code>来查看。</p><p>比如，我们有如下的<code>go.mod</code>文件片断：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>require (\n github.com/Rican7/retry v0.1.0 // indirect\n github.com/google/uuid v1.0.0\n github.com/renhongcai/indirect v1.0.0\n github.com/spf13/pflag v1.0.5 // indirect\n golang.org/x/text v0.3.2\n)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望确定间接依赖<code>github.com/Rican7/retry v0.1.0 // indirect</code>是被哪个依赖引入的，则可以使用命令<code>go mod why</code>来查看：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[root@ecs-d8b6 gomodule]# go mod why -m github.com/Rican7/retry\n# github.com/Rican7/retry\ngithub.com/renhongcai/gomodule\ngithub.com/renhongcai/indirect\ngithub.com/Rican7/retry\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的打印信息中<code># github.com/Rican7/retry</code> 表示当前正在分析的依赖，后面几行则表示依赖链。<code>github.com/renhongcai/gomodule</code> 依赖<code>github.com/renhongcai/indirect</code>，而<code>github.com/renhongcai/indirect</code>依赖<code>github.com/Rican7/retry</code>。由此我们就可以判断出间接依赖<code>github.com/Rican7/retry</code>是被<code>github.com/renhongcai/indirect</code>引入的。</p><p>另外，命令<code>go mod why -m all</code>则可以分析所有依赖的依赖链。</p>',36)],n={},t=(0,o(83744).Z)(n,[["render",function(e,d){return(0,i.wg)(),(0,i.iD)("div",null,c)}]])}}]);