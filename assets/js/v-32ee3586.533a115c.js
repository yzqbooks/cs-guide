"use strict";(self.webpackChunkcs_guide=self.webpackChunkcs_guide||[]).push([[52434],{46017:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-32ee3586","path":"/java-tutor/stackoverflow/breaking-out-of-nested-loops-in-java.html","title":"从一个多层嵌套循环中直接跳出","lang":"zh-CN","frontmatter":{"summary":"从一个多层嵌套循环中直接跳出 问题 Java中如何从一个多层嵌套循环中退出，例如下面，有两个循环，break只能退出一个for循环，不能直接跳过第二个for循环 回答 可以用break+label的语法，例子如下 首先在for循环前加标签，如例子中的outerloop，然后在for循环内break label(如本例的outerloop),就会跳出该labe","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/stackoverflow/breaking-out-of-nested-loops-in-java.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"从一个多层嵌套循环中直接跳出"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-03-22T11:07:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-03-22T11:07:21.000Z"}]]},"excerpt":"","headers":[{"level":3,"title":"问题","slug":"问题","children":[]},{"level":3,"title":"回答","slug":"回答","children":[]}],"git":{"createdTime":1647947241000,"updatedTime":1647947241000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":0.67,"words":201},"filePathRelative":"java-tutor/stackoverflow/breaking-out-of-nested-loops-in-java.md","localizedDate":"2022年3月22日"}')},55521:(n,a,s)=>{s.r(a),s.d(a,{default:()=>i});var e=s(66252);const t=(0,e.uE)('<h1 id="从一个多层嵌套循环中直接跳出" tabindex="-1"><a class="header-anchor" href="#从一个多层嵌套循环中直接跳出" aria-hidden="true">#</a> 从一个多层嵌套循环中直接跳出</h1><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><p>Java中如何从一个多层嵌套循环中退出，例如下面，有两个循环，break只能退出一个for循环，不能直接跳过第二个for循环</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> t <span class="token operator">:</span> types2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n         <span class="token keyword">if</span> <span class="token punctuation">(</span>some condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n             <span class="token comment">// Do something and break...  </span>\n             <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 这样只退出了最里的for循环  </span>\n         <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span><span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回答" tabindex="-1"><a class="header-anchor" href="#回答" aria-hidden="true">#</a> 回答</h3><p>可以用break+label的语法，例子如下</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  \n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    outerloop<span class="token operator">:</span>  \n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> j <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n          <span class="token keyword">break</span> outerloop<span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span>  \n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n      <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span>  \n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先在for循环前加标签，如例子中的outerloop，然后在for循环内break label(如本例的outerloop),就会跳出该label指定的for循环。</p>',8),o=(0,e.Uk)("stackoverflow链接： "),p={href:"http://stackoverflow.com/questions/886955/breaking-out-of-nested-loops-in-java",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("http://stackoverflow.com/questions/886955/breaking-out-of-nested-loops-in-java"),l={},i=(0,s(83744).Z)(l,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("p",null,[o,(0,e._)("a",p,[c,(0,e.Wm)(s)])])])}]])}}]);